/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsergroupmembershipRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsergroupmembershipRequestCompound{}

// UsergroupmembershipRequestCompound A Usergroupmembership Object and children
type UsergroupmembershipRequestCompound struct {
	UsergroupmembershipRequest
}

type _UsergroupmembershipRequestCompound UsergroupmembershipRequestCompound

// NewUsergroupmembershipRequestCompound instantiates a new UsergroupmembershipRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsergroupmembershipRequestCompound(fkiUsergroupID int32) *UsergroupmembershipRequestCompound {
	this := UsergroupmembershipRequestCompound{}
	this.FkiUsergroupID = fkiUsergroupID
	return &this
}

// NewUsergroupmembershipRequestCompoundWithDefaults instantiates a new UsergroupmembershipRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsergroupmembershipRequestCompoundWithDefaults() *UsergroupmembershipRequestCompound {
	this := UsergroupmembershipRequestCompound{}
	return &this
}

func (o UsergroupmembershipRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsergroupmembershipRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

func (o *UsergroupmembershipRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiUsergroupID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsergroupmembershipRequestCompound := _UsergroupmembershipRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsergroupmembershipRequestCompound)

	if err != nil {
		return err
	}

	*o = UsergroupmembershipRequestCompound(varUsergroupmembershipRequestCompound)

	return err
}

type NullableUsergroupmembershipRequestCompound struct {
	value *UsergroupmembershipRequestCompound
	isSet bool
}

func (v NullableUsergroupmembershipRequestCompound) Get() *UsergroupmembershipRequestCompound {
	return v.value
}

func (v *NullableUsergroupmembershipRequestCompound) Set(val *UsergroupmembershipRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableUsergroupmembershipRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableUsergroupmembershipRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsergroupmembershipRequestCompound(val *UsergroupmembershipRequestCompound) *NullableUsergroupmembershipRequestCompound {
	return &NullableUsergroupmembershipRequestCompound{value: val, isSet: true}
}

func (v NullableUsergroupmembershipRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsergroupmembershipRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


