/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzmaxinvoicingPaymenttype The Ezmaxinvoicing payment type
type FieldEEzmaxinvoicingPaymenttype string

// List of Field-eEzmaxinvoicingPaymenttype
const (
	CHEQUE FieldEEzmaxinvoicingPaymenttype = "Cheque"
	CREDIT_CARD FieldEEzmaxinvoicingPaymenttype = "CreditCard"
	DIRECT_DEBIT FieldEEzmaxinvoicingPaymenttype = "DirectDebit"
)

// All allowed values of FieldEEzmaxinvoicingPaymenttype enum
var AllowedFieldEEzmaxinvoicingPaymenttypeEnumValues = []FieldEEzmaxinvoicingPaymenttype{
	"Cheque",
	"CreditCard",
	"DirectDebit",
}

func (v *FieldEEzmaxinvoicingPaymenttype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzmaxinvoicingPaymenttype(value)
	for _, existing := range AllowedFieldEEzmaxinvoicingPaymenttypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzmaxinvoicingPaymenttype", value)
}

// NewFieldEEzmaxinvoicingPaymenttypeFromValue returns a pointer to a valid FieldEEzmaxinvoicingPaymenttype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzmaxinvoicingPaymenttypeFromValue(v string) (*FieldEEzmaxinvoicingPaymenttype, error) {
	ev := FieldEEzmaxinvoicingPaymenttype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzmaxinvoicingPaymenttype: valid values are %v", v, AllowedFieldEEzmaxinvoicingPaymenttypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzmaxinvoicingPaymenttype) IsValid() bool {
	for _, existing := range AllowedFieldEEzmaxinvoicingPaymenttypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzmaxinvoicingPaymenttype value
func (v FieldEEzmaxinvoicingPaymenttype) Ptr() *FieldEEzmaxinvoicingPaymenttype {
	return &v
}

type NullableFieldEEzmaxinvoicingPaymenttype struct {
	value *FieldEEzmaxinvoicingPaymenttype
	isSet bool
}

func (v NullableFieldEEzmaxinvoicingPaymenttype) Get() *FieldEEzmaxinvoicingPaymenttype {
	return v.value
}

func (v *NullableFieldEEzmaxinvoicingPaymenttype) Set(val *FieldEEzmaxinvoicingPaymenttype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzmaxinvoicingPaymenttype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzmaxinvoicingPaymenttype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzmaxinvoicingPaymenttype(val *FieldEEzmaxinvoicingPaymenttype) *NullableFieldEEzmaxinvoicingPaymenttype {
	return &NullableFieldEEzmaxinvoicingPaymenttype{value: val, isSet: true}
}

func (v NullableFieldEEzmaxinvoicingPaymenttype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzmaxinvoicingPaymenttype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

