/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CountryAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryAutocompleteElementResponse{}

// CountryAutocompleteElementResponse A Country AutocompleteElement Response
type CountryAutocompleteElementResponse struct {
	// The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
	PkiCountryID int32 `json:"pkiCountryID"`
	// The name of the Country in the language of the requester
	SCountryNameX string `json:"sCountryNameX" validate:"regexp=^.{0,40}$"`
	// The shortname of the Country
	SCountryShortname string `json:"sCountryShortname" validate:"regexp=^.{1,3}$"`
	// Whether the Country is active or not
	BCountryIsactive bool `json:"bCountryIsactive"`
}

type _CountryAutocompleteElementResponse CountryAutocompleteElementResponse

// NewCountryAutocompleteElementResponse instantiates a new CountryAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryAutocompleteElementResponse(pkiCountryID int32, sCountryNameX string, sCountryShortname string, bCountryIsactive bool) *CountryAutocompleteElementResponse {
	this := CountryAutocompleteElementResponse{}
	this.PkiCountryID = pkiCountryID
	this.SCountryNameX = sCountryNameX
	this.SCountryShortname = sCountryShortname
	this.BCountryIsactive = bCountryIsactive
	return &this
}

// NewCountryAutocompleteElementResponseWithDefaults instantiates a new CountryAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryAutocompleteElementResponseWithDefaults() *CountryAutocompleteElementResponse {
	this := CountryAutocompleteElementResponse{}
	return &this
}

// GetPkiCountryID returns the PkiCountryID field value
func (o *CountryAutocompleteElementResponse) GetPkiCountryID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiCountryID
}

// GetPkiCountryIDOk returns a tuple with the PkiCountryID field value
// and a boolean to check if the value has been set.
func (o *CountryAutocompleteElementResponse) GetPkiCountryIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiCountryID, true
}

// SetPkiCountryID sets field value
func (o *CountryAutocompleteElementResponse) SetPkiCountryID(v int32) {
	o.PkiCountryID = v
}

// GetSCountryNameX returns the SCountryNameX field value
func (o *CountryAutocompleteElementResponse) GetSCountryNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCountryNameX
}

// GetSCountryNameXOk returns a tuple with the SCountryNameX field value
// and a boolean to check if the value has been set.
func (o *CountryAutocompleteElementResponse) GetSCountryNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCountryNameX, true
}

// SetSCountryNameX sets field value
func (o *CountryAutocompleteElementResponse) SetSCountryNameX(v string) {
	o.SCountryNameX = v
}

// GetSCountryShortname returns the SCountryShortname field value
func (o *CountryAutocompleteElementResponse) GetSCountryShortname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCountryShortname
}

// GetSCountryShortnameOk returns a tuple with the SCountryShortname field value
// and a boolean to check if the value has been set.
func (o *CountryAutocompleteElementResponse) GetSCountryShortnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCountryShortname, true
}

// SetSCountryShortname sets field value
func (o *CountryAutocompleteElementResponse) SetSCountryShortname(v string) {
	o.SCountryShortname = v
}

// GetBCountryIsactive returns the BCountryIsactive field value
func (o *CountryAutocompleteElementResponse) GetBCountryIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BCountryIsactive
}

// GetBCountryIsactiveOk returns a tuple with the BCountryIsactive field value
// and a boolean to check if the value has been set.
func (o *CountryAutocompleteElementResponse) GetBCountryIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BCountryIsactive, true
}

// SetBCountryIsactive sets field value
func (o *CountryAutocompleteElementResponse) SetBCountryIsactive(v bool) {
	o.BCountryIsactive = v
}

func (o CountryAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiCountryID"] = o.PkiCountryID
	toSerialize["sCountryNameX"] = o.SCountryNameX
	toSerialize["sCountryShortname"] = o.SCountryShortname
	toSerialize["bCountryIsactive"] = o.BCountryIsactive
	return toSerialize, nil
}

func (o *CountryAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiCountryID",
		"sCountryNameX",
		"sCountryShortname",
		"bCountryIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCountryAutocompleteElementResponse := _CountryAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCountryAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = CountryAutocompleteElementResponse(varCountryAutocompleteElementResponse)

	return err
}

type NullableCountryAutocompleteElementResponse struct {
	value *CountryAutocompleteElementResponse
	isSet bool
}

func (v NullableCountryAutocompleteElementResponse) Get() *CountryAutocompleteElementResponse {
	return v.value
}

func (v *NullableCountryAutocompleteElementResponse) Set(val *CountryAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryAutocompleteElementResponse(val *CountryAutocompleteElementResponse) *NullableCountryAutocompleteElementResponse {
	return &NullableCountryAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableCountryAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


