/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectUsergroupexternalAPIService ObjectUsergroupexternalAPI service
type ObjectUsergroupexternalAPIService service

type ApiUsergroupexternalCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	usergroupexternalCreateObjectV1Request *UsergroupexternalCreateObjectV1Request
}

func (r ApiUsergroupexternalCreateObjectV1Request) UsergroupexternalCreateObjectV1Request(usergroupexternalCreateObjectV1Request UsergroupexternalCreateObjectV1Request) ApiUsergroupexternalCreateObjectV1Request {
	r.usergroupexternalCreateObjectV1Request = &usergroupexternalCreateObjectV1Request
	return r
}

func (r ApiUsergroupexternalCreateObjectV1Request) Execute() (*UsergroupexternalCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalCreateObjectV1Execute(r)
}

/*
UsergroupexternalCreateObjectV1 Create a new Usergroupexternal

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupexternalCreateObjectV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalCreateObjectV1(ctx context.Context) ApiUsergroupexternalCreateObjectV1Request {
	return ApiUsergroupexternalCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupexternalCreateObjectV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalCreateObjectV1Execute(r ApiUsergroupexternalCreateObjectV1Request) (*UsergroupexternalCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.usergroupexternalCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupexternalCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupexternalCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalDeleteObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	pkiUsergroupexternalID int32
}

func (r ApiUsergroupexternalDeleteObjectV1Request) Execute() (*UsergroupexternalDeleteObjectV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalDeleteObjectV1Execute(r)
}

/*
UsergroupexternalDeleteObjectV1 Delete an existing Usergroupexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupexternalID The unique ID of the Usergroupexternal
 @return ApiUsergroupexternalDeleteObjectV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalDeleteObjectV1(ctx context.Context, pkiUsergroupexternalID int32) ApiUsergroupexternalDeleteObjectV1Request {
	return ApiUsergroupexternalDeleteObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupexternalID: pkiUsergroupexternalID,
	}
}

// Execute executes the request
//  @return UsergroupexternalDeleteObjectV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalDeleteObjectV1Execute(r ApiUsergroupexternalDeleteObjectV1Request) (*UsergroupexternalDeleteObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalDeleteObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalDeleteObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal/{pkiUsergroupexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupexternalID, "pkiUsergroupexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be greater than 0")
	}
	if r.pkiUsergroupexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	pkiUsergroupexternalID int32
	usergroupexternalEditObjectV1Request *UsergroupexternalEditObjectV1Request
}

func (r ApiUsergroupexternalEditObjectV1Request) UsergroupexternalEditObjectV1Request(usergroupexternalEditObjectV1Request UsergroupexternalEditObjectV1Request) ApiUsergroupexternalEditObjectV1Request {
	r.usergroupexternalEditObjectV1Request = &usergroupexternalEditObjectV1Request
	return r
}

func (r ApiUsergroupexternalEditObjectV1Request) Execute() (*UsergroupexternalEditObjectV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalEditObjectV1Execute(r)
}

/*
UsergroupexternalEditObjectV1 Edit an existing Usergroupexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupexternalID The unique ID of the Usergroupexternal
 @return ApiUsergroupexternalEditObjectV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalEditObjectV1(ctx context.Context, pkiUsergroupexternalID int32) ApiUsergroupexternalEditObjectV1Request {
	return ApiUsergroupexternalEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupexternalID: pkiUsergroupexternalID,
	}
}

// Execute executes the request
//  @return UsergroupexternalEditObjectV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalEditObjectV1Execute(r ApiUsergroupexternalEditObjectV1Request) (*UsergroupexternalEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal/{pkiUsergroupexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupexternalID, "pkiUsergroupexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be greater than 0")
	}
	if r.pkiUsergroupexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be less than 255")
	}
	if r.usergroupexternalEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupexternalEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupexternalEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalGetAutocompleteV2Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	sSelector string
	eFilterActive *string
	sQuery *string
	acceptLanguage *HeaderAcceptLanguage
}

// Specify which results we want to display.
func (r ApiUsergroupexternalGetAutocompleteV2Request) EFilterActive(eFilterActive string) ApiUsergroupexternalGetAutocompleteV2Request {
	r.eFilterActive = &eFilterActive
	return r
}

// Allow to filter the returned results
func (r ApiUsergroupexternalGetAutocompleteV2Request) SQuery(sQuery string) ApiUsergroupexternalGetAutocompleteV2Request {
	r.sQuery = &sQuery
	return r
}

func (r ApiUsergroupexternalGetAutocompleteV2Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiUsergroupexternalGetAutocompleteV2Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiUsergroupexternalGetAutocompleteV2Request) Execute() (*UsergroupexternalGetAutocompleteV2Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalGetAutocompleteV2Execute(r)
}

/*
UsergroupexternalGetAutocompleteV2 Retrieve Usergroupexternals and IDs

Get the list of Usergroupexternal to be used in a dropdown or autocomplete control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sSelector The type of Usergroupexternals to return
 @return ApiUsergroupexternalGetAutocompleteV2Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetAutocompleteV2(ctx context.Context, sSelector string) ApiUsergroupexternalGetAutocompleteV2Request {
	return ApiUsergroupexternalGetAutocompleteV2Request{
		ApiService: a,
		ctx: ctx,
		sSelector: sSelector,
	}
}

// Execute executes the request
//  @return UsergroupexternalGetAutocompleteV2Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetAutocompleteV2Execute(r ApiUsergroupexternalGetAutocompleteV2Request) (*UsergroupexternalGetAutocompleteV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalGetAutocompleteV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalGetAutocompleteV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/usergroupexternal/getAutocomplete/{sSelector}"
	localVarPath = strings.Replace(localVarPath, "{"+"sSelector"+"}", url.PathEscape(parameterValueToString(r.sSelector, "sSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eFilterActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eFilterActive", r.eFilterActive, "form", "")
	} else {
		var defaultValue string = "Active"
		r.eFilterActive = &defaultValue
	}
	if r.sQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sQuery", r.sQuery, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiUsergroupexternalGetListV1Request) EOrderBy(eOrderBy string) ApiUsergroupexternalGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiUsergroupexternalGetListV1Request) IRowMax(iRowMax int32) ApiUsergroupexternalGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiUsergroupexternalGetListV1Request) IRowOffset(iRowOffset int32) ApiUsergroupexternalGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiUsergroupexternalGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiUsergroupexternalGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiUsergroupexternalGetListV1Request) SFilter(sFilter string) ApiUsergroupexternalGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiUsergroupexternalGetListV1Request) Execute() (*UsergroupexternalGetListV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalGetListV1Execute(r)
}

/*
UsergroupexternalGetListV1 Retrieve Usergroupexternal list



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupexternalGetListV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetListV1(ctx context.Context) ApiUsergroupexternalGetListV1Request {
	return ApiUsergroupexternalGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupexternalGetListV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetListV1Execute(r ApiUsergroupexternalGetListV1Request) (*UsergroupexternalGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	pkiUsergroupexternalID int32
}

func (r ApiUsergroupexternalGetObjectV2Request) Execute() (*UsergroupexternalGetObjectV2Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalGetObjectV2Execute(r)
}

/*
UsergroupexternalGetObjectV2 Retrieve an existing Usergroupexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupexternalID The unique ID of the Usergroupexternal
 @return ApiUsergroupexternalGetObjectV2Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetObjectV2(ctx context.Context, pkiUsergroupexternalID int32) ApiUsergroupexternalGetObjectV2Request {
	return ApiUsergroupexternalGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupexternalID: pkiUsergroupexternalID,
	}
}

// Execute executes the request
//  @return UsergroupexternalGetObjectV2Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetObjectV2Execute(r ApiUsergroupexternalGetObjectV2Request) (*UsergroupexternalGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/usergroupexternal/{pkiUsergroupexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupexternalID, "pkiUsergroupexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be greater than 0")
	}
	if r.pkiUsergroupexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	pkiUsergroupexternalID int32
}

func (r ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request) Execute() (*UsergroupexternalGetUsergroupexternalmembershipsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalGetUsergroupexternalmembershipsV1Execute(r)
}

/*
UsergroupexternalGetUsergroupexternalmembershipsV1 Retrieve an existing Usergroupexternal's Usergroupexternalmemberships

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupexternalID
 @return ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetUsergroupexternalmembershipsV1(ctx context.Context, pkiUsergroupexternalID int32) ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request {
	return ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupexternalID: pkiUsergroupexternalID,
	}
}

// Execute executes the request
//  @return UsergroupexternalGetUsergroupexternalmembershipsV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetUsergroupexternalmembershipsV1Execute(r ApiUsergroupexternalGetUsergroupexternalmembershipsV1Request) (*UsergroupexternalGetUsergroupexternalmembershipsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalGetUsergroupexternalmembershipsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalGetUsergroupexternalmembershipsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroupexternalmemberships"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupexternalID, "pkiUsergroupexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be greater than 0")
	}
	if r.pkiUsergroupexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupexternalGetUsergroupsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupexternalAPIService
	pkiUsergroupexternalID int32
}

func (r ApiUsergroupexternalGetUsergroupsV1Request) Execute() (*UsergroupexternalGetUsergroupsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupexternalGetUsergroupsV1Execute(r)
}

/*
UsergroupexternalGetUsergroupsV1 Get Usergroupexternal's Usergroups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupexternalID
 @return ApiUsergroupexternalGetUsergroupsV1Request
*/
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetUsergroupsV1(ctx context.Context, pkiUsergroupexternalID int32) ApiUsergroupexternalGetUsergroupsV1Request {
	return ApiUsergroupexternalGetUsergroupsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupexternalID: pkiUsergroupexternalID,
	}
}

// Execute executes the request
//  @return UsergroupexternalGetUsergroupsV1Response
func (a *ObjectUsergroupexternalAPIService) UsergroupexternalGetUsergroupsV1Execute(r ApiUsergroupexternalGetUsergroupsV1Request) (*UsergroupexternalGetUsergroupsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupexternalGetUsergroupsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupexternalAPIService.UsergroupexternalGetUsergroupsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroupexternal/{pkiUsergroupexternalID}/getUsergroups"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupexternalID, "pkiUsergroupexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be greater than 0")
	}
	if r.pkiUsergroupexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
