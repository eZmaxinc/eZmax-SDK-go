/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the DiscussionRequestPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscussionRequestPatch{}

// DiscussionRequestPatch A Discussion Object
type DiscussionRequestPatch struct {
	// The description of the Discussion
	SDiscussionDescription *string `json:"sDiscussionDescription,omitempty"`
	// Whether if it's an closed
	BDiscussionClosed *bool `json:"bDiscussionClosed,omitempty"`
}

// NewDiscussionRequestPatch instantiates a new DiscussionRequestPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscussionRequestPatch() *DiscussionRequestPatch {
	this := DiscussionRequestPatch{}
	return &this
}

// NewDiscussionRequestPatchWithDefaults instantiates a new DiscussionRequestPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscussionRequestPatchWithDefaults() *DiscussionRequestPatch {
	this := DiscussionRequestPatch{}
	return &this
}

// GetSDiscussionDescription returns the SDiscussionDescription field value if set, zero value otherwise.
func (o *DiscussionRequestPatch) GetSDiscussionDescription() string {
	if o == nil || IsNil(o.SDiscussionDescription) {
		var ret string
		return ret
	}
	return *o.SDiscussionDescription
}

// GetSDiscussionDescriptionOk returns a tuple with the SDiscussionDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionRequestPatch) GetSDiscussionDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SDiscussionDescription) {
		return nil, false
	}
	return o.SDiscussionDescription, true
}

// HasSDiscussionDescription returns a boolean if a field has been set.
func (o *DiscussionRequestPatch) HasSDiscussionDescription() bool {
	if o != nil && !IsNil(o.SDiscussionDescription) {
		return true
	}

	return false
}

// SetSDiscussionDescription gets a reference to the given string and assigns it to the SDiscussionDescription field.
func (o *DiscussionRequestPatch) SetSDiscussionDescription(v string) {
	o.SDiscussionDescription = &v
}

// GetBDiscussionClosed returns the BDiscussionClosed field value if set, zero value otherwise.
func (o *DiscussionRequestPatch) GetBDiscussionClosed() bool {
	if o == nil || IsNil(o.BDiscussionClosed) {
		var ret bool
		return ret
	}
	return *o.BDiscussionClosed
}

// GetBDiscussionClosedOk returns a tuple with the BDiscussionClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionRequestPatch) GetBDiscussionClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.BDiscussionClosed) {
		return nil, false
	}
	return o.BDiscussionClosed, true
}

// HasBDiscussionClosed returns a boolean if a field has been set.
func (o *DiscussionRequestPatch) HasBDiscussionClosed() bool {
	if o != nil && !IsNil(o.BDiscussionClosed) {
		return true
	}

	return false
}

// SetBDiscussionClosed gets a reference to the given bool and assigns it to the BDiscussionClosed field.
func (o *DiscussionRequestPatch) SetBDiscussionClosed(v bool) {
	o.BDiscussionClosed = &v
}

func (o DiscussionRequestPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscussionRequestPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SDiscussionDescription) {
		toSerialize["sDiscussionDescription"] = o.SDiscussionDescription
	}
	if !IsNil(o.BDiscussionClosed) {
		toSerialize["bDiscussionClosed"] = o.BDiscussionClosed
	}
	return toSerialize, nil
}

type NullableDiscussionRequestPatch struct {
	value *DiscussionRequestPatch
	isSet bool
}

func (v NullableDiscussionRequestPatch) Get() *DiscussionRequestPatch {
	return v.value
}

func (v *NullableDiscussionRequestPatch) Set(val *DiscussionRequestPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscussionRequestPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscussionRequestPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscussionRequestPatch(val *DiscussionRequestPatch) *NullableDiscussionRequestPatch {
	return &NullableDiscussionRequestPatch{value: val, isSet: true}
}

func (v NullableDiscussionRequestPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscussionRequestPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


