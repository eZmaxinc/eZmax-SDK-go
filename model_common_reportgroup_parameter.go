/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonReportgroupParameter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonReportgroupParameter{}

// CommonReportgroupParameter A parameter of Reportgroup 
type CommonReportgroupParameter struct {
	// The Reportparameter name
	SReportgroupParameterName string `json:"sReportgroupParameterName"`
	// The Reportparameter value
	SReportgroupParameterValue *string `json:"sReportgroupParameterValue,omitempty"`
	ASReportgroupParameterValue []string `json:"a_sReportgroupParameterValue,omitempty"`
}

type _CommonReportgroupParameter CommonReportgroupParameter

// NewCommonReportgroupParameter instantiates a new CommonReportgroupParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonReportgroupParameter(sReportgroupParameterName string) *CommonReportgroupParameter {
	this := CommonReportgroupParameter{}
	this.SReportgroupParameterName = sReportgroupParameterName
	return &this
}

// NewCommonReportgroupParameterWithDefaults instantiates a new CommonReportgroupParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonReportgroupParameterWithDefaults() *CommonReportgroupParameter {
	this := CommonReportgroupParameter{}
	return &this
}

// GetSReportgroupParameterName returns the SReportgroupParameterName field value
func (o *CommonReportgroupParameter) GetSReportgroupParameterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SReportgroupParameterName
}

// GetSReportgroupParameterNameOk returns a tuple with the SReportgroupParameterName field value
// and a boolean to check if the value has been set.
func (o *CommonReportgroupParameter) GetSReportgroupParameterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SReportgroupParameterName, true
}

// SetSReportgroupParameterName sets field value
func (o *CommonReportgroupParameter) SetSReportgroupParameterName(v string) {
	o.SReportgroupParameterName = v
}

// GetSReportgroupParameterValue returns the SReportgroupParameterValue field value if set, zero value otherwise.
func (o *CommonReportgroupParameter) GetSReportgroupParameterValue() string {
	if o == nil || IsNil(o.SReportgroupParameterValue) {
		var ret string
		return ret
	}
	return *o.SReportgroupParameterValue
}

// GetSReportgroupParameterValueOk returns a tuple with the SReportgroupParameterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonReportgroupParameter) GetSReportgroupParameterValueOk() (*string, bool) {
	if o == nil || IsNil(o.SReportgroupParameterValue) {
		return nil, false
	}
	return o.SReportgroupParameterValue, true
}

// HasSReportgroupParameterValue returns a boolean if a field has been set.
func (o *CommonReportgroupParameter) HasSReportgroupParameterValue() bool {
	if o != nil && !IsNil(o.SReportgroupParameterValue) {
		return true
	}

	return false
}

// SetSReportgroupParameterValue gets a reference to the given string and assigns it to the SReportgroupParameterValue field.
func (o *CommonReportgroupParameter) SetSReportgroupParameterValue(v string) {
	o.SReportgroupParameterValue = &v
}

// GetASReportgroupParameterValue returns the ASReportgroupParameterValue field value if set, zero value otherwise.
func (o *CommonReportgroupParameter) GetASReportgroupParameterValue() []string {
	if o == nil || IsNil(o.ASReportgroupParameterValue) {
		var ret []string
		return ret
	}
	return o.ASReportgroupParameterValue
}

// GetASReportgroupParameterValueOk returns a tuple with the ASReportgroupParameterValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonReportgroupParameter) GetASReportgroupParameterValueOk() ([]string, bool) {
	if o == nil || IsNil(o.ASReportgroupParameterValue) {
		return nil, false
	}
	return o.ASReportgroupParameterValue, true
}

// HasASReportgroupParameterValue returns a boolean if a field has been set.
func (o *CommonReportgroupParameter) HasASReportgroupParameterValue() bool {
	if o != nil && !IsNil(o.ASReportgroupParameterValue) {
		return true
	}

	return false
}

// SetASReportgroupParameterValue gets a reference to the given []string and assigns it to the ASReportgroupParameterValue field.
func (o *CommonReportgroupParameter) SetASReportgroupParameterValue(v []string) {
	o.ASReportgroupParameterValue = v
}

func (o CommonReportgroupParameter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonReportgroupParameter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sReportgroupParameterName"] = o.SReportgroupParameterName
	if !IsNil(o.SReportgroupParameterValue) {
		toSerialize["sReportgroupParameterValue"] = o.SReportgroupParameterValue
	}
	if !IsNil(o.ASReportgroupParameterValue) {
		toSerialize["a_sReportgroupParameterValue"] = o.ASReportgroupParameterValue
	}
	return toSerialize, nil
}

func (o *CommonReportgroupParameter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sReportgroupParameterName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonReportgroupParameter := _CommonReportgroupParameter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonReportgroupParameter)

	if err != nil {
		return err
	}

	*o = CommonReportgroupParameter(varCommonReportgroupParameter)

	return err
}

type NullableCommonReportgroupParameter struct {
	value *CommonReportgroupParameter
	isSet bool
}

func (v NullableCommonReportgroupParameter) Get() *CommonReportgroupParameter {
	return v.value
}

func (v *NullableCommonReportgroupParameter) Set(val *CommonReportgroupParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonReportgroupParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonReportgroupParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonReportgroupParameter(val *CommonReportgroupParameter) *NullableCommonReportgroupParameter {
	return &NullableCommonReportgroupParameter{value: val, isSet: true}
}

func (v NullableCommonReportgroupParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonReportgroupParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


