/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// EnumTextvalidation The text validation
type EnumTextvalidation string

// List of Enum-Textvalidation
const (
	NONE EnumTextvalidation = "None"
	DATE__YYYY_MM_DD EnumTextvalidation = "Date (YYYY-MM-DD)"
	DATE__MM_DD_YYYY EnumTextvalidation = "Date (MM/DD/YYYY)"
	DATE__MM_DD_YY EnumTextvalidation = "Date (MM/DD/YY)"
	DATE__DD_MM_YYYY EnumTextvalidation = "Date (DD/MM/YYYY)"
	DATE__DD_MM_YY EnumTextvalidation = "Date (DD/MM/YY)"
	EMAIL EnumTextvalidation = "Email"
	LETTERS EnumTextvalidation = "Letters"
	NUMBERS EnumTextvalidation = "Numbers"
	ZIP EnumTextvalidation = "Zip"
	ZIP4 EnumTextvalidation = "Zip+4"
	POSTAL_CODE EnumTextvalidation = "PostalCode"
	CUSTOM EnumTextvalidation = "Custom"
)

// All allowed values of EnumTextvalidation enum
var AllowedEnumTextvalidationEnumValues = []EnumTextvalidation{
	"None",
	"Date (YYYY-MM-DD)",
	"Date (MM/DD/YYYY)",
	"Date (MM/DD/YY)",
	"Date (DD/MM/YYYY)",
	"Date (DD/MM/YY)",
	"Email",
	"Letters",
	"Numbers",
	"Zip",
	"Zip+4",
	"PostalCode",
	"Custom",
}

func (v *EnumTextvalidation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTextvalidation(value)
	for _, existing := range AllowedEnumTextvalidationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumTextvalidation", value)
}

// NewEnumTextvalidationFromValue returns a pointer to a valid EnumTextvalidation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumTextvalidationFromValue(v string) (*EnumTextvalidation, error) {
	ev := EnumTextvalidation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumTextvalidation: valid values are %v", v, AllowedEnumTextvalidationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumTextvalidation) IsValid() bool {
	for _, existing := range AllowedEnumTextvalidationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum-Textvalidation value
func (v EnumTextvalidation) Ptr() *EnumTextvalidation {
	return &v
}

type NullableEnumTextvalidation struct {
	value *EnumTextvalidation
	isSet bool
}

func (v NullableEnumTextvalidation) Get() *EnumTextvalidation {
	return v.value
}

func (v *NullableEnumTextvalidation) Set(val *EnumTextvalidation) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTextvalidation) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTextvalidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTextvalidation(val *EnumTextvalidation) *NullableEnumTextvalidation {
	return &NullableEnumTextvalidation{value: val, isSet: true}
}

func (v NullableEnumTextvalidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTextvalidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

