/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectAuthenticationexternalAPIService ObjectAuthenticationexternalAPI service
type ObjectAuthenticationexternalAPIService service

type ApiAuthenticationexternalCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	authenticationexternalCreateObjectV1Request *AuthenticationexternalCreateObjectV1Request
}

func (r ApiAuthenticationexternalCreateObjectV1Request) AuthenticationexternalCreateObjectV1Request(authenticationexternalCreateObjectV1Request AuthenticationexternalCreateObjectV1Request) ApiAuthenticationexternalCreateObjectV1Request {
	r.authenticationexternalCreateObjectV1Request = &authenticationexternalCreateObjectV1Request
	return r
}

func (r ApiAuthenticationexternalCreateObjectV1Request) Execute() (*AuthenticationexternalCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.AuthenticationexternalCreateObjectV1Execute(r)
}

/*
AuthenticationexternalCreateObjectV1 Create a new Authenticationexternal

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthenticationexternalCreateObjectV1Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalCreateObjectV1(ctx context.Context) ApiAuthenticationexternalCreateObjectV1Request {
	return ApiAuthenticationexternalCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthenticationexternalCreateObjectV1Response
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalCreateObjectV1Execute(r ApiAuthenticationexternalCreateObjectV1Request) (*AuthenticationexternalCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationexternalCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/authenticationexternal"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authenticationexternalCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("authenticationexternalCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authenticationexternalCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalDeleteObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	pkiAuthenticationexternalID int32
}

func (r ApiAuthenticationexternalDeleteObjectV1Request) Execute() (*CommonResponse, *http.Response, error) {
	return r.ApiService.AuthenticationexternalDeleteObjectV1Execute(r)
}

/*
AuthenticationexternalDeleteObjectV1 Delete an existing Authenticationexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
 @return ApiAuthenticationexternalDeleteObjectV1Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalDeleteObjectV1(ctx context.Context, pkiAuthenticationexternalID int32) ApiAuthenticationexternalDeleteObjectV1Request {
	return ApiAuthenticationexternalDeleteObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiAuthenticationexternalID: pkiAuthenticationexternalID,
	}
}

// Execute executes the request
//  @return CommonResponse
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalDeleteObjectV1Execute(r ApiAuthenticationexternalDeleteObjectV1Request) (*CommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalDeleteObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/authenticationexternal/{pkiAuthenticationexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiAuthenticationexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiAuthenticationexternalID, "pkiAuthenticationexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiAuthenticationexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be greater than 0")
	}
	if r.pkiAuthenticationexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	pkiAuthenticationexternalID int32
	authenticationexternalEditObjectV1Request *AuthenticationexternalEditObjectV1Request
}

func (r ApiAuthenticationexternalEditObjectV1Request) AuthenticationexternalEditObjectV1Request(authenticationexternalEditObjectV1Request AuthenticationexternalEditObjectV1Request) ApiAuthenticationexternalEditObjectV1Request {
	r.authenticationexternalEditObjectV1Request = &authenticationexternalEditObjectV1Request
	return r
}

func (r ApiAuthenticationexternalEditObjectV1Request) Execute() (*CommonResponse, *http.Response, error) {
	return r.ApiService.AuthenticationexternalEditObjectV1Execute(r)
}

/*
AuthenticationexternalEditObjectV1 Edit an existing Authenticationexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
 @return ApiAuthenticationexternalEditObjectV1Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalEditObjectV1(ctx context.Context, pkiAuthenticationexternalID int32) ApiAuthenticationexternalEditObjectV1Request {
	return ApiAuthenticationexternalEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiAuthenticationexternalID: pkiAuthenticationexternalID,
	}
}

// Execute executes the request
//  @return CommonResponse
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalEditObjectV1Execute(r ApiAuthenticationexternalEditObjectV1Request) (*CommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/authenticationexternal/{pkiAuthenticationexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiAuthenticationexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiAuthenticationexternalID, "pkiAuthenticationexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiAuthenticationexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be greater than 0")
	}
	if r.pkiAuthenticationexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be less than 255")
	}
	if r.authenticationexternalEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("authenticationexternalEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authenticationexternalEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalGetAutocompleteV2Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	sSelector string
	eFilterActive *string
	sQuery *string
	acceptLanguage *HeaderAcceptLanguage
}

// Specify which results we want to display.
func (r ApiAuthenticationexternalGetAutocompleteV2Request) EFilterActive(eFilterActive string) ApiAuthenticationexternalGetAutocompleteV2Request {
	r.eFilterActive = &eFilterActive
	return r
}

// Allow to filter the returned results
func (r ApiAuthenticationexternalGetAutocompleteV2Request) SQuery(sQuery string) ApiAuthenticationexternalGetAutocompleteV2Request {
	r.sQuery = &sQuery
	return r
}

func (r ApiAuthenticationexternalGetAutocompleteV2Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiAuthenticationexternalGetAutocompleteV2Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiAuthenticationexternalGetAutocompleteV2Request) Execute() (*AuthenticationexternalGetAutocompleteV2Response, *http.Response, error) {
	return r.ApiService.AuthenticationexternalGetAutocompleteV2Execute(r)
}

/*
AuthenticationexternalGetAutocompleteV2 Retrieve Authenticationexternals and IDs

Get the list of Authenticationexternal to be used in a dropdown or autocomplete control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sSelector The type of Authenticationexternals to return
 @return ApiAuthenticationexternalGetAutocompleteV2Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetAutocompleteV2(ctx context.Context, sSelector string) ApiAuthenticationexternalGetAutocompleteV2Request {
	return ApiAuthenticationexternalGetAutocompleteV2Request{
		ApiService: a,
		ctx: ctx,
		sSelector: sSelector,
	}
}

// Execute executes the request
//  @return AuthenticationexternalGetAutocompleteV2Response
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetAutocompleteV2Execute(r ApiAuthenticationexternalGetAutocompleteV2Request) (*AuthenticationexternalGetAutocompleteV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationexternalGetAutocompleteV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalGetAutocompleteV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/authenticationexternal/getAutocomplete/{sSelector}"
	localVarPath = strings.Replace(localVarPath, "{"+"sSelector"+"}", url.PathEscape(parameterValueToString(r.sSelector, "sSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eFilterActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eFilterActive", r.eFilterActive, "form", "")
	} else {
		var defaultValue string = "Active"
		r.eFilterActive = &defaultValue
	}
	if r.sQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sQuery", r.sQuery, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiAuthenticationexternalGetListV1Request) EOrderBy(eOrderBy string) ApiAuthenticationexternalGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiAuthenticationexternalGetListV1Request) IRowMax(iRowMax int32) ApiAuthenticationexternalGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiAuthenticationexternalGetListV1Request) IRowOffset(iRowOffset int32) ApiAuthenticationexternalGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiAuthenticationexternalGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiAuthenticationexternalGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiAuthenticationexternalGetListV1Request) SFilter(sFilter string) ApiAuthenticationexternalGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiAuthenticationexternalGetListV1Request) Execute() (*AuthenticationexternalGetListV1Response, *http.Response, error) {
	return r.ApiService.AuthenticationexternalGetListV1Execute(r)
}

/*
AuthenticationexternalGetListV1 Retrieve Authenticationexternal list

Enum values that can be filtered in query parameter *sFilter*:

| Variable | Valid values |
|---|---|
| eAuthenticationexternalType | Salesforce<br>SalesforceSandbox |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthenticationexternalGetListV1Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetListV1(ctx context.Context) ApiAuthenticationexternalGetListV1Request {
	return ApiAuthenticationexternalGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthenticationexternalGetListV1Response
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetListV1Execute(r ApiAuthenticationexternalGetListV1Request) (*AuthenticationexternalGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationexternalGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/authenticationexternal/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	pkiAuthenticationexternalID int32
}

func (r ApiAuthenticationexternalGetObjectV2Request) Execute() (*AuthenticationexternalGetObjectV2Response, *http.Response, error) {
	return r.ApiService.AuthenticationexternalGetObjectV2Execute(r)
}

/*
AuthenticationexternalGetObjectV2 Retrieve an existing Authenticationexternal



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiAuthenticationexternalID The unique ID of the Authenticationexternal
 @return ApiAuthenticationexternalGetObjectV2Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetObjectV2(ctx context.Context, pkiAuthenticationexternalID int32) ApiAuthenticationexternalGetObjectV2Request {
	return ApiAuthenticationexternalGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiAuthenticationexternalID: pkiAuthenticationexternalID,
	}
}

// Execute executes the request
//  @return AuthenticationexternalGetObjectV2Response
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalGetObjectV2Execute(r ApiAuthenticationexternalGetObjectV2Request) (*AuthenticationexternalGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthenticationexternalGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/authenticationexternal/{pkiAuthenticationexternalID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiAuthenticationexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiAuthenticationexternalID, "pkiAuthenticationexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiAuthenticationexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be greater than 0")
	}
	if r.pkiAuthenticationexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationexternalResetAuthorizationV1Request struct {
	ctx context.Context
	ApiService *ObjectAuthenticationexternalAPIService
	pkiAuthenticationexternalID int32
	body *map[string]interface{}
}

func (r ApiAuthenticationexternalResetAuthorizationV1Request) Body(body map[string]interface{}) ApiAuthenticationexternalResetAuthorizationV1Request {
	r.body = &body
	return r
}

func (r ApiAuthenticationexternalResetAuthorizationV1Request) Execute() (*CommonResponse, *http.Response, error) {
	return r.ApiService.AuthenticationexternalResetAuthorizationV1Execute(r)
}

/*
AuthenticationexternalResetAuthorizationV1 Reset the Authenticationexternal authorization



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiAuthenticationexternalID
 @return ApiAuthenticationexternalResetAuthorizationV1Request
*/
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalResetAuthorizationV1(ctx context.Context, pkiAuthenticationexternalID int32) ApiAuthenticationexternalResetAuthorizationV1Request {
	return ApiAuthenticationexternalResetAuthorizationV1Request{
		ApiService: a,
		ctx: ctx,
		pkiAuthenticationexternalID: pkiAuthenticationexternalID,
	}
}

// Execute executes the request
//  @return CommonResponse
func (a *ObjectAuthenticationexternalAPIService) AuthenticationexternalResetAuthorizationV1Execute(r ApiAuthenticationexternalResetAuthorizationV1Request) (*CommonResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommonResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectAuthenticationexternalAPIService.AuthenticationexternalResetAuthorizationV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/authenticationexternal/{pkiAuthenticationexternalID}/resetAuthorization"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiAuthenticationexternalID"+"}", url.PathEscape(parameterValueToString(r.pkiAuthenticationexternalID, "pkiAuthenticationexternalID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiAuthenticationexternalID < 0 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be greater than 0")
	}
	if r.pkiAuthenticationexternalID > 255 {
		return localVarReturnValue, nil, reportError("pkiAuthenticationexternalID must be less than 255")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
