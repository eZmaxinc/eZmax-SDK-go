/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfolderDocumentdependency Indicates if document dependencies apply to all users or just to Ezsignsigner
type FieldEEzsignfolderDocumentdependency string

// List of Field-eEzsignfolderDocumentdependency
const (
	ALL FieldEEzsignfolderDocumentdependency = "All"
	EZSIGNSIGNER_ONLY FieldEEzsignfolderDocumentdependency = "EzsignsignerOnly"
)

// All allowed values of FieldEEzsignfolderDocumentdependency enum
var AllowedFieldEEzsignfolderDocumentdependencyEnumValues = []FieldEEzsignfolderDocumentdependency{
	"All",
	"EzsignsignerOnly",
}

func (v *FieldEEzsignfolderDocumentdependency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfolderDocumentdependency(value)
	for _, existing := range AllowedFieldEEzsignfolderDocumentdependencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfolderDocumentdependency", value)
}

// NewFieldEEzsignfolderDocumentdependencyFromValue returns a pointer to a valid FieldEEzsignfolderDocumentdependency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfolderDocumentdependencyFromValue(v string) (*FieldEEzsignfolderDocumentdependency, error) {
	ev := FieldEEzsignfolderDocumentdependency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfolderDocumentdependency: valid values are %v", v, AllowedFieldEEzsignfolderDocumentdependencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfolderDocumentdependency) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfolderDocumentdependencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfolderDocumentdependency value
func (v FieldEEzsignfolderDocumentdependency) Ptr() *FieldEEzsignfolderDocumentdependency {
	return &v
}

type NullableFieldEEzsignfolderDocumentdependency struct {
	value *FieldEEzsignfolderDocumentdependency
	isSet bool
}

func (v NullableFieldEEzsignfolderDocumentdependency) Get() *FieldEEzsignfolderDocumentdependency {
	return v.value
}

func (v *NullableFieldEEzsignfolderDocumentdependency) Set(val *FieldEEzsignfolderDocumentdependency) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfolderDocumentdependency) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfolderDocumentdependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfolderDocumentdependency(val *FieldEEzsignfolderDocumentdependency) *NullableFieldEEzsignfolderDocumentdependency {
	return &NullableFieldEEzsignfolderDocumentdependency{value: val, isSet: true}
}

func (v NullableFieldEEzsignfolderDocumentdependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfolderDocumentdependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

