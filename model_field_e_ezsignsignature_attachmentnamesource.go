/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignsignatureAttachmentnamesource The source of the name of the attachment added to the Ezsignsignature
type FieldEEzsignsignatureAttachmentnamesource string

// List of Field-eEzsignsignatureAttachmentnamesource
const (
	DESCRIPTION FieldEEzsignsignatureAttachmentnamesource = "Description"
	CUSTOMER FieldEEzsignsignatureAttachmentnamesource = "Customer"
	DESCRIPTION_CUSTOMER FieldEEzsignsignatureAttachmentnamesource = "DescriptionCustomer"
)

// All allowed values of FieldEEzsignsignatureAttachmentnamesource enum
var AllowedFieldEEzsignsignatureAttachmentnamesourceEnumValues = []FieldEEzsignsignatureAttachmentnamesource{
	"Description",
	"Customer",
	"DescriptionCustomer",
}

func (v *FieldEEzsignsignatureAttachmentnamesource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignsignatureAttachmentnamesource(value)
	for _, existing := range AllowedFieldEEzsignsignatureAttachmentnamesourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignsignatureAttachmentnamesource", value)
}

// NewFieldEEzsignsignatureAttachmentnamesourceFromValue returns a pointer to a valid FieldEEzsignsignatureAttachmentnamesource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignsignatureAttachmentnamesourceFromValue(v string) (*FieldEEzsignsignatureAttachmentnamesource, error) {
	ev := FieldEEzsignsignatureAttachmentnamesource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignsignatureAttachmentnamesource: valid values are %v", v, AllowedFieldEEzsignsignatureAttachmentnamesourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignsignatureAttachmentnamesource) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignsignatureAttachmentnamesourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignsignatureAttachmentnamesource value
func (v FieldEEzsignsignatureAttachmentnamesource) Ptr() *FieldEEzsignsignatureAttachmentnamesource {
	return &v
}

type NullableFieldEEzsignsignatureAttachmentnamesource struct {
	value *FieldEEzsignsignatureAttachmentnamesource
	isSet bool
}

func (v NullableFieldEEzsignsignatureAttachmentnamesource) Get() *FieldEEzsignsignatureAttachmentnamesource {
	return v.value
}

func (v *NullableFieldEEzsignsignatureAttachmentnamesource) Set(val *FieldEEzsignsignatureAttachmentnamesource) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignsignatureAttachmentnamesource) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignsignatureAttachmentnamesource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignsignatureAttachmentnamesource(val *FieldEEzsignsignatureAttachmentnamesource) *NullableFieldEEzsignsignatureAttachmentnamesource {
	return &NullableFieldEEzsignsignatureAttachmentnamesource{value: val, isSet: true}
}

func (v NullableFieldEEzsignsignatureAttachmentnamesource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignsignatureAttachmentnamesource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

