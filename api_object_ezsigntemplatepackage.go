/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzsigntemplatepackageAPIService ObjectEzsigntemplatepackageAPI service
type ObjectEzsigntemplatepackageAPIService service

type ApiEzsigntemplatepackageCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	ezsigntemplatepackageCreateObjectV1Request *EzsigntemplatepackageCreateObjectV1Request
}

func (r ApiEzsigntemplatepackageCreateObjectV1Request) EzsigntemplatepackageCreateObjectV1Request(ezsigntemplatepackageCreateObjectV1Request EzsigntemplatepackageCreateObjectV1Request) ApiEzsigntemplatepackageCreateObjectV1Request {
	r.ezsigntemplatepackageCreateObjectV1Request = &ezsigntemplatepackageCreateObjectV1Request
	return r
}

func (r ApiEzsigntemplatepackageCreateObjectV1Request) Execute() (*EzsigntemplatepackageCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageCreateObjectV1Execute(r)
}

/*
EzsigntemplatepackageCreateObjectV1 Create a new Ezsigntemplatepackage

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepackageCreateObjectV1Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageCreateObjectV1(ctx context.Context) ApiEzsigntemplatepackageCreateObjectV1Request {
	return ApiEzsigntemplatepackageCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageCreateObjectV1Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageCreateObjectV1Execute(r ApiEzsigntemplatepackageCreateObjectV1Request) (*EzsigntemplatepackageCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepackage"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsigntemplatepackageCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepackageCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepackageCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageDeleteObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	pkiEzsigntemplatepackageID int32
}

func (r ApiEzsigntemplatepackageDeleteObjectV1Request) Execute() (*EzsigntemplatepackageDeleteObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageDeleteObjectV1Execute(r)
}

/*
EzsigntemplatepackageDeleteObjectV1 Delete an existing Ezsigntemplatepackage



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepackageID
 @return ApiEzsigntemplatepackageDeleteObjectV1Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageDeleteObjectV1(ctx context.Context, pkiEzsigntemplatepackageID int32) ApiEzsigntemplatepackageDeleteObjectV1Request {
	return ApiEzsigntemplatepackageDeleteObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageDeleteObjectV1Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageDeleteObjectV1Execute(r ApiEzsigntemplatepackageDeleteObjectV1Request) (*EzsigntemplatepackageDeleteObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageDeleteObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageDeleteObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepackageID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepackageID, "pkiEzsigntemplatepackageID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepackageID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepackageID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	pkiEzsigntemplatepackageID int32
	ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request *EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request
}

func (r ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request(ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request {
	r.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request = &ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request
	return r
}

func (r ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) Execute() (*EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Execute(r)
}

/*
EzsigntemplatepackageEditEzsigntemplatepackagesignersV1 Edit multiple Ezsigntemplatepackagesigners

Using this endpoint, you can edit multiple Ezsigntemplatepackagesigners at the same time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepackageID
 @return ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageEditEzsigntemplatepackagesignersV1(ctx context.Context, pkiEzsigntemplatepackageID int32) ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request {
	return ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Execute(r ApiEzsigntemplatepackageEditEzsigntemplatepackagesignersV1Request) (*EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageEditEzsigntemplatepackagesignersV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageEditEzsigntemplatepackagesignersV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}/editEzsigntemplatepackagesigners"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepackageID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepackageID, "pkiEzsigntemplatepackageID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepackageID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepackageID must be greater than 0")
	}
	if r.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepackageEditEzsigntemplatepackagesignersV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	pkiEzsigntemplatepackageID int32
	ezsigntemplatepackageEditObjectV1Request *EzsigntemplatepackageEditObjectV1Request
}

func (r ApiEzsigntemplatepackageEditObjectV1Request) EzsigntemplatepackageEditObjectV1Request(ezsigntemplatepackageEditObjectV1Request EzsigntemplatepackageEditObjectV1Request) ApiEzsigntemplatepackageEditObjectV1Request {
	r.ezsigntemplatepackageEditObjectV1Request = &ezsigntemplatepackageEditObjectV1Request
	return r
}

func (r ApiEzsigntemplatepackageEditObjectV1Request) Execute() (*EzsigntemplatepackageEditObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageEditObjectV1Execute(r)
}

/*
EzsigntemplatepackageEditObjectV1 Edit an existing Ezsigntemplatepackage



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepackageID
 @return ApiEzsigntemplatepackageEditObjectV1Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageEditObjectV1(ctx context.Context, pkiEzsigntemplatepackageID int32) ApiEzsigntemplatepackageEditObjectV1Request {
	return ApiEzsigntemplatepackageEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageEditObjectV1Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageEditObjectV1Execute(r ApiEzsigntemplatepackageEditObjectV1Request) (*EzsigntemplatepackageEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepackageID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepackageID, "pkiEzsigntemplatepackageID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepackageID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepackageID must be greater than 0")
	}
	if r.ezsigntemplatepackageEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepackageEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepackageEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageGetAutocompleteV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	sSelector string
	eFilterActive *string
	sQuery *string
	acceptLanguage *HeaderAcceptLanguage
	fkiEzsignfoldertypeID *int32
}

// Specify which results we want to display.
func (r ApiEzsigntemplatepackageGetAutocompleteV2Request) EFilterActive(eFilterActive string) ApiEzsigntemplatepackageGetAutocompleteV2Request {
	r.eFilterActive = &eFilterActive
	return r
}

// Allow to filter the returned results
func (r ApiEzsigntemplatepackageGetAutocompleteV2Request) SQuery(sQuery string) ApiEzsigntemplatepackageGetAutocompleteV2Request {
	r.sQuery = &sQuery
	return r
}

func (r ApiEzsigntemplatepackageGetAutocompleteV2Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiEzsigntemplatepackageGetAutocompleteV2Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

// The fkiEzsignfoldertypeID to use with the selector Ezsigntemplatepublic
func (r ApiEzsigntemplatepackageGetAutocompleteV2Request) FkiEzsignfoldertypeID(fkiEzsignfoldertypeID int32) ApiEzsigntemplatepackageGetAutocompleteV2Request {
	r.fkiEzsignfoldertypeID = &fkiEzsignfoldertypeID
	return r
}

func (r ApiEzsigntemplatepackageGetAutocompleteV2Request) Execute() (*EzsigntemplatepackageGetAutocompleteV2Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageGetAutocompleteV2Execute(r)
}

/*
EzsigntemplatepackageGetAutocompleteV2 Retrieve Ezsigntemplatepackages and IDs

Get the list of Ezsigntemplatepackage to be used in a dropdown or autocomplete control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sSelector The type of Ezsigntemplatepackages to return
 @return ApiEzsigntemplatepackageGetAutocompleteV2Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetAutocompleteV2(ctx context.Context, sSelector string) ApiEzsigntemplatepackageGetAutocompleteV2Request {
	return ApiEzsigntemplatepackageGetAutocompleteV2Request{
		ApiService: a,
		ctx: ctx,
		sSelector: sSelector,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageGetAutocompleteV2Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetAutocompleteV2Execute(r ApiEzsigntemplatepackageGetAutocompleteV2Request) (*EzsigntemplatepackageGetAutocompleteV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageGetAutocompleteV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageGetAutocompleteV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsigntemplatepackage/getAutocomplete/{sSelector}"
	localVarPath = strings.Replace(localVarPath, "{"+"sSelector"+"}", url.PathEscape(parameterValueToString(r.sSelector, "sSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eFilterActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eFilterActive", r.eFilterActive, "form", "")
	} else {
		var defaultValue string = "Active"
		r.eFilterActive = &defaultValue
	}
	if r.sQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sQuery", r.sQuery, "form", "")
	}
	if r.fkiEzsignfoldertypeID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fkiEzsignfoldertypeID", r.fkiEzsignfoldertypeID, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiEzsigntemplatepackageGetListV1Request) EOrderBy(eOrderBy string) ApiEzsigntemplatepackageGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiEzsigntemplatepackageGetListV1Request) IRowMax(iRowMax int32) ApiEzsigntemplatepackageGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiEzsigntemplatepackageGetListV1Request) IRowOffset(iRowOffset int32) ApiEzsigntemplatepackageGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiEzsigntemplatepackageGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiEzsigntemplatepackageGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiEzsigntemplatepackageGetListV1Request) SFilter(sFilter string) ApiEzsigntemplatepackageGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiEzsigntemplatepackageGetListV1Request) Execute() (*EzsigntemplatepackageGetListV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageGetListV1Execute(r)
}

/*
EzsigntemplatepackageGetListV1 Retrieve Ezsigntemplatepackage list

Enum values that can be filtered in query parameter *sFilter*:

| Variable | Valid values |
|---|---|
| eEzsigntemplatepackageType | Company<br>Team<br>User<br>Usergroup |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepackageGetListV1Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetListV1(ctx context.Context) ApiEzsigntemplatepackageGetListV1Request {
	return ApiEzsigntemplatepackageGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageGetListV1Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetListV1Execute(r ApiEzsigntemplatepackageGetListV1Request) (*EzsigntemplatepackageGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepackage/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepackageGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepackageAPIService
	pkiEzsigntemplatepackageID int32
}

func (r ApiEzsigntemplatepackageGetObjectV2Request) Execute() (*EzsigntemplatepackageGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepackageGetObjectV2Execute(r)
}

/*
EzsigntemplatepackageGetObjectV2 Retrieve an existing Ezsigntemplatepackage



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepackageID
 @return ApiEzsigntemplatepackageGetObjectV2Request
*/
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetObjectV2(ctx context.Context, pkiEzsigntemplatepackageID int32) ApiEzsigntemplatepackageGetObjectV2Request {
	return ApiEzsigntemplatepackageGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepackageID: pkiEzsigntemplatepackageID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepackageGetObjectV2Response
func (a *ObjectEzsigntemplatepackageAPIService) EzsigntemplatepackageGetObjectV2Execute(r ApiEzsigntemplatepackageGetObjectV2Request) (*EzsigntemplatepackageGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepackageGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepackageAPIService.EzsigntemplatepackageGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsigntemplatepackage/{pkiEzsigntemplatepackageID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepackageID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepackageID, "pkiEzsigntemplatepackageID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepackageID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepackageID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
