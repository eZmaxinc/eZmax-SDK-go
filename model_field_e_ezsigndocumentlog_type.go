/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigndocumentlogType The Ezsigndocumentlog Type.
type FieldEEzsigndocumentlogType string

// List of Field-eEzsigndocumentlogType
const (
	CLONE FieldEEzsigndocumentlogType = "Clone"
	LOGIN FieldEEzsigndocumentlogType = "Login"
	SENDCODE FieldEEzsigndocumentlogType = "Sendcode"
	BADCODE FieldEEzsigndocumentlogType = "Badcode"
	GOODCODE FieldEEzsigndocumentlogType = "Goodcode"
	BADRESPONSE FieldEEzsigndocumentlogType = "Badresponse"
	GOODRESPONSE FieldEEzsigndocumentlogType = "Goodresponse"
	AUTHENTICATION FieldEEzsigndocumentlogType = "Authentication"
	CREATEPAGE FieldEEzsigndocumentlogType = "Createpage"
	DOWNLOAD FieldEEzsigndocumentlogType = "Download"
	SEND FieldEEzsigndocumentlogType = "Send"
	SIGN FieldEEzsigndocumentlogType = "Sign"
	UPLOAD FieldEEzsigndocumentlogType = "Upload"
	VIEW FieldEEzsigndocumentlogType = "View"
	COMPLETION FieldEEzsigndocumentlogType = "Completion"
	CHANGELIMITDATE FieldEEzsigndocumentlogType = "Changelimitdate"
	UNSIGN FieldEEzsigndocumentlogType = "Unsign"
	IMPORT_FROM_INSTANET FieldEEzsigndocumentlogType = "ImportFromInstanet"
	SEND_EMAIL FieldEEzsigndocumentlogType = "SendEmail"
	FORM_COMPLETION FieldEEzsigndocumentlogType = "FormCompletion"
	SIGNATURE_ATTACHMENT_ADD FieldEEzsigndocumentlogType = "SignatureAttachmentAdd"
	SIGNATURE_ATTACHMENT_VALIDATION FieldEEzsigndocumentlogType = "SignatureAttachmentValidation"
	SIGNATURE_ATTACHMENT_REFUSED FieldEEzsigndocumentlogType = "SignatureAttachmentRefused"
	SIGNATURE_ATTACHMENT_DELETED FieldEEzsigndocumentlogType = "SignatureAttachmentDeleted"
	DECLINED_TO_SIGN FieldEEzsigndocumentlogType = "DeclinedToSign"
	DELAYED_SEND_EMAIL FieldEEzsigndocumentlogType = "DelayedSendEmail"
	ANNOTATION_ADDED FieldEEzsigndocumentlogType = "AnnotationAdded"
	FLATTEN FieldEEzsigndocumentlogType = "Flatten"
	REGENERATE_PAGE FieldEEzsigndocumentlogType = "RegeneratePage"
	REGENERATE_PAGE_FORM FieldEEzsigndocumentlogType = "RegeneratePageForm"
	REASSIGN FieldEEzsigndocumentlogType = "Reassign"
)

// All allowed values of FieldEEzsigndocumentlogType enum
var AllowedFieldEEzsigndocumentlogTypeEnumValues = []FieldEEzsigndocumentlogType{
	"Clone",
	"Login",
	"Sendcode",
	"Badcode",
	"Goodcode",
	"Badresponse",
	"Goodresponse",
	"Authentication",
	"Createpage",
	"Download",
	"Send",
	"Sign",
	"Upload",
	"View",
	"Completion",
	"Changelimitdate",
	"Unsign",
	"ImportFromInstanet",
	"SendEmail",
	"FormCompletion",
	"SignatureAttachmentAdd",
	"SignatureAttachmentValidation",
	"SignatureAttachmentRefused",
	"SignatureAttachmentDeleted",
	"DeclinedToSign",
	"DelayedSendEmail",
	"AnnotationAdded",
	"Flatten",
	"RegeneratePage",
	"RegeneratePageForm",
	"Reassign",
}

func (v *FieldEEzsigndocumentlogType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigndocumentlogType(value)
	for _, existing := range AllowedFieldEEzsigndocumentlogTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigndocumentlogType", value)
}

// NewFieldEEzsigndocumentlogTypeFromValue returns a pointer to a valid FieldEEzsigndocumentlogType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigndocumentlogTypeFromValue(v string) (*FieldEEzsigndocumentlogType, error) {
	ev := FieldEEzsigndocumentlogType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigndocumentlogType: valid values are %v", v, AllowedFieldEEzsigndocumentlogTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigndocumentlogType) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigndocumentlogTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigndocumentlogType value
func (v FieldEEzsigndocumentlogType) Ptr() *FieldEEzsigndocumentlogType {
	return &v
}

type NullableFieldEEzsigndocumentlogType struct {
	value *FieldEEzsigndocumentlogType
	isSet bool
}

func (v NullableFieldEEzsigndocumentlogType) Get() *FieldEEzsigndocumentlogType {
	return v.value
}

func (v *NullableFieldEEzsigndocumentlogType) Set(val *FieldEEzsigndocumentlogType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigndocumentlogType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigndocumentlogType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigndocumentlogType(val *FieldEEzsigndocumentlogType) *NullableFieldEEzsigndocumentlogType {
	return &NullableFieldEEzsigndocumentlogType{value: val, isSet: true}
}

func (v NullableFieldEEzsigndocumentlogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigndocumentlogType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

