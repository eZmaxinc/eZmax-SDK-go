/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhoneRequestCompoundV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhoneRequestCompoundV2{}

// PhoneRequestCompoundV2 A Phone Object and children to create a complete structure
type PhoneRequestCompoundV2 struct {
	// The unique ID of the Phone.
	PkiPhoneID *int32 `json:"pkiPhoneID,omitempty"`
	// The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
	FkiPhonetypeID int32 `json:"fkiPhonetypeID"`
	// The extension of the phone number.  The extension is the \"123\" section in this sample phone number: (514) 990-1516 x123.  It can also be used with international phone numbers
	SPhoneExtension *string `json:"sPhoneExtension,omitempty"`
	// A phone number in E.164 Format
	SPhoneE164 *string `json:"sPhoneE164,omitempty" validate:"regexp=^\\\\+[1-9]\\\\d{1,14}$"`
}

type _PhoneRequestCompoundV2 PhoneRequestCompoundV2

// NewPhoneRequestCompoundV2 instantiates a new PhoneRequestCompoundV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhoneRequestCompoundV2(fkiPhonetypeID int32) *PhoneRequestCompoundV2 {
	this := PhoneRequestCompoundV2{}
	this.FkiPhonetypeID = fkiPhonetypeID
	return &this
}

// NewPhoneRequestCompoundV2WithDefaults instantiates a new PhoneRequestCompoundV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhoneRequestCompoundV2WithDefaults() *PhoneRequestCompoundV2 {
	this := PhoneRequestCompoundV2{}
	return &this
}

// GetPkiPhoneID returns the PkiPhoneID field value if set, zero value otherwise.
func (o *PhoneRequestCompoundV2) GetPkiPhoneID() int32 {
	if o == nil || IsNil(o.PkiPhoneID) {
		var ret int32
		return ret
	}
	return *o.PkiPhoneID
}

// GetPkiPhoneIDOk returns a tuple with the PkiPhoneID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhoneRequestCompoundV2) GetPkiPhoneIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiPhoneID) {
		return nil, false
	}
	return o.PkiPhoneID, true
}

// HasPkiPhoneID returns a boolean if a field has been set.
func (o *PhoneRequestCompoundV2) HasPkiPhoneID() bool {
	if o != nil && !IsNil(o.PkiPhoneID) {
		return true
	}

	return false
}

// SetPkiPhoneID gets a reference to the given int32 and assigns it to the PkiPhoneID field.
func (o *PhoneRequestCompoundV2) SetPkiPhoneID(v int32) {
	o.PkiPhoneID = &v
}

// GetFkiPhonetypeID returns the FkiPhonetypeID field value
func (o *PhoneRequestCompoundV2) GetFkiPhonetypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiPhonetypeID
}

// GetFkiPhonetypeIDOk returns a tuple with the FkiPhonetypeID field value
// and a boolean to check if the value has been set.
func (o *PhoneRequestCompoundV2) GetFkiPhonetypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiPhonetypeID, true
}

// SetFkiPhonetypeID sets field value
func (o *PhoneRequestCompoundV2) SetFkiPhonetypeID(v int32) {
	o.FkiPhonetypeID = v
}

// GetSPhoneExtension returns the SPhoneExtension field value if set, zero value otherwise.
func (o *PhoneRequestCompoundV2) GetSPhoneExtension() string {
	if o == nil || IsNil(o.SPhoneExtension) {
		var ret string
		return ret
	}
	return *o.SPhoneExtension
}

// GetSPhoneExtensionOk returns a tuple with the SPhoneExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhoneRequestCompoundV2) GetSPhoneExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.SPhoneExtension) {
		return nil, false
	}
	return o.SPhoneExtension, true
}

// HasSPhoneExtension returns a boolean if a field has been set.
func (o *PhoneRequestCompoundV2) HasSPhoneExtension() bool {
	if o != nil && !IsNil(o.SPhoneExtension) {
		return true
	}

	return false
}

// SetSPhoneExtension gets a reference to the given string and assigns it to the SPhoneExtension field.
func (o *PhoneRequestCompoundV2) SetSPhoneExtension(v string) {
	o.SPhoneExtension = &v
}

// GetSPhoneE164 returns the SPhoneE164 field value if set, zero value otherwise.
func (o *PhoneRequestCompoundV2) GetSPhoneE164() string {
	if o == nil || IsNil(o.SPhoneE164) {
		var ret string
		return ret
	}
	return *o.SPhoneE164
}

// GetSPhoneE164Ok returns a tuple with the SPhoneE164 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhoneRequestCompoundV2) GetSPhoneE164Ok() (*string, bool) {
	if o == nil || IsNil(o.SPhoneE164) {
		return nil, false
	}
	return o.SPhoneE164, true
}

// HasSPhoneE164 returns a boolean if a field has been set.
func (o *PhoneRequestCompoundV2) HasSPhoneE164() bool {
	if o != nil && !IsNil(o.SPhoneE164) {
		return true
	}

	return false
}

// SetSPhoneE164 gets a reference to the given string and assigns it to the SPhoneE164 field.
func (o *PhoneRequestCompoundV2) SetSPhoneE164(v string) {
	o.SPhoneE164 = &v
}

func (o PhoneRequestCompoundV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhoneRequestCompoundV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiPhoneID) {
		toSerialize["pkiPhoneID"] = o.PkiPhoneID
	}
	toSerialize["fkiPhonetypeID"] = o.FkiPhonetypeID
	if !IsNil(o.SPhoneExtension) {
		toSerialize["sPhoneExtension"] = o.SPhoneExtension
	}
	if !IsNil(o.SPhoneE164) {
		toSerialize["sPhoneE164"] = o.SPhoneE164
	}
	return toSerialize, nil
}

func (o *PhoneRequestCompoundV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiPhonetypeID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhoneRequestCompoundV2 := _PhoneRequestCompoundV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhoneRequestCompoundV2)

	if err != nil {
		return err
	}

	*o = PhoneRequestCompoundV2(varPhoneRequestCompoundV2)

	return err
}

type NullablePhoneRequestCompoundV2 struct {
	value *PhoneRequestCompoundV2
	isSet bool
}

func (v NullablePhoneRequestCompoundV2) Get() *PhoneRequestCompoundV2 {
	return v.value
}

func (v *NullablePhoneRequestCompoundV2) Set(val *PhoneRequestCompoundV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneRequestCompoundV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneRequestCompoundV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneRequestCompoundV2(val *PhoneRequestCompoundV2) *NullablePhoneRequestCompoundV2 {
	return &NullablePhoneRequestCompoundV2{value: val, isSet: true}
}

func (v NullablePhoneRequestCompoundV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneRequestCompoundV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


