/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECommunicationType The type of the Communication
type FieldECommunicationType string

// List of Field-eCommunicationType
const (
	EMAIL FieldECommunicationType = "Email"
	FAX FieldECommunicationType = "Fax"
	SMS FieldECommunicationType = "Sms"
)

// All allowed values of FieldECommunicationType enum
var AllowedFieldECommunicationTypeEnumValues = []FieldECommunicationType{
	"Email",
	"Fax",
	"Sms",
}

func (v *FieldECommunicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECommunicationType(value)
	for _, existing := range AllowedFieldECommunicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECommunicationType", value)
}

// NewFieldECommunicationTypeFromValue returns a pointer to a valid FieldECommunicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECommunicationTypeFromValue(v string) (*FieldECommunicationType, error) {
	ev := FieldECommunicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECommunicationType: valid values are %v", v, AllowedFieldECommunicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECommunicationType) IsValid() bool {
	for _, existing := range AllowedFieldECommunicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCommunicationType value
func (v FieldECommunicationType) Ptr() *FieldECommunicationType {
	return &v
}

type NullableFieldECommunicationType struct {
	value *FieldECommunicationType
	isSet bool
}

func (v NullableFieldECommunicationType) Get() *FieldECommunicationType {
	return v.value
}

func (v *NullableFieldECommunicationType) Set(val *FieldECommunicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECommunicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECommunicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECommunicationType(val *FieldECommunicationType) *NullableFieldECommunicationType {
	return &NullableFieldECommunicationType{value: val, isSet: true}
}

func (v NullableFieldECommunicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECommunicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

