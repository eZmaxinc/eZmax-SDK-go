/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the MultilingualUsergroupName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultilingualUsergroupName{}

// MultilingualUsergroupName The name of the Usergroup
type MultilingualUsergroupName struct {
	// The name of the Usergroup in French
	SUsergroupName1 *string `json:"sUsergroupName1,omitempty" validate:"regexp=^.{0,50}$"`
	// The name of the Usergroup in English
	SUsergroupName2 *string `json:"sUsergroupName2,omitempty" validate:"regexp=^.{0,50}$"`
}

// NewMultilingualUsergroupName instantiates a new MultilingualUsergroupName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultilingualUsergroupName() *MultilingualUsergroupName {
	this := MultilingualUsergroupName{}
	return &this
}

// NewMultilingualUsergroupNameWithDefaults instantiates a new MultilingualUsergroupName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultilingualUsergroupNameWithDefaults() *MultilingualUsergroupName {
	this := MultilingualUsergroupName{}
	return &this
}

// GetSUsergroupName1 returns the SUsergroupName1 field value if set, zero value otherwise.
func (o *MultilingualUsergroupName) GetSUsergroupName1() string {
	if o == nil || IsNil(o.SUsergroupName1) {
		var ret string
		return ret
	}
	return *o.SUsergroupName1
}

// GetSUsergroupName1Ok returns a tuple with the SUsergroupName1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualUsergroupName) GetSUsergroupName1Ok() (*string, bool) {
	if o == nil || IsNil(o.SUsergroupName1) {
		return nil, false
	}
	return o.SUsergroupName1, true
}

// HasSUsergroupName1 returns a boolean if a field has been set.
func (o *MultilingualUsergroupName) HasSUsergroupName1() bool {
	if o != nil && !IsNil(o.SUsergroupName1) {
		return true
	}

	return false
}

// SetSUsergroupName1 gets a reference to the given string and assigns it to the SUsergroupName1 field.
func (o *MultilingualUsergroupName) SetSUsergroupName1(v string) {
	o.SUsergroupName1 = &v
}

// GetSUsergroupName2 returns the SUsergroupName2 field value if set, zero value otherwise.
func (o *MultilingualUsergroupName) GetSUsergroupName2() string {
	if o == nil || IsNil(o.SUsergroupName2) {
		var ret string
		return ret
	}
	return *o.SUsergroupName2
}

// GetSUsergroupName2Ok returns a tuple with the SUsergroupName2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualUsergroupName) GetSUsergroupName2Ok() (*string, bool) {
	if o == nil || IsNil(o.SUsergroupName2) {
		return nil, false
	}
	return o.SUsergroupName2, true
}

// HasSUsergroupName2 returns a boolean if a field has been set.
func (o *MultilingualUsergroupName) HasSUsergroupName2() bool {
	if o != nil && !IsNil(o.SUsergroupName2) {
		return true
	}

	return false
}

// SetSUsergroupName2 gets a reference to the given string and assigns it to the SUsergroupName2 field.
func (o *MultilingualUsergroupName) SetSUsergroupName2(v string) {
	o.SUsergroupName2 = &v
}

func (o MultilingualUsergroupName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultilingualUsergroupName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SUsergroupName1) {
		toSerialize["sUsergroupName1"] = o.SUsergroupName1
	}
	if !IsNil(o.SUsergroupName2) {
		toSerialize["sUsergroupName2"] = o.SUsergroupName2
	}
	return toSerialize, nil
}

type NullableMultilingualUsergroupName struct {
	value *MultilingualUsergroupName
	isSet bool
}

func (v NullableMultilingualUsergroupName) Get() *MultilingualUsergroupName {
	return v.value
}

func (v *NullableMultilingualUsergroupName) Set(val *MultilingualUsergroupName) {
	v.value = val
	v.isSet = true
}

func (v NullableMultilingualUsergroupName) IsSet() bool {
	return v.isSet
}

func (v *NullableMultilingualUsergroupName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultilingualUsergroupName(val *MultilingualUsergroupName) *NullableMultilingualUsergroupName {
	return &NullableMultilingualUsergroupName{value: val, isSet: true}
}

func (v NullableMultilingualUsergroupName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultilingualUsergroupName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


