/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzsignbulksendtransmissionAPIService ObjectEzsignbulksendtransmissionAPI service
type ObjectEzsignbulksendtransmissionAPIService service

type ApiEzsignbulksendtransmissionGetCsvErrorsV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignbulksendtransmissionAPIService
	pkiEzsignbulksendtransmissionID int32
}

func (r ApiEzsignbulksendtransmissionGetCsvErrorsV1Request) Execute() (string, *http.Response, error) {
	return r.ApiService.EzsignbulksendtransmissionGetCsvErrorsV1Execute(r)
}

/*
EzsignbulksendtransmissionGetCsvErrorsV1 Retrieve an existing Ezsignbulksendtransmission's Csv containing errors



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignbulksendtransmissionID
 @return ApiEzsignbulksendtransmissionGetCsvErrorsV1Request
*/
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetCsvErrorsV1(ctx context.Context, pkiEzsignbulksendtransmissionID int32) ApiEzsignbulksendtransmissionGetCsvErrorsV1Request {
	return ApiEzsignbulksendtransmissionGetCsvErrorsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignbulksendtransmissionID: pkiEzsignbulksendtransmissionID,
	}
}

// Execute executes the request
//  @return string
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetCsvErrorsV1Execute(r ApiEzsignbulksendtransmissionGetCsvErrorsV1Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignbulksendtransmissionAPIService.EzsignbulksendtransmissionGetCsvErrorsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getCsvErrors"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignbulksendtransmissionID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignbulksendtransmissionID, "pkiEzsignbulksendtransmissionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignbulksendtransmissionID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignbulksendtransmissionID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/csv", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignbulksendtransmissionAPIService
	pkiEzsignbulksendtransmissionID int32
}

func (r ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request) Execute() (*EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response, *http.Response, error) {
	return r.ApiService.EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Execute(r)
}

/*
EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1 Retrieve an existing Ezsignbulksendtransmission's automatic Ezsignsignatures

Return the Ezsignsignatures that can be signed by the current user at the current step in the process

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignbulksendtransmissionID
 @return ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request
*/
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1(ctx context.Context, pkiEzsignbulksendtransmissionID int32) ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request {
	return ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignbulksendtransmissionID: pkiEzsignbulksendtransmissionID,
	}
}

// Execute executes the request
//  @return EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Execute(r ApiEzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Request) (*EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignbulksendtransmissionAPIService.EzsignbulksendtransmissionGetEzsignsignaturesAutomaticV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getEzsignsignaturesAutomatic"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignbulksendtransmissionID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignbulksendtransmissionID, "pkiEzsignbulksendtransmissionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignbulksendtransmissionID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignbulksendtransmissionID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignbulksendtransmissionGetFormsDataV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignbulksendtransmissionAPIService
	pkiEzsignbulksendtransmissionID int32
}

func (r ApiEzsignbulksendtransmissionGetFormsDataV1Request) Execute() (*EzsignbulksendtransmissionGetFormsDataV1Response, *http.Response, error) {
	return r.ApiService.EzsignbulksendtransmissionGetFormsDataV1Execute(r)
}

/*
EzsignbulksendtransmissionGetFormsDataV1 Retrieve an existing Ezsignbulksendtransmission's forms data



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignbulksendtransmissionID
 @return ApiEzsignbulksendtransmissionGetFormsDataV1Request
*/
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetFormsDataV1(ctx context.Context, pkiEzsignbulksendtransmissionID int32) ApiEzsignbulksendtransmissionGetFormsDataV1Request {
	return ApiEzsignbulksendtransmissionGetFormsDataV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignbulksendtransmissionID: pkiEzsignbulksendtransmissionID,
	}
}

// Execute executes the request
//  @return EzsignbulksendtransmissionGetFormsDataV1Response
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetFormsDataV1Execute(r ApiEzsignbulksendtransmissionGetFormsDataV1Request) (*EzsignbulksendtransmissionGetFormsDataV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignbulksendtransmissionGetFormsDataV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignbulksendtransmissionAPIService.EzsignbulksendtransmissionGetFormsDataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}/getFormsData"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignbulksendtransmissionID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignbulksendtransmissionID, "pkiEzsignbulksendtransmissionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignbulksendtransmissionID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignbulksendtransmissionID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignbulksendtransmissionGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsignbulksendtransmissionAPIService
	pkiEzsignbulksendtransmissionID int32
}

func (r ApiEzsignbulksendtransmissionGetObjectV2Request) Execute() (*EzsignbulksendtransmissionGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzsignbulksendtransmissionGetObjectV2Execute(r)
}

/*
EzsignbulksendtransmissionGetObjectV2 Retrieve an existing Ezsignbulksendtransmission



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignbulksendtransmissionID
 @return ApiEzsignbulksendtransmissionGetObjectV2Request
*/
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetObjectV2(ctx context.Context, pkiEzsignbulksendtransmissionID int32) ApiEzsignbulksendtransmissionGetObjectV2Request {
	return ApiEzsignbulksendtransmissionGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignbulksendtransmissionID: pkiEzsignbulksendtransmissionID,
	}
}

// Execute executes the request
//  @return EzsignbulksendtransmissionGetObjectV2Response
func (a *ObjectEzsignbulksendtransmissionAPIService) EzsignbulksendtransmissionGetObjectV2Execute(r ApiEzsignbulksendtransmissionGetObjectV2Request) (*EzsignbulksendtransmissionGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignbulksendtransmissionGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignbulksendtransmissionAPIService.EzsignbulksendtransmissionGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsignbulksendtransmission/{pkiEzsignbulksendtransmissionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignbulksendtransmissionID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignbulksendtransmissionID, "pkiEzsignbulksendtransmissionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignbulksendtransmissionID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignbulksendtransmissionID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
