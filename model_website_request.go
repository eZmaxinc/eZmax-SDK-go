/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebsiteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebsiteRequest{}

// WebsiteRequest A Website Object
type WebsiteRequest struct {
	// The unique ID of the Websitetype.  Valid values:  |Value|Description| |-|-| |1|Website| |2|Twitter| |3|Facebook| |4|Survey|
	FkiWebsitetypeID int32 `json:"fkiWebsitetypeID"`
	// The URL of the website.
	SWebsiteAddress string `json:"sWebsiteAddress"`
}

type _WebsiteRequest WebsiteRequest

// NewWebsiteRequest instantiates a new WebsiteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebsiteRequest(fkiWebsitetypeID int32, sWebsiteAddress string) *WebsiteRequest {
	this := WebsiteRequest{}
	this.FkiWebsitetypeID = fkiWebsitetypeID
	this.SWebsiteAddress = sWebsiteAddress
	return &this
}

// NewWebsiteRequestWithDefaults instantiates a new WebsiteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebsiteRequestWithDefaults() *WebsiteRequest {
	this := WebsiteRequest{}
	return &this
}

// GetFkiWebsitetypeID returns the FkiWebsitetypeID field value
func (o *WebsiteRequest) GetFkiWebsitetypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiWebsitetypeID
}

// GetFkiWebsitetypeIDOk returns a tuple with the FkiWebsitetypeID field value
// and a boolean to check if the value has been set.
func (o *WebsiteRequest) GetFkiWebsitetypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiWebsitetypeID, true
}

// SetFkiWebsitetypeID sets field value
func (o *WebsiteRequest) SetFkiWebsitetypeID(v int32) {
	o.FkiWebsitetypeID = v
}

// GetSWebsiteAddress returns the SWebsiteAddress field value
func (o *WebsiteRequest) GetSWebsiteAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SWebsiteAddress
}

// GetSWebsiteAddressOk returns a tuple with the SWebsiteAddress field value
// and a boolean to check if the value has been set.
func (o *WebsiteRequest) GetSWebsiteAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SWebsiteAddress, true
}

// SetSWebsiteAddress sets field value
func (o *WebsiteRequest) SetSWebsiteAddress(v string) {
	o.SWebsiteAddress = v
}

func (o WebsiteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebsiteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fkiWebsitetypeID"] = o.FkiWebsitetypeID
	toSerialize["sWebsiteAddress"] = o.SWebsiteAddress
	return toSerialize, nil
}

func (o *WebsiteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiWebsitetypeID",
		"sWebsiteAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebsiteRequest := _WebsiteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebsiteRequest)

	if err != nil {
		return err
	}

	*o = WebsiteRequest(varWebsiteRequest)

	return err
}

type NullableWebsiteRequest struct {
	value *WebsiteRequest
	isSet bool
}

func (v NullableWebsiteRequest) Get() *WebsiteRequest {
	return v.value
}

func (v *NullableWebsiteRequest) Set(val *WebsiteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWebsiteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWebsiteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebsiteRequest(val *WebsiteRequest) *NullableWebsiteRequest {
	return &NullableWebsiteRequest{value: val, isSet: true}
}

func (v NullableWebsiteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebsiteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


