/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEColleagueRealestateinprogess The permission of the cloning user for Realestate
type FieldEColleagueRealestateinprogess string

// List of Field-eColleagueRealestateinprogess
const (
	NO FieldEColleagueRealestateinprogess = "No"
	READ FieldEColleagueRealestateinprogess = "Read"
	MODIFY FieldEColleagueRealestateinprogess = "Modify"
	CREATE FieldEColleagueRealestateinprogess = "Create"
)

// All allowed values of FieldEColleagueRealestateinprogess enum
var AllowedFieldEColleagueRealestateinprogessEnumValues = []FieldEColleagueRealestateinprogess{
	"No",
	"Read",
	"Modify",
	"Create",
}

func (v *FieldEColleagueRealestateinprogess) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEColleagueRealestateinprogess(value)
	for _, existing := range AllowedFieldEColleagueRealestateinprogessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEColleagueRealestateinprogess", value)
}

// NewFieldEColleagueRealestateinprogessFromValue returns a pointer to a valid FieldEColleagueRealestateinprogess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEColleagueRealestateinprogessFromValue(v string) (*FieldEColleagueRealestateinprogess, error) {
	ev := FieldEColleagueRealestateinprogess(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEColleagueRealestateinprogess: valid values are %v", v, AllowedFieldEColleagueRealestateinprogessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEColleagueRealestateinprogess) IsValid() bool {
	for _, existing := range AllowedFieldEColleagueRealestateinprogessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eColleagueRealestateinprogess value
func (v FieldEColleagueRealestateinprogess) Ptr() *FieldEColleagueRealestateinprogess {
	return &v
}

type NullableFieldEColleagueRealestateinprogess struct {
	value *FieldEColleagueRealestateinprogess
	isSet bool
}

func (v NullableFieldEColleagueRealestateinprogess) Get() *FieldEColleagueRealestateinprogess {
	return v.value
}

func (v *NullableFieldEColleagueRealestateinprogess) Set(val *FieldEColleagueRealestateinprogess) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEColleagueRealestateinprogess) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEColleagueRealestateinprogess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEColleagueRealestateinprogess(val *FieldEColleagueRealestateinprogess) *NullableFieldEColleagueRealestateinprogess {
	return &NullableFieldEColleagueRealestateinprogess{value: val, isSet: true}
}

func (v NullableFieldEColleagueRealestateinprogess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEColleagueRealestateinprogess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

