/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfoldertypeCompletion Indicates if the Ezsigndocument is completed when all signatures of this Ezsigndocument were applied or when all signatures of all Ezsigndocument  were applied
type FieldEEzsignfoldertypeCompletion string

// List of Field-eEzsignfoldertypeCompletion
const (
	PER_EZSIGNDOCUMENT FieldEEzsignfoldertypeCompletion = "PerEzsigndocument"
	PER_EZSIGNFOLDER FieldEEzsignfoldertypeCompletion = "PerEzsignfolder"
)

// All allowed values of FieldEEzsignfoldertypeCompletion enum
var AllowedFieldEEzsignfoldertypeCompletionEnumValues = []FieldEEzsignfoldertypeCompletion{
	"PerEzsigndocument",
	"PerEzsignfolder",
}

func (v *FieldEEzsignfoldertypeCompletion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfoldertypeCompletion(value)
	for _, existing := range AllowedFieldEEzsignfoldertypeCompletionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfoldertypeCompletion", value)
}

// NewFieldEEzsignfoldertypeCompletionFromValue returns a pointer to a valid FieldEEzsignfoldertypeCompletion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfoldertypeCompletionFromValue(v string) (*FieldEEzsignfoldertypeCompletion, error) {
	ev := FieldEEzsignfoldertypeCompletion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfoldertypeCompletion: valid values are %v", v, AllowedFieldEEzsignfoldertypeCompletionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfoldertypeCompletion) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfoldertypeCompletionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfoldertypeCompletion value
func (v FieldEEzsignfoldertypeCompletion) Ptr() *FieldEEzsignfoldertypeCompletion {
	return &v
}

type NullableFieldEEzsignfoldertypeCompletion struct {
	value *FieldEEzsignfoldertypeCompletion
	isSet bool
}

func (v NullableFieldEEzsignfoldertypeCompletion) Get() *FieldEEzsignfoldertypeCompletion {
	return v.value
}

func (v *NullableFieldEEzsignfoldertypeCompletion) Set(val *FieldEEzsignfoldertypeCompletion) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfoldertypeCompletion) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfoldertypeCompletion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfoldertypeCompletion(val *FieldEEzsignfoldertypeCompletion) *NullableFieldEEzsignfoldertypeCompletion {
	return &NullableFieldEEzsignfoldertypeCompletion{value: val, isSet: true}
}

func (v NullableFieldEEzsignfoldertypeCompletion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfoldertypeCompletion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

