/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScimGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimGroup{}

// ScimGroup struct for ScimGroup
type ScimGroup struct {
	Id *string `json:"id,omitempty"`
	// The Name of the Usergroup in the language of the requester
	DisplayName string `json:"displayName"`
	Members []ScimGroupMember `json:"members,omitempty"`
}

type _ScimGroup ScimGroup

// NewScimGroup instantiates a new ScimGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimGroup(displayName string) *ScimGroup {
	this := ScimGroup{}
	this.DisplayName = displayName
	return &this
}

// NewScimGroupWithDefaults instantiates a new ScimGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimGroupWithDefaults() *ScimGroup {
	this := ScimGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScimGroup) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimGroup) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScimGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScimGroup) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value
func (o *ScimGroup) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ScimGroup) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ScimGroup) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ScimGroup) GetMembers() []ScimGroupMember {
	if o == nil || IsNil(o.Members) {
		var ret []ScimGroupMember
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimGroup) GetMembersOk() ([]ScimGroupMember, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ScimGroup) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []ScimGroupMember and assigns it to the Members field.
func (o *ScimGroup) SetMembers(v []ScimGroupMember) {
	o.Members = v
}

func (o ScimGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["displayName"] = o.DisplayName
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	return toSerialize, nil
}

func (o *ScimGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displayName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScimGroup := _ScimGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScimGroup)

	if err != nil {
		return err
	}

	*o = ScimGroup(varScimGroup)

	return err
}

type NullableScimGroup struct {
	value *ScimGroup
	isSet bool
}

func (v NullableScimGroup) Get() *ScimGroup {
	return v.value
}

func (v *NullableScimGroup) Set(val *ScimGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableScimGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableScimGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimGroup(val *ScimGroup) *NullableScimGroup {
	return &NullableScimGroup{value: val, isSet: true}
}

func (v NullableScimGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


