/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApikeyRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApikeyRequestCompound{}

// ApikeyRequestCompound An Apikey Object and children to create a complete structure
type ApikeyRequestCompound struct {
	// The unique ID of the Apikey
	PkiApikeyID *int32 `json:"pkiApikeyID,omitempty"`
	// The unique ID of the User
	FkiUserID int32 `json:"fkiUserID"`
	ObjApikeyDescription MultilingualApikeyDescription `json:"objApikeyDescription"`
	// Whether the apikey is active or not
	BApikeyIsactive *bool `json:"bApikeyIsactive,omitempty"`
	// Whether the apikey is signed or not
	BApikeyIssigned *bool `json:"bApikeyIssigned,omitempty"`
}

type _ApikeyRequestCompound ApikeyRequestCompound

// NewApikeyRequestCompound instantiates a new ApikeyRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApikeyRequestCompound(fkiUserID int32, objApikeyDescription MultilingualApikeyDescription) *ApikeyRequestCompound {
	this := ApikeyRequestCompound{}
	this.FkiUserID = fkiUserID
	this.ObjApikeyDescription = objApikeyDescription
	return &this
}

// NewApikeyRequestCompoundWithDefaults instantiates a new ApikeyRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApikeyRequestCompoundWithDefaults() *ApikeyRequestCompound {
	this := ApikeyRequestCompound{}
	return &this
}

// GetPkiApikeyID returns the PkiApikeyID field value if set, zero value otherwise.
func (o *ApikeyRequestCompound) GetPkiApikeyID() int32 {
	if o == nil || IsNil(o.PkiApikeyID) {
		var ret int32
		return ret
	}
	return *o.PkiApikeyID
}

// GetPkiApikeyIDOk returns a tuple with the PkiApikeyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyRequestCompound) GetPkiApikeyIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiApikeyID) {
		return nil, false
	}
	return o.PkiApikeyID, true
}

// HasPkiApikeyID returns a boolean if a field has been set.
func (o *ApikeyRequestCompound) HasPkiApikeyID() bool {
	if o != nil && !IsNil(o.PkiApikeyID) {
		return true
	}

	return false
}

// SetPkiApikeyID gets a reference to the given int32 and assigns it to the PkiApikeyID field.
func (o *ApikeyRequestCompound) SetPkiApikeyID(v int32) {
	o.PkiApikeyID = &v
}

// GetFkiUserID returns the FkiUserID field value
func (o *ApikeyRequestCompound) GetFkiUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiUserID
}

// GetFkiUserIDOk returns a tuple with the FkiUserID field value
// and a boolean to check if the value has been set.
func (o *ApikeyRequestCompound) GetFkiUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiUserID, true
}

// SetFkiUserID sets field value
func (o *ApikeyRequestCompound) SetFkiUserID(v int32) {
	o.FkiUserID = v
}

// GetObjApikeyDescription returns the ObjApikeyDescription field value
func (o *ApikeyRequestCompound) GetObjApikeyDescription() MultilingualApikeyDescription {
	if o == nil {
		var ret MultilingualApikeyDescription
		return ret
	}

	return o.ObjApikeyDescription
}

// GetObjApikeyDescriptionOk returns a tuple with the ObjApikeyDescription field value
// and a boolean to check if the value has been set.
func (o *ApikeyRequestCompound) GetObjApikeyDescriptionOk() (*MultilingualApikeyDescription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjApikeyDescription, true
}

// SetObjApikeyDescription sets field value
func (o *ApikeyRequestCompound) SetObjApikeyDescription(v MultilingualApikeyDescription) {
	o.ObjApikeyDescription = v
}

// GetBApikeyIsactive returns the BApikeyIsactive field value if set, zero value otherwise.
func (o *ApikeyRequestCompound) GetBApikeyIsactive() bool {
	if o == nil || IsNil(o.BApikeyIsactive) {
		var ret bool
		return ret
	}
	return *o.BApikeyIsactive
}

// GetBApikeyIsactiveOk returns a tuple with the BApikeyIsactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyRequestCompound) GetBApikeyIsactiveOk() (*bool, bool) {
	if o == nil || IsNil(o.BApikeyIsactive) {
		return nil, false
	}
	return o.BApikeyIsactive, true
}

// HasBApikeyIsactive returns a boolean if a field has been set.
func (o *ApikeyRequestCompound) HasBApikeyIsactive() bool {
	if o != nil && !IsNil(o.BApikeyIsactive) {
		return true
	}

	return false
}

// SetBApikeyIsactive gets a reference to the given bool and assigns it to the BApikeyIsactive field.
func (o *ApikeyRequestCompound) SetBApikeyIsactive(v bool) {
	o.BApikeyIsactive = &v
}

// GetBApikeyIssigned returns the BApikeyIssigned field value if set, zero value otherwise.
func (o *ApikeyRequestCompound) GetBApikeyIssigned() bool {
	if o == nil || IsNil(o.BApikeyIssigned) {
		var ret bool
		return ret
	}
	return *o.BApikeyIssigned
}

// GetBApikeyIssignedOk returns a tuple with the BApikeyIssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyRequestCompound) GetBApikeyIssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.BApikeyIssigned) {
		return nil, false
	}
	return o.BApikeyIssigned, true
}

// HasBApikeyIssigned returns a boolean if a field has been set.
func (o *ApikeyRequestCompound) HasBApikeyIssigned() bool {
	if o != nil && !IsNil(o.BApikeyIssigned) {
		return true
	}

	return false
}

// SetBApikeyIssigned gets a reference to the given bool and assigns it to the BApikeyIssigned field.
func (o *ApikeyRequestCompound) SetBApikeyIssigned(v bool) {
	o.BApikeyIssigned = &v
}

func (o ApikeyRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApikeyRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiApikeyID) {
		toSerialize["pkiApikeyID"] = o.PkiApikeyID
	}
	toSerialize["fkiUserID"] = o.FkiUserID
	toSerialize["objApikeyDescription"] = o.ObjApikeyDescription
	if !IsNil(o.BApikeyIsactive) {
		toSerialize["bApikeyIsactive"] = o.BApikeyIsactive
	}
	if !IsNil(o.BApikeyIssigned) {
		toSerialize["bApikeyIssigned"] = o.BApikeyIssigned
	}
	return toSerialize, nil
}

func (o *ApikeyRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiUserID",
		"objApikeyDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApikeyRequestCompound := _ApikeyRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApikeyRequestCompound)

	if err != nil {
		return err
	}

	*o = ApikeyRequestCompound(varApikeyRequestCompound)

	return err
}

type NullableApikeyRequestCompound struct {
	value *ApikeyRequestCompound
	isSet bool
}

func (v NullableApikeyRequestCompound) Get() *ApikeyRequestCompound {
	return v.value
}

func (v *NullableApikeyRequestCompound) Set(val *ApikeyRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableApikeyRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableApikeyRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApikeyRequestCompound(val *ApikeyRequestCompound) *NullableApikeyRequestCompound {
	return &NullableApikeyRequestCompound{value: val, isSet: true}
}

func (v NullableApikeyRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApikeyRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


