/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsigndiscussionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsigndiscussionResponse{}

// EzsigndiscussionResponse A Ezsigndiscussion Object
type EzsigndiscussionResponse struct {
	// The unique ID of the Ezsigndiscussion
	PkiEzsigndiscussionID int32 `json:"pkiEzsigndiscussionID"`
	// The unique ID of the Ezsignpage
	FkiEzsignpageID int32 `json:"fkiEzsignpageID"`
	// The unique ID of the Discussion
	FkiDiscussionID int32 `json:"fkiDiscussionID"`
	// The x of the Ezsigndiscussion
	IEzsigndiscussionX int32 `json:"iEzsigndiscussionX"`
	// The y of the Ezsigndiscussion
	IEzsigndiscussionY int32 `json:"iEzsigndiscussionY"`
	// The page number in the Ezsigndocument for the Ezsigndiscussion
	IEzsigndiscussionPagenumber int32 `json:"iEzsigndiscussionPagenumber"`
	ObjDiscussion DiscussionResponseCompound `json:"objDiscussion"`
}

type _EzsigndiscussionResponse EzsigndiscussionResponse

// NewEzsigndiscussionResponse instantiates a new EzsigndiscussionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigndiscussionResponse(pkiEzsigndiscussionID int32, fkiEzsignpageID int32, fkiDiscussionID int32, iEzsigndiscussionX int32, iEzsigndiscussionY int32, iEzsigndiscussionPagenumber int32, objDiscussion DiscussionResponseCompound) *EzsigndiscussionResponse {
	this := EzsigndiscussionResponse{}
	this.PkiEzsigndiscussionID = pkiEzsigndiscussionID
	this.FkiEzsignpageID = fkiEzsignpageID
	this.FkiDiscussionID = fkiDiscussionID
	this.IEzsigndiscussionX = iEzsigndiscussionX
	this.IEzsigndiscussionY = iEzsigndiscussionY
	this.IEzsigndiscussionPagenumber = iEzsigndiscussionPagenumber
	this.ObjDiscussion = objDiscussion
	return &this
}

// NewEzsigndiscussionResponseWithDefaults instantiates a new EzsigndiscussionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigndiscussionResponseWithDefaults() *EzsigndiscussionResponse {
	this := EzsigndiscussionResponse{}
	return &this
}

// GetPkiEzsigndiscussionID returns the PkiEzsigndiscussionID field value
func (o *EzsigndiscussionResponse) GetPkiEzsigndiscussionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEzsigndiscussionID
}

// GetPkiEzsigndiscussionIDOk returns a tuple with the PkiEzsigndiscussionID field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetPkiEzsigndiscussionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEzsigndiscussionID, true
}

// SetPkiEzsigndiscussionID sets field value
func (o *EzsigndiscussionResponse) SetPkiEzsigndiscussionID(v int32) {
	o.PkiEzsigndiscussionID = v
}

// GetFkiEzsignpageID returns the FkiEzsignpageID field value
func (o *EzsigndiscussionResponse) GetFkiEzsignpageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzsignpageID
}

// GetFkiEzsignpageIDOk returns a tuple with the FkiEzsignpageID field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetFkiEzsignpageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzsignpageID, true
}

// SetFkiEzsignpageID sets field value
func (o *EzsigndiscussionResponse) SetFkiEzsignpageID(v int32) {
	o.FkiEzsignpageID = v
}

// GetFkiDiscussionID returns the FkiDiscussionID field value
func (o *EzsigndiscussionResponse) GetFkiDiscussionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiDiscussionID
}

// GetFkiDiscussionIDOk returns a tuple with the FkiDiscussionID field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetFkiDiscussionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiDiscussionID, true
}

// SetFkiDiscussionID sets field value
func (o *EzsigndiscussionResponse) SetFkiDiscussionID(v int32) {
	o.FkiDiscussionID = v
}

// GetIEzsigndiscussionX returns the IEzsigndiscussionX field value
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsigndiscussionX
}

// GetIEzsigndiscussionXOk returns a tuple with the IEzsigndiscussionX field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsigndiscussionX, true
}

// SetIEzsigndiscussionX sets field value
func (o *EzsigndiscussionResponse) SetIEzsigndiscussionX(v int32) {
	o.IEzsigndiscussionX = v
}

// GetIEzsigndiscussionY returns the IEzsigndiscussionY field value
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsigndiscussionY
}

// GetIEzsigndiscussionYOk returns a tuple with the IEzsigndiscussionY field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsigndiscussionY, true
}

// SetIEzsigndiscussionY sets field value
func (o *EzsigndiscussionResponse) SetIEzsigndiscussionY(v int32) {
	o.IEzsigndiscussionY = v
}

// GetIEzsigndiscussionPagenumber returns the IEzsigndiscussionPagenumber field value
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionPagenumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsigndiscussionPagenumber
}

// GetIEzsigndiscussionPagenumberOk returns a tuple with the IEzsigndiscussionPagenumber field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetIEzsigndiscussionPagenumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsigndiscussionPagenumber, true
}

// SetIEzsigndiscussionPagenumber sets field value
func (o *EzsigndiscussionResponse) SetIEzsigndiscussionPagenumber(v int32) {
	o.IEzsigndiscussionPagenumber = v
}

// GetObjDiscussion returns the ObjDiscussion field value
func (o *EzsigndiscussionResponse) GetObjDiscussion() DiscussionResponseCompound {
	if o == nil {
		var ret DiscussionResponseCompound
		return ret
	}

	return o.ObjDiscussion
}

// GetObjDiscussionOk returns a tuple with the ObjDiscussion field value
// and a boolean to check if the value has been set.
func (o *EzsigndiscussionResponse) GetObjDiscussionOk() (*DiscussionResponseCompound, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjDiscussion, true
}

// SetObjDiscussion sets field value
func (o *EzsigndiscussionResponse) SetObjDiscussion(v DiscussionResponseCompound) {
	o.ObjDiscussion = v
}

func (o EzsigndiscussionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsigndiscussionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEzsigndiscussionID"] = o.PkiEzsigndiscussionID
	toSerialize["fkiEzsignpageID"] = o.FkiEzsignpageID
	toSerialize["fkiDiscussionID"] = o.FkiDiscussionID
	toSerialize["iEzsigndiscussionX"] = o.IEzsigndiscussionX
	toSerialize["iEzsigndiscussionY"] = o.IEzsigndiscussionY
	toSerialize["iEzsigndiscussionPagenumber"] = o.IEzsigndiscussionPagenumber
	toSerialize["objDiscussion"] = o.ObjDiscussion
	return toSerialize, nil
}

func (o *EzsigndiscussionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEzsigndiscussionID",
		"fkiEzsignpageID",
		"fkiDiscussionID",
		"iEzsigndiscussionX",
		"iEzsigndiscussionY",
		"iEzsigndiscussionPagenumber",
		"objDiscussion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsigndiscussionResponse := _EzsigndiscussionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsigndiscussionResponse)

	if err != nil {
		return err
	}

	*o = EzsigndiscussionResponse(varEzsigndiscussionResponse)

	return err
}

type NullableEzsigndiscussionResponse struct {
	value *EzsigndiscussionResponse
	isSet bool
}

func (v NullableEzsigndiscussionResponse) Get() *EzsigndiscussionResponse {
	return v.value
}

func (v *NullableEzsigndiscussionResponse) Set(val *EzsigndiscussionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigndiscussionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigndiscussionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigndiscussionResponse(val *EzsigndiscussionResponse) *NullableEzsigndiscussionResponse {
	return &NullableEzsigndiscussionResponse{value: val, isSet: true}
}

func (v NullableEzsigndiscussionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigndiscussionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


