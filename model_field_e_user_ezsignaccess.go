/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEUserEzsignaccess The type of eZsign access the User has
type FieldEUserEzsignaccess string

// List of Field-eUserEzsignaccess
const (
	NO FieldEUserEzsignaccess = "No"
	PAID_BY_OFFICE FieldEUserEzsignaccess = "PaidByOffice"
	PER_DOCUMENT FieldEUserEzsignaccess = "PerDocument"
	PREPAID FieldEUserEzsignaccess = "Prepaid"
)

// All allowed values of FieldEUserEzsignaccess enum
var AllowedFieldEUserEzsignaccessEnumValues = []FieldEUserEzsignaccess{
	"No",
	"PaidByOffice",
	"PerDocument",
	"Prepaid",
}

func (v *FieldEUserEzsignaccess) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEUserEzsignaccess(value)
	for _, existing := range AllowedFieldEUserEzsignaccessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEUserEzsignaccess", value)
}

// NewFieldEUserEzsignaccessFromValue returns a pointer to a valid FieldEUserEzsignaccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEUserEzsignaccessFromValue(v string) (*FieldEUserEzsignaccess, error) {
	ev := FieldEUserEzsignaccess(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEUserEzsignaccess: valid values are %v", v, AllowedFieldEUserEzsignaccessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEUserEzsignaccess) IsValid() bool {
	for _, existing := range AllowedFieldEUserEzsignaccessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eUserEzsignaccess value
func (v FieldEUserEzsignaccess) Ptr() *FieldEUserEzsignaccess {
	return &v
}

type NullableFieldEUserEzsignaccess struct {
	value *FieldEUserEzsignaccess
	isSet bool
}

func (v NullableFieldEUserEzsignaccess) Get() *FieldEUserEzsignaccess {
	return v.value
}

func (v *NullableFieldEUserEzsignaccess) Set(val *FieldEUserEzsignaccess) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEUserEzsignaccess) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEUserEzsignaccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEUserEzsignaccess(val *FieldEUserEzsignaccess) *NullableFieldEUserEzsignaccess {
	return &NullableFieldEUserEzsignaccess{value: val, isSet: true}
}

func (v NullableFieldEUserEzsignaccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEUserEzsignaccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

