/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the ScimEmail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimEmail{}

// ScimEmail struct for ScimEmail
type ScimEmail struct {
	// The email address.
	Value *string `json:"value,omitempty"`
	Primary *bool `json:"primary,omitempty"`
}

// NewScimEmail instantiates a new ScimEmail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimEmail() *ScimEmail {
	this := ScimEmail{}
	return &this
}

// NewScimEmailWithDefaults instantiates a new ScimEmail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimEmailWithDefaults() *ScimEmail {
	this := ScimEmail{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ScimEmail) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimEmail) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ScimEmail) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *ScimEmail) SetValue(v string) {
	o.Value = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *ScimEmail) GetPrimary() bool {
	if o == nil || IsNil(o.Primary) {
		var ret bool
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimEmail) GetPrimaryOk() (*bool, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *ScimEmail) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given bool and assigns it to the Primary field.
func (o *ScimEmail) SetPrimary(v bool) {
	o.Primary = &v
}

func (o ScimEmail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimEmail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	return toSerialize, nil
}

type NullableScimEmail struct {
	value *ScimEmail
	isSet bool
}

func (v NullableScimEmail) Get() *ScimEmail {
	return v.value
}

func (v *NullableScimEmail) Set(val *ScimEmail) {
	v.value = val
	v.isSet = true
}

func (v NullableScimEmail) IsSet() bool {
	return v.isSet
}

func (v *NullableScimEmail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimEmail(val *ScimEmail) *NullableScimEmail {
	return &NullableScimEmail{value: val, isSet: true}
}

func (v NullableScimEmail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimEmail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


