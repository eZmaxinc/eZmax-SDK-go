/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiscussionmessageRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscussionmessageRequestCompound{}

// DiscussionmessageRequestCompound A Discussionmessage Object and children
type DiscussionmessageRequestCompound struct {
	// The unique ID of the Discussionmessage
	PkiDiscussionmessageID *int32 `json:"pkiDiscussionmessageID,omitempty"`
	// The unique ID of the Discussion
	FkiDiscussionID int32 `json:"fkiDiscussionID"`
	// The unique ID of the Discussionmembership
	FkiDiscussionmembershipIDActionrequired *int32 `json:"fkiDiscussionmembershipIDActionrequired,omitempty"`
	// The content of the Discussionmessage
	TDiscussionmessageContent string `json:"tDiscussionmessageContent" validate:"regexp=^.{0,65535}$"`
}

type _DiscussionmessageRequestCompound DiscussionmessageRequestCompound

// NewDiscussionmessageRequestCompound instantiates a new DiscussionmessageRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscussionmessageRequestCompound(fkiDiscussionID int32, tDiscussionmessageContent string) *DiscussionmessageRequestCompound {
	this := DiscussionmessageRequestCompound{}
	this.FkiDiscussionID = fkiDiscussionID
	this.TDiscussionmessageContent = tDiscussionmessageContent
	return &this
}

// NewDiscussionmessageRequestCompoundWithDefaults instantiates a new DiscussionmessageRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscussionmessageRequestCompoundWithDefaults() *DiscussionmessageRequestCompound {
	this := DiscussionmessageRequestCompound{}
	return &this
}

// GetPkiDiscussionmessageID returns the PkiDiscussionmessageID field value if set, zero value otherwise.
func (o *DiscussionmessageRequestCompound) GetPkiDiscussionmessageID() int32 {
	if o == nil || IsNil(o.PkiDiscussionmessageID) {
		var ret int32
		return ret
	}
	return *o.PkiDiscussionmessageID
}

// GetPkiDiscussionmessageIDOk returns a tuple with the PkiDiscussionmessageID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionmessageRequestCompound) GetPkiDiscussionmessageIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiDiscussionmessageID) {
		return nil, false
	}
	return o.PkiDiscussionmessageID, true
}

// HasPkiDiscussionmessageID returns a boolean if a field has been set.
func (o *DiscussionmessageRequestCompound) HasPkiDiscussionmessageID() bool {
	if o != nil && !IsNil(o.PkiDiscussionmessageID) {
		return true
	}

	return false
}

// SetPkiDiscussionmessageID gets a reference to the given int32 and assigns it to the PkiDiscussionmessageID field.
func (o *DiscussionmessageRequestCompound) SetPkiDiscussionmessageID(v int32) {
	o.PkiDiscussionmessageID = &v
}

// GetFkiDiscussionID returns the FkiDiscussionID field value
func (o *DiscussionmessageRequestCompound) GetFkiDiscussionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiDiscussionID
}

// GetFkiDiscussionIDOk returns a tuple with the FkiDiscussionID field value
// and a boolean to check if the value has been set.
func (o *DiscussionmessageRequestCompound) GetFkiDiscussionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiDiscussionID, true
}

// SetFkiDiscussionID sets field value
func (o *DiscussionmessageRequestCompound) SetFkiDiscussionID(v int32) {
	o.FkiDiscussionID = v
}

// GetFkiDiscussionmembershipIDActionrequired returns the FkiDiscussionmembershipIDActionrequired field value if set, zero value otherwise.
func (o *DiscussionmessageRequestCompound) GetFkiDiscussionmembershipIDActionrequired() int32 {
	if o == nil || IsNil(o.FkiDiscussionmembershipIDActionrequired) {
		var ret int32
		return ret
	}
	return *o.FkiDiscussionmembershipIDActionrequired
}

// GetFkiDiscussionmembershipIDActionrequiredOk returns a tuple with the FkiDiscussionmembershipIDActionrequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionmessageRequestCompound) GetFkiDiscussionmembershipIDActionrequiredOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiDiscussionmembershipIDActionrequired) {
		return nil, false
	}
	return o.FkiDiscussionmembershipIDActionrequired, true
}

// HasFkiDiscussionmembershipIDActionrequired returns a boolean if a field has been set.
func (o *DiscussionmessageRequestCompound) HasFkiDiscussionmembershipIDActionrequired() bool {
	if o != nil && !IsNil(o.FkiDiscussionmembershipIDActionrequired) {
		return true
	}

	return false
}

// SetFkiDiscussionmembershipIDActionrequired gets a reference to the given int32 and assigns it to the FkiDiscussionmembershipIDActionrequired field.
func (o *DiscussionmessageRequestCompound) SetFkiDiscussionmembershipIDActionrequired(v int32) {
	o.FkiDiscussionmembershipIDActionrequired = &v
}

// GetTDiscussionmessageContent returns the TDiscussionmessageContent field value
func (o *DiscussionmessageRequestCompound) GetTDiscussionmessageContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TDiscussionmessageContent
}

// GetTDiscussionmessageContentOk returns a tuple with the TDiscussionmessageContent field value
// and a boolean to check if the value has been set.
func (o *DiscussionmessageRequestCompound) GetTDiscussionmessageContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TDiscussionmessageContent, true
}

// SetTDiscussionmessageContent sets field value
func (o *DiscussionmessageRequestCompound) SetTDiscussionmessageContent(v string) {
	o.TDiscussionmessageContent = v
}

func (o DiscussionmessageRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscussionmessageRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiDiscussionmessageID) {
		toSerialize["pkiDiscussionmessageID"] = o.PkiDiscussionmessageID
	}
	toSerialize["fkiDiscussionID"] = o.FkiDiscussionID
	if !IsNil(o.FkiDiscussionmembershipIDActionrequired) {
		toSerialize["fkiDiscussionmembershipIDActionrequired"] = o.FkiDiscussionmembershipIDActionrequired
	}
	toSerialize["tDiscussionmessageContent"] = o.TDiscussionmessageContent
	return toSerialize, nil
}

func (o *DiscussionmessageRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiDiscussionID",
		"tDiscussionmessageContent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscussionmessageRequestCompound := _DiscussionmessageRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscussionmessageRequestCompound)

	if err != nil {
		return err
	}

	*o = DiscussionmessageRequestCompound(varDiscussionmessageRequestCompound)

	return err
}

type NullableDiscussionmessageRequestCompound struct {
	value *DiscussionmessageRequestCompound
	isSet bool
}

func (v NullableDiscussionmessageRequestCompound) Get() *DiscussionmessageRequestCompound {
	return v.value
}

func (v *NullableDiscussionmessageRequestCompound) Set(val *DiscussionmessageRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscussionmessageRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscussionmessageRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscussionmessageRequestCompound(val *DiscussionmessageRequestCompound) *NullableDiscussionmessageRequestCompound {
	return &NullableDiscussionmessageRequestCompound{value: val, isSet: true}
}

func (v NullableDiscussionmessageRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscussionmessageRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


