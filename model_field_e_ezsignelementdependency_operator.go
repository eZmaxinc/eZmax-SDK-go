/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignelementdependencyOperator The operator of the Ezsignelementdependency
type FieldEEzsignelementdependencyOperator string

// List of Field-eEzsignelementdependencyOperator
const (
	EQ FieldEEzsignelementdependencyOperator = "eq"
	NEQ FieldEEzsignelementdependencyOperator = "neq"
	GT FieldEEzsignelementdependencyOperator = "gt"
	GTE FieldEEzsignelementdependencyOperator = "gte"
	LT FieldEEzsignelementdependencyOperator = "lt"
	LTE FieldEEzsignelementdependencyOperator = "lte"
	IN FieldEEzsignelementdependencyOperator = "in"
	NIN FieldEEzsignelementdependencyOperator = "nin"
	RG FieldEEzsignelementdependencyOperator = "rg"
	LIKE FieldEEzsignelementdependencyOperator = "like"
	BETWEEN FieldEEzsignelementdependencyOperator = "between"
)

// All allowed values of FieldEEzsignelementdependencyOperator enum
var AllowedFieldEEzsignelementdependencyOperatorEnumValues = []FieldEEzsignelementdependencyOperator{
	"eq",
	"neq",
	"gt",
	"gte",
	"lt",
	"lte",
	"in",
	"nin",
	"rg",
	"like",
	"between",
}

func (v *FieldEEzsignelementdependencyOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignelementdependencyOperator(value)
	for _, existing := range AllowedFieldEEzsignelementdependencyOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignelementdependencyOperator", value)
}

// NewFieldEEzsignelementdependencyOperatorFromValue returns a pointer to a valid FieldEEzsignelementdependencyOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignelementdependencyOperatorFromValue(v string) (*FieldEEzsignelementdependencyOperator, error) {
	ev := FieldEEzsignelementdependencyOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignelementdependencyOperator: valid values are %v", v, AllowedFieldEEzsignelementdependencyOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignelementdependencyOperator) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignelementdependencyOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignelementdependencyOperator value
func (v FieldEEzsignelementdependencyOperator) Ptr() *FieldEEzsignelementdependencyOperator {
	return &v
}

type NullableFieldEEzsignelementdependencyOperator struct {
	value *FieldEEzsignelementdependencyOperator
	isSet bool
}

func (v NullableFieldEEzsignelementdependencyOperator) Get() *FieldEEzsignelementdependencyOperator {
	return v.value
}

func (v *NullableFieldEEzsignelementdependencyOperator) Set(val *FieldEEzsignelementdependencyOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignelementdependencyOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignelementdependencyOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignelementdependencyOperator(val *FieldEEzsignelementdependencyOperator) *NullableFieldEEzsignelementdependencyOperator {
	return &NullableFieldEEzsignelementdependencyOperator{value: val, isSet: true}
}

func (v NullableFieldEEzsignelementdependencyOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignelementdependencyOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

