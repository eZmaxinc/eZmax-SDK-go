/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEActivesessionEzsign Clone rights for eZsign folders.
type FieldEActivesessionEzsign string

// List of Field-eActivesessionEzsign
const (
	NO FieldEActivesessionEzsign = "No"
	READ FieldEActivesessionEzsign = "Read"
	MODIFY FieldEActivesessionEzsign = "Modify"
	FULL FieldEActivesessionEzsign = "Full"
)

// All allowed values of FieldEActivesessionEzsign enum
var AllowedFieldEActivesessionEzsignEnumValues = []FieldEActivesessionEzsign{
	"No",
	"Read",
	"Modify",
	"Full",
}

func (v *FieldEActivesessionEzsign) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEActivesessionEzsign(value)
	for _, existing := range AllowedFieldEActivesessionEzsignEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEActivesessionEzsign", value)
}

// NewFieldEActivesessionEzsignFromValue returns a pointer to a valid FieldEActivesessionEzsign
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEActivesessionEzsignFromValue(v string) (*FieldEActivesessionEzsign, error) {
	ev := FieldEActivesessionEzsign(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEActivesessionEzsign: valid values are %v", v, AllowedFieldEActivesessionEzsignEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEActivesessionEzsign) IsValid() bool {
	for _, existing := range AllowedFieldEActivesessionEzsignEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eActivesessionEzsign value
func (v FieldEActivesessionEzsign) Ptr() *FieldEActivesessionEzsign {
	return &v
}

type NullableFieldEActivesessionEzsign struct {
	value *FieldEActivesessionEzsign
	isSet bool
}

func (v NullableFieldEActivesessionEzsign) Get() *FieldEActivesessionEzsign {
	return v.value
}

func (v *NullableFieldEActivesessionEzsign) Set(val *FieldEActivesessionEzsign) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEActivesessionEzsign) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEActivesessionEzsign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEActivesessionEzsign(val *FieldEActivesessionEzsign) *NullableFieldEActivesessionEzsign {
	return &NullableFieldEActivesessionEzsign{value: val, isSet: true}
}

func (v NullableFieldEActivesessionEzsign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEActivesessionEzsign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

