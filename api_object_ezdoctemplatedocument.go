/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzdoctemplatedocumentAPIService ObjectEzdoctemplatedocumentAPI service
type ObjectEzdoctemplatedocumentAPIService service

type ApiEzdoctemplatedocumentCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	ezdoctemplatedocumentCreateObjectV1Request *EzdoctemplatedocumentCreateObjectV1Request
}

func (r ApiEzdoctemplatedocumentCreateObjectV1Request) EzdoctemplatedocumentCreateObjectV1Request(ezdoctemplatedocumentCreateObjectV1Request EzdoctemplatedocumentCreateObjectV1Request) ApiEzdoctemplatedocumentCreateObjectV1Request {
	r.ezdoctemplatedocumentCreateObjectV1Request = &ezdoctemplatedocumentCreateObjectV1Request
	return r
}

func (r ApiEzdoctemplatedocumentCreateObjectV1Request) Execute() (*EzdoctemplatedocumentCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentCreateObjectV1Execute(r)
}

/*
EzdoctemplatedocumentCreateObjectV1 Create a new Ezdoctemplatedocument

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzdoctemplatedocumentCreateObjectV1Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentCreateObjectV1(ctx context.Context) ApiEzdoctemplatedocumentCreateObjectV1Request {
	return ApiEzdoctemplatedocumentCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentCreateObjectV1Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentCreateObjectV1Execute(r ApiEzdoctemplatedocumentCreateObjectV1Request) (*EzdoctemplatedocumentCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezdoctemplatedocument"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezdoctemplatedocumentCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezdoctemplatedocumentCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezdoctemplatedocumentCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentDownloadV1Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	pkiEzdoctemplatedocumentID int32
}

func (r ApiEzdoctemplatedocumentDownloadV1Request) Execute() (*http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentDownloadV1Execute(r)
}

/*
EzdoctemplatedocumentDownloadV1 Retrieve the content

Using this endpoint, you can retrieve the content of an ezdoctemplatedocument.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzdoctemplatedocumentID
 @return ApiEzdoctemplatedocumentDownloadV1Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentDownloadV1(ctx context.Context, pkiEzdoctemplatedocumentID int32) ApiEzdoctemplatedocumentDownloadV1Request {
	return ApiEzdoctemplatedocumentDownloadV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzdoctemplatedocumentID: pkiEzdoctemplatedocumentID,
	}
}

// Execute executes the request
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentDownloadV1Execute(r ApiEzdoctemplatedocumentDownloadV1Request) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentDownloadV1")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzdoctemplatedocumentID"+"}", url.PathEscape(parameterValueToString(r.pkiEzdoctemplatedocumentID, "pkiEzdoctemplatedocumentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzdoctemplatedocumentID < 0 {
		return nil, reportError("pkiEzdoctemplatedocumentID must be greater than 0")
	}
	if r.pkiEzdoctemplatedocumentID > 65535 {
		return nil, reportError("pkiEzdoctemplatedocumentID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Presigned"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("sAuthorization", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	pkiEzdoctemplatedocumentID int32
	ezdoctemplatedocumentEditObjectV1Request *EzdoctemplatedocumentEditObjectV1Request
}

func (r ApiEzdoctemplatedocumentEditObjectV1Request) EzdoctemplatedocumentEditObjectV1Request(ezdoctemplatedocumentEditObjectV1Request EzdoctemplatedocumentEditObjectV1Request) ApiEzdoctemplatedocumentEditObjectV1Request {
	r.ezdoctemplatedocumentEditObjectV1Request = &ezdoctemplatedocumentEditObjectV1Request
	return r
}

func (r ApiEzdoctemplatedocumentEditObjectV1Request) Execute() (*EzdoctemplatedocumentEditObjectV1Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentEditObjectV1Execute(r)
}

/*
EzdoctemplatedocumentEditObjectV1 Edit an existing Ezdoctemplatedocument



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
 @return ApiEzdoctemplatedocumentEditObjectV1Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentEditObjectV1(ctx context.Context, pkiEzdoctemplatedocumentID int32) ApiEzdoctemplatedocumentEditObjectV1Request {
	return ApiEzdoctemplatedocumentEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzdoctemplatedocumentID: pkiEzdoctemplatedocumentID,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentEditObjectV1Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentEditObjectV1Execute(r ApiEzdoctemplatedocumentEditObjectV1Request) (*EzdoctemplatedocumentEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzdoctemplatedocumentID"+"}", url.PathEscape(parameterValueToString(r.pkiEzdoctemplatedocumentID, "pkiEzdoctemplatedocumentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzdoctemplatedocumentID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be greater than 0")
	}
	if r.pkiEzdoctemplatedocumentID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be less than 65535")
	}
	if r.ezdoctemplatedocumentEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezdoctemplatedocumentEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezdoctemplatedocumentEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentGetAutocompleteV2Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	sSelector string
	eType *string
	fkiEzsignfoldertypeID *string
	eFilterActive *string
	sQuery *string
	acceptLanguage *HeaderAcceptLanguage
}

// The type of Ezdoctemplatedocument
func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) EType(eType string) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	r.eType = &eType
	return r
}

// Specify which fkiEzsignfoldertypeID we want to display. only used when eType &#x3D; Ezsignfoldertype
func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) FkiEzsignfoldertypeID(fkiEzsignfoldertypeID string) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	r.fkiEzsignfoldertypeID = &fkiEzsignfoldertypeID
	return r
}

// Specify which results we want to display.
func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) EFilterActive(eFilterActive string) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	r.eFilterActive = &eFilterActive
	return r
}

// Allow to filter the returned results
func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) SQuery(sQuery string) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	r.sQuery = &sQuery
	return r
}

func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiEzdoctemplatedocumentGetAutocompleteV2Request) Execute() (*EzdoctemplatedocumentGetAutocompleteV2Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentGetAutocompleteV2Execute(r)
}

/*
EzdoctemplatedocumentGetAutocompleteV2 Retrieve Ezdoctemplatedocuments and IDs

Get the list of Ezdoctemplatedocument to be used in a dropdown or autocomplete control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sSelector The type of Ezdoctemplatedocuments to return
 @return ApiEzdoctemplatedocumentGetAutocompleteV2Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetAutocompleteV2(ctx context.Context, sSelector string) ApiEzdoctemplatedocumentGetAutocompleteV2Request {
	return ApiEzdoctemplatedocumentGetAutocompleteV2Request{
		ApiService: a,
		ctx: ctx,
		sSelector: sSelector,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentGetAutocompleteV2Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetAutocompleteV2Execute(r ApiEzdoctemplatedocumentGetAutocompleteV2Request) (*EzdoctemplatedocumentGetAutocompleteV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentGetAutocompleteV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentGetAutocompleteV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezdoctemplatedocument/getAutocomplete/{sSelector}"
	localVarPath = strings.Replace(localVarPath, "{"+"sSelector"+"}", url.PathEscape(parameterValueToString(r.sSelector, "sSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.eType == nil {
		return localVarReturnValue, nil, reportError("eType is required and must be specified")
	}

	if r.fkiEzsignfoldertypeID != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fkiEzsignfoldertypeID", r.fkiEzsignfoldertypeID, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "eType", r.eType, "form", "")
	if r.eFilterActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eFilterActive", r.eFilterActive, "form", "")
	} else {
		var defaultValue string = "Active"
		r.eFilterActive = &defaultValue
	}
	if r.sQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sQuery", r.sQuery, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiEzdoctemplatedocumentGetListV1Request) EOrderBy(eOrderBy string) ApiEzdoctemplatedocumentGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiEzdoctemplatedocumentGetListV1Request) IRowMax(iRowMax int32) ApiEzdoctemplatedocumentGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiEzdoctemplatedocumentGetListV1Request) IRowOffset(iRowOffset int32) ApiEzdoctemplatedocumentGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiEzdoctemplatedocumentGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiEzdoctemplatedocumentGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiEzdoctemplatedocumentGetListV1Request) SFilter(sFilter string) ApiEzdoctemplatedocumentGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiEzdoctemplatedocumentGetListV1Request) Execute() (*EzdoctemplatedocumentGetListV1Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentGetListV1Execute(r)
}

/*
EzdoctemplatedocumentGetListV1 Retrieve Ezdoctemplatedocument list



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzdoctemplatedocumentGetListV1Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetListV1(ctx context.Context) ApiEzdoctemplatedocumentGetListV1Request {
	return ApiEzdoctemplatedocumentGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentGetListV1Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetListV1Execute(r ApiEzdoctemplatedocumentGetListV1Request) (*EzdoctemplatedocumentGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezdoctemplatedocument/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	pkiEzdoctemplatedocumentID int32
}

func (r ApiEzdoctemplatedocumentGetObjectV2Request) Execute() (*EzdoctemplatedocumentGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentGetObjectV2Execute(r)
}

/*
EzdoctemplatedocumentGetObjectV2 Retrieve an existing Ezdoctemplatedocument



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
 @return ApiEzdoctemplatedocumentGetObjectV2Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetObjectV2(ctx context.Context, pkiEzdoctemplatedocumentID int32) ApiEzdoctemplatedocumentGetObjectV2Request {
	return ApiEzdoctemplatedocumentGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzdoctemplatedocumentID: pkiEzdoctemplatedocumentID,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentGetObjectV2Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentGetObjectV2Execute(r ApiEzdoctemplatedocumentGetObjectV2Request) (*EzdoctemplatedocumentGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzdoctemplatedocumentID"+"}", url.PathEscape(parameterValueToString(r.pkiEzdoctemplatedocumentID, "pkiEzdoctemplatedocumentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzdoctemplatedocumentID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be greater than 0")
	}
	if r.pkiEzdoctemplatedocumentID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzdoctemplatedocumentPatchObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzdoctemplatedocumentAPIService
	pkiEzdoctemplatedocumentID int32
	ezdoctemplatedocumentPatchObjectV1Request *EzdoctemplatedocumentPatchObjectV1Request
}

func (r ApiEzdoctemplatedocumentPatchObjectV1Request) EzdoctemplatedocumentPatchObjectV1Request(ezdoctemplatedocumentPatchObjectV1Request EzdoctemplatedocumentPatchObjectV1Request) ApiEzdoctemplatedocumentPatchObjectV1Request {
	r.ezdoctemplatedocumentPatchObjectV1Request = &ezdoctemplatedocumentPatchObjectV1Request
	return r
}

func (r ApiEzdoctemplatedocumentPatchObjectV1Request) Execute() (*EzdoctemplatedocumentPatchObjectV1Response, *http.Response, error) {
	return r.ApiService.EzdoctemplatedocumentPatchObjectV1Execute(r)
}

/*
EzdoctemplatedocumentPatchObjectV1 Patch an existing Ezdoctemplatedocument



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzdoctemplatedocumentID The unique ID of the Ezdoctemplatedocument
 @return ApiEzdoctemplatedocumentPatchObjectV1Request
*/
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentPatchObjectV1(ctx context.Context, pkiEzdoctemplatedocumentID int32) ApiEzdoctemplatedocumentPatchObjectV1Request {
	return ApiEzdoctemplatedocumentPatchObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzdoctemplatedocumentID: pkiEzdoctemplatedocumentID,
	}
}

// Execute executes the request
//  @return EzdoctemplatedocumentPatchObjectV1Response
func (a *ObjectEzdoctemplatedocumentAPIService) EzdoctemplatedocumentPatchObjectV1Execute(r ApiEzdoctemplatedocumentPatchObjectV1Request) (*EzdoctemplatedocumentPatchObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzdoctemplatedocumentPatchObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzdoctemplatedocumentAPIService.EzdoctemplatedocumentPatchObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezdoctemplatedocument/{pkiEzdoctemplatedocumentID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzdoctemplatedocumentID"+"}", url.PathEscape(parameterValueToString(r.pkiEzdoctemplatedocumentID, "pkiEzdoctemplatedocumentID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzdoctemplatedocumentID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be greater than 0")
	}
	if r.pkiEzdoctemplatedocumentID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzdoctemplatedocumentID must be less than 65535")
	}
	if r.ezdoctemplatedocumentPatchObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezdoctemplatedocumentPatchObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezdoctemplatedocumentPatchObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
