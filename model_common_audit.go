/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonAudit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonAudit{}

// CommonAudit Gives informations about the user that created the object and the last user to have modified it.  If the object was never modified after creation, objAuditdetailModified won't be returned. 
type CommonAudit struct {
	ObjAuditdetailCreated CommonAuditdetail `json:"objAuditdetailCreated"`
	ObjAuditdetailModified *CommonAuditdetail `json:"objAuditdetailModified,omitempty"`
}

type _CommonAudit CommonAudit

// NewCommonAudit instantiates a new CommonAudit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonAudit(objAuditdetailCreated CommonAuditdetail) *CommonAudit {
	this := CommonAudit{}
	this.ObjAuditdetailCreated = objAuditdetailCreated
	return &this
}

// NewCommonAuditWithDefaults instantiates a new CommonAudit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonAuditWithDefaults() *CommonAudit {
	this := CommonAudit{}
	return &this
}

// GetObjAuditdetailCreated returns the ObjAuditdetailCreated field value
func (o *CommonAudit) GetObjAuditdetailCreated() CommonAuditdetail {
	if o == nil {
		var ret CommonAuditdetail
		return ret
	}

	return o.ObjAuditdetailCreated
}

// GetObjAuditdetailCreatedOk returns a tuple with the ObjAuditdetailCreated field value
// and a boolean to check if the value has been set.
func (o *CommonAudit) GetObjAuditdetailCreatedOk() (*CommonAuditdetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjAuditdetailCreated, true
}

// SetObjAuditdetailCreated sets field value
func (o *CommonAudit) SetObjAuditdetailCreated(v CommonAuditdetail) {
	o.ObjAuditdetailCreated = v
}

// GetObjAuditdetailModified returns the ObjAuditdetailModified field value if set, zero value otherwise.
func (o *CommonAudit) GetObjAuditdetailModified() CommonAuditdetail {
	if o == nil || IsNil(o.ObjAuditdetailModified) {
		var ret CommonAuditdetail
		return ret
	}
	return *o.ObjAuditdetailModified
}

// GetObjAuditdetailModifiedOk returns a tuple with the ObjAuditdetailModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonAudit) GetObjAuditdetailModifiedOk() (*CommonAuditdetail, bool) {
	if o == nil || IsNil(o.ObjAuditdetailModified) {
		return nil, false
	}
	return o.ObjAuditdetailModified, true
}

// HasObjAuditdetailModified returns a boolean if a field has been set.
func (o *CommonAudit) HasObjAuditdetailModified() bool {
	if o != nil && !IsNil(o.ObjAuditdetailModified) {
		return true
	}

	return false
}

// SetObjAuditdetailModified gets a reference to the given CommonAuditdetail and assigns it to the ObjAuditdetailModified field.
func (o *CommonAudit) SetObjAuditdetailModified(v CommonAuditdetail) {
	o.ObjAuditdetailModified = &v
}

func (o CommonAudit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonAudit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objAuditdetailCreated"] = o.ObjAuditdetailCreated
	if !IsNil(o.ObjAuditdetailModified) {
		toSerialize["objAuditdetailModified"] = o.ObjAuditdetailModified
	}
	return toSerialize, nil
}

func (o *CommonAudit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objAuditdetailCreated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonAudit := _CommonAudit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonAudit)

	if err != nil {
		return err
	}

	*o = CommonAudit(varCommonAudit)

	return err
}

type NullableCommonAudit struct {
	value *CommonAudit
	isSet bool
}

func (v NullableCommonAudit) Get() *CommonAudit {
	return v.value
}

func (v *NullableCommonAudit) Set(val *CommonAudit) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAudit) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAudit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAudit(val *CommonAudit) *NullableCommonAudit {
	return &NullableCommonAudit{value: val, isSet: true}
}

func (v NullableCommonAudit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAudit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


