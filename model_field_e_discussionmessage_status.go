/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEDiscussionmessageStatus The status of the Discussionmessage
type FieldEDiscussionmessageStatus string

// List of Field-eDiscussionmessageStatus
const (
	NEW FieldEDiscussionmessageStatus = "New"
	EDITED FieldEDiscussionmessageStatus = "Edited"
	DELETED FieldEDiscussionmessageStatus = "Deleted"
)

// All allowed values of FieldEDiscussionmessageStatus enum
var AllowedFieldEDiscussionmessageStatusEnumValues = []FieldEDiscussionmessageStatus{
	"New",
	"Edited",
	"Deleted",
}

func (v *FieldEDiscussionmessageStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEDiscussionmessageStatus(value)
	for _, existing := range AllowedFieldEDiscussionmessageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEDiscussionmessageStatus", value)
}

// NewFieldEDiscussionmessageStatusFromValue returns a pointer to a valid FieldEDiscussionmessageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEDiscussionmessageStatusFromValue(v string) (*FieldEDiscussionmessageStatus, error) {
	ev := FieldEDiscussionmessageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEDiscussionmessageStatus: valid values are %v", v, AllowedFieldEDiscussionmessageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEDiscussionmessageStatus) IsValid() bool {
	for _, existing := range AllowedFieldEDiscussionmessageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eDiscussionmessageStatus value
func (v FieldEDiscussionmessageStatus) Ptr() *FieldEDiscussionmessageStatus {
	return &v
}

type NullableFieldEDiscussionmessageStatus struct {
	value *FieldEDiscussionmessageStatus
	isSet bool
}

func (v NullableFieldEDiscussionmessageStatus) Get() *FieldEDiscussionmessageStatus {
	return v.value
}

func (v *NullableFieldEDiscussionmessageStatus) Set(val *FieldEDiscussionmessageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEDiscussionmessageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEDiscussionmessageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEDiscussionmessageStatus(val *FieldEDiscussionmessageStatus) *NullableFieldEDiscussionmessageStatus {
	return &NullableFieldEDiscussionmessageStatus{value: val, isSet: true}
}

func (v NullableFieldEDiscussionmessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEDiscussionmessageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

