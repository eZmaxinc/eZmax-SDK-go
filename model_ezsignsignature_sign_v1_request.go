/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignsignatureSignV1Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignsignatureSignV1Request{}

// EzsignsignatureSignV1Request Request for POST /1/object/ezsignsignature/{pkiEzsignsignatureID}/sign
type EzsignsignatureSignV1Request struct {
	// The unique ID of the Ezsignsigningreason
	FkiEzsignsigningreasonID *int32 `json:"fkiEzsignsigningreasonID,omitempty"`
	// The value required for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **City**, **FieldText** or **FieldTextarea**
	SValue *string `json:"sValue,omitempty"`
	// Whether the attachment are accepted or refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
	EAttachmentsConfirmationDecision *string `json:"eAttachmentsConfirmationDecision,omitempty"`
	// The reason of refused.  This can only be set if eEzsignsignatureType is **AttachmentsConfirmation**
	SAttachmentsRefusalReason *string `json:"sAttachmentsRefusalReason,omitempty"`
	// The SVG of the handwritten signature.  This can only be set if eEzsignsignatureType is **Handwritten** and **bIsAutomatic** is false
	SSvg *string `json:"sSvg,omitempty"`
	AObjFile []CommonFile `json:"a_objFile,omitempty"`
	// Indicates if the Ezsignsignature was part of an automatic process or not.  This can only be true if eEzsignsignatureType is **Acknowledgement**, **City**, **Handwritten**, **Initials**, **Name** or **Stamp**. 
	BIsAutomatic bool `json:"bIsAutomatic"`
}

type _EzsignsignatureSignV1Request EzsignsignatureSignV1Request

// NewEzsignsignatureSignV1Request instantiates a new EzsignsignatureSignV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignsignatureSignV1Request(bIsAutomatic bool) *EzsignsignatureSignV1Request {
	this := EzsignsignatureSignV1Request{}
	this.BIsAutomatic = bIsAutomatic
	return &this
}

// NewEzsignsignatureSignV1RequestWithDefaults instantiates a new EzsignsignatureSignV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignsignatureSignV1RequestWithDefaults() *EzsignsignatureSignV1Request {
	this := EzsignsignatureSignV1Request{}
	return &this
}

// GetFkiEzsignsigningreasonID returns the FkiEzsignsigningreasonID field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetFkiEzsignsigningreasonID() int32 {
	if o == nil || IsNil(o.FkiEzsignsigningreasonID) {
		var ret int32
		return ret
	}
	return *o.FkiEzsignsigningreasonID
}

// GetFkiEzsignsigningreasonIDOk returns a tuple with the FkiEzsignsigningreasonID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetFkiEzsignsigningreasonIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiEzsignsigningreasonID) {
		return nil, false
	}
	return o.FkiEzsignsigningreasonID, true
}

// HasFkiEzsignsigningreasonID returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasFkiEzsignsigningreasonID() bool {
	if o != nil && !IsNil(o.FkiEzsignsigningreasonID) {
		return true
	}

	return false
}

// SetFkiEzsignsigningreasonID gets a reference to the given int32 and assigns it to the FkiEzsignsigningreasonID field.
func (o *EzsignsignatureSignV1Request) SetFkiEzsignsigningreasonID(v int32) {
	o.FkiEzsignsigningreasonID = &v
}

// GetSValue returns the SValue field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetSValue() string {
	if o == nil || IsNil(o.SValue) {
		var ret string
		return ret
	}
	return *o.SValue
}

// GetSValueOk returns a tuple with the SValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetSValueOk() (*string, bool) {
	if o == nil || IsNil(o.SValue) {
		return nil, false
	}
	return o.SValue, true
}

// HasSValue returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasSValue() bool {
	if o != nil && !IsNil(o.SValue) {
		return true
	}

	return false
}

// SetSValue gets a reference to the given string and assigns it to the SValue field.
func (o *EzsignsignatureSignV1Request) SetSValue(v string) {
	o.SValue = &v
}

// GetEAttachmentsConfirmationDecision returns the EAttachmentsConfirmationDecision field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetEAttachmentsConfirmationDecision() string {
	if o == nil || IsNil(o.EAttachmentsConfirmationDecision) {
		var ret string
		return ret
	}
	return *o.EAttachmentsConfirmationDecision
}

// GetEAttachmentsConfirmationDecisionOk returns a tuple with the EAttachmentsConfirmationDecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetEAttachmentsConfirmationDecisionOk() (*string, bool) {
	if o == nil || IsNil(o.EAttachmentsConfirmationDecision) {
		return nil, false
	}
	return o.EAttachmentsConfirmationDecision, true
}

// HasEAttachmentsConfirmationDecision returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasEAttachmentsConfirmationDecision() bool {
	if o != nil && !IsNil(o.EAttachmentsConfirmationDecision) {
		return true
	}

	return false
}

// SetEAttachmentsConfirmationDecision gets a reference to the given string and assigns it to the EAttachmentsConfirmationDecision field.
func (o *EzsignsignatureSignV1Request) SetEAttachmentsConfirmationDecision(v string) {
	o.EAttachmentsConfirmationDecision = &v
}

// GetSAttachmentsRefusalReason returns the SAttachmentsRefusalReason field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetSAttachmentsRefusalReason() string {
	if o == nil || IsNil(o.SAttachmentsRefusalReason) {
		var ret string
		return ret
	}
	return *o.SAttachmentsRefusalReason
}

// GetSAttachmentsRefusalReasonOk returns a tuple with the SAttachmentsRefusalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetSAttachmentsRefusalReasonOk() (*string, bool) {
	if o == nil || IsNil(o.SAttachmentsRefusalReason) {
		return nil, false
	}
	return o.SAttachmentsRefusalReason, true
}

// HasSAttachmentsRefusalReason returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasSAttachmentsRefusalReason() bool {
	if o != nil && !IsNil(o.SAttachmentsRefusalReason) {
		return true
	}

	return false
}

// SetSAttachmentsRefusalReason gets a reference to the given string and assigns it to the SAttachmentsRefusalReason field.
func (o *EzsignsignatureSignV1Request) SetSAttachmentsRefusalReason(v string) {
	o.SAttachmentsRefusalReason = &v
}

// GetSSvg returns the SSvg field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetSSvg() string {
	if o == nil || IsNil(o.SSvg) {
		var ret string
		return ret
	}
	return *o.SSvg
}

// GetSSvgOk returns a tuple with the SSvg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetSSvgOk() (*string, bool) {
	if o == nil || IsNil(o.SSvg) {
		return nil, false
	}
	return o.SSvg, true
}

// HasSSvg returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasSSvg() bool {
	if o != nil && !IsNil(o.SSvg) {
		return true
	}

	return false
}

// SetSSvg gets a reference to the given string and assigns it to the SSvg field.
func (o *EzsignsignatureSignV1Request) SetSSvg(v string) {
	o.SSvg = &v
}

// GetAObjFile returns the AObjFile field value if set, zero value otherwise.
func (o *EzsignsignatureSignV1Request) GetAObjFile() []CommonFile {
	if o == nil || IsNil(o.AObjFile) {
		var ret []CommonFile
		return ret
	}
	return o.AObjFile
}

// GetAObjFileOk returns a tuple with the AObjFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetAObjFileOk() ([]CommonFile, bool) {
	if o == nil || IsNil(o.AObjFile) {
		return nil, false
	}
	return o.AObjFile, true
}

// HasAObjFile returns a boolean if a field has been set.
func (o *EzsignsignatureSignV1Request) HasAObjFile() bool {
	if o != nil && !IsNil(o.AObjFile) {
		return true
	}

	return false
}

// SetAObjFile gets a reference to the given []CommonFile and assigns it to the AObjFile field.
func (o *EzsignsignatureSignV1Request) SetAObjFile(v []CommonFile) {
	o.AObjFile = v
}

// GetBIsAutomatic returns the BIsAutomatic field value
func (o *EzsignsignatureSignV1Request) GetBIsAutomatic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BIsAutomatic
}

// GetBIsAutomaticOk returns a tuple with the BIsAutomatic field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureSignV1Request) GetBIsAutomaticOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BIsAutomatic, true
}

// SetBIsAutomatic sets field value
func (o *EzsignsignatureSignV1Request) SetBIsAutomatic(v bool) {
	o.BIsAutomatic = v
}

func (o EzsignsignatureSignV1Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignsignatureSignV1Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FkiEzsignsigningreasonID) {
		toSerialize["fkiEzsignsigningreasonID"] = o.FkiEzsignsigningreasonID
	}
	if !IsNil(o.SValue) {
		toSerialize["sValue"] = o.SValue
	}
	if !IsNil(o.EAttachmentsConfirmationDecision) {
		toSerialize["eAttachmentsConfirmationDecision"] = o.EAttachmentsConfirmationDecision
	}
	if !IsNil(o.SAttachmentsRefusalReason) {
		toSerialize["sAttachmentsRefusalReason"] = o.SAttachmentsRefusalReason
	}
	if !IsNil(o.SSvg) {
		toSerialize["sSvg"] = o.SSvg
	}
	if !IsNil(o.AObjFile) {
		toSerialize["a_objFile"] = o.AObjFile
	}
	toSerialize["bIsAutomatic"] = o.BIsAutomatic
	return toSerialize, nil
}

func (o *EzsignsignatureSignV1Request) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bIsAutomatic",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignsignatureSignV1Request := _EzsignsignatureSignV1Request{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignsignatureSignV1Request)

	if err != nil {
		return err
	}

	*o = EzsignsignatureSignV1Request(varEzsignsignatureSignV1Request)

	return err
}

type NullableEzsignsignatureSignV1Request struct {
	value *EzsignsignatureSignV1Request
	isSet bool
}

func (v NullableEzsignsignatureSignV1Request) Get() *EzsignsignatureSignV1Request {
	return v.value
}

func (v *NullableEzsignsignatureSignV1Request) Set(val *EzsignsignatureSignV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignsignatureSignV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignsignatureSignV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignsignatureSignV1Request(val *EzsignsignatureSignV1Request) *NullableEzsignsignatureSignV1Request {
	return &NullableEzsignsignatureSignV1Request{value: val, isSet: true}
}

func (v NullableEzsignsignatureSignV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignsignatureSignV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


