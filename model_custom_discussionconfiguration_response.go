/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomDiscussionconfigurationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomDiscussionconfigurationResponse{}

// CustomDiscussionconfigurationResponse A Custom Discussionconfiguration Object
type CustomDiscussionconfigurationResponse struct {
	// If the added Discussionmembership will have access to the entire history or not
	BDiscussionconfigurationCompletehistorywhenadded bool `json:"bDiscussionconfigurationCompletehistorywhenadded"`
	// If the the creation of the Discussion is allowed or not
	BDiscussionconfigurationCreateallowed bool `json:"bDiscussionconfigurationCreateallowed"`
	// If the the destruction of the Discussion is allowed or not
	BDiscussionconfigurationDeleteallowed bool `json:"bDiscussionconfigurationDeleteallowed"`
	// If the the destruction of the Discussionmessage is allowed or not
	BDiscussionconfigurationDeletediscussionmessageallowed bool `json:"bDiscussionconfigurationDeletediscussionmessageallowed"`
	// If the the creation of the Discussionmessage is allowed or not
	BDiscussionconfigurationEditdiscussionmessageallowed bool `json:"bDiscussionconfigurationEditdiscussionmessageallowed"`
}

type _CustomDiscussionconfigurationResponse CustomDiscussionconfigurationResponse

// NewCustomDiscussionconfigurationResponse instantiates a new CustomDiscussionconfigurationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDiscussionconfigurationResponse(bDiscussionconfigurationCompletehistorywhenadded bool, bDiscussionconfigurationCreateallowed bool, bDiscussionconfigurationDeleteallowed bool, bDiscussionconfigurationDeletediscussionmessageallowed bool, bDiscussionconfigurationEditdiscussionmessageallowed bool) *CustomDiscussionconfigurationResponse {
	this := CustomDiscussionconfigurationResponse{}
	this.BDiscussionconfigurationCompletehistorywhenadded = bDiscussionconfigurationCompletehistorywhenadded
	this.BDiscussionconfigurationCreateallowed = bDiscussionconfigurationCreateallowed
	this.BDiscussionconfigurationDeleteallowed = bDiscussionconfigurationDeleteallowed
	this.BDiscussionconfigurationDeletediscussionmessageallowed = bDiscussionconfigurationDeletediscussionmessageallowed
	this.BDiscussionconfigurationEditdiscussionmessageallowed = bDiscussionconfigurationEditdiscussionmessageallowed
	return &this
}

// NewCustomDiscussionconfigurationResponseWithDefaults instantiates a new CustomDiscussionconfigurationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDiscussionconfigurationResponseWithDefaults() *CustomDiscussionconfigurationResponse {
	this := CustomDiscussionconfigurationResponse{}
	return &this
}

// GetBDiscussionconfigurationCompletehistorywhenadded returns the BDiscussionconfigurationCompletehistorywhenadded field value
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationCompletehistorywhenadded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionconfigurationCompletehistorywhenadded
}

// GetBDiscussionconfigurationCompletehistorywhenaddedOk returns a tuple with the BDiscussionconfigurationCompletehistorywhenadded field value
// and a boolean to check if the value has been set.
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationCompletehistorywhenaddedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionconfigurationCompletehistorywhenadded, true
}

// SetBDiscussionconfigurationCompletehistorywhenadded sets field value
func (o *CustomDiscussionconfigurationResponse) SetBDiscussionconfigurationCompletehistorywhenadded(v bool) {
	o.BDiscussionconfigurationCompletehistorywhenadded = v
}

// GetBDiscussionconfigurationCreateallowed returns the BDiscussionconfigurationCreateallowed field value
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationCreateallowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionconfigurationCreateallowed
}

// GetBDiscussionconfigurationCreateallowedOk returns a tuple with the BDiscussionconfigurationCreateallowed field value
// and a boolean to check if the value has been set.
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationCreateallowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionconfigurationCreateallowed, true
}

// SetBDiscussionconfigurationCreateallowed sets field value
func (o *CustomDiscussionconfigurationResponse) SetBDiscussionconfigurationCreateallowed(v bool) {
	o.BDiscussionconfigurationCreateallowed = v
}

// GetBDiscussionconfigurationDeleteallowed returns the BDiscussionconfigurationDeleteallowed field value
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationDeleteallowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionconfigurationDeleteallowed
}

// GetBDiscussionconfigurationDeleteallowedOk returns a tuple with the BDiscussionconfigurationDeleteallowed field value
// and a boolean to check if the value has been set.
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationDeleteallowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionconfigurationDeleteallowed, true
}

// SetBDiscussionconfigurationDeleteallowed sets field value
func (o *CustomDiscussionconfigurationResponse) SetBDiscussionconfigurationDeleteallowed(v bool) {
	o.BDiscussionconfigurationDeleteallowed = v
}

// GetBDiscussionconfigurationDeletediscussionmessageallowed returns the BDiscussionconfigurationDeletediscussionmessageallowed field value
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationDeletediscussionmessageallowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionconfigurationDeletediscussionmessageallowed
}

// GetBDiscussionconfigurationDeletediscussionmessageallowedOk returns a tuple with the BDiscussionconfigurationDeletediscussionmessageallowed field value
// and a boolean to check if the value has been set.
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationDeletediscussionmessageallowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionconfigurationDeletediscussionmessageallowed, true
}

// SetBDiscussionconfigurationDeletediscussionmessageallowed sets field value
func (o *CustomDiscussionconfigurationResponse) SetBDiscussionconfigurationDeletediscussionmessageallowed(v bool) {
	o.BDiscussionconfigurationDeletediscussionmessageallowed = v
}

// GetBDiscussionconfigurationEditdiscussionmessageallowed returns the BDiscussionconfigurationEditdiscussionmessageallowed field value
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationEditdiscussionmessageallowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionconfigurationEditdiscussionmessageallowed
}

// GetBDiscussionconfigurationEditdiscussionmessageallowedOk returns a tuple with the BDiscussionconfigurationEditdiscussionmessageallowed field value
// and a boolean to check if the value has been set.
func (o *CustomDiscussionconfigurationResponse) GetBDiscussionconfigurationEditdiscussionmessageallowedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionconfigurationEditdiscussionmessageallowed, true
}

// SetBDiscussionconfigurationEditdiscussionmessageallowed sets field value
func (o *CustomDiscussionconfigurationResponse) SetBDiscussionconfigurationEditdiscussionmessageallowed(v bool) {
	o.BDiscussionconfigurationEditdiscussionmessageallowed = v
}

func (o CustomDiscussionconfigurationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomDiscussionconfigurationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bDiscussionconfigurationCompletehistorywhenadded"] = o.BDiscussionconfigurationCompletehistorywhenadded
	toSerialize["bDiscussionconfigurationCreateallowed"] = o.BDiscussionconfigurationCreateallowed
	toSerialize["bDiscussionconfigurationDeleteallowed"] = o.BDiscussionconfigurationDeleteallowed
	toSerialize["bDiscussionconfigurationDeletediscussionmessageallowed"] = o.BDiscussionconfigurationDeletediscussionmessageallowed
	toSerialize["bDiscussionconfigurationEditdiscussionmessageallowed"] = o.BDiscussionconfigurationEditdiscussionmessageallowed
	return toSerialize, nil
}

func (o *CustomDiscussionconfigurationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bDiscussionconfigurationCompletehistorywhenadded",
		"bDiscussionconfigurationCreateallowed",
		"bDiscussionconfigurationDeleteallowed",
		"bDiscussionconfigurationDeletediscussionmessageallowed",
		"bDiscussionconfigurationEditdiscussionmessageallowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomDiscussionconfigurationResponse := _CustomDiscussionconfigurationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomDiscussionconfigurationResponse)

	if err != nil {
		return err
	}

	*o = CustomDiscussionconfigurationResponse(varCustomDiscussionconfigurationResponse)

	return err
}

type NullableCustomDiscussionconfigurationResponse struct {
	value *CustomDiscussionconfigurationResponse
	isSet bool
}

func (v NullableCustomDiscussionconfigurationResponse) Get() *CustomDiscussionconfigurationResponse {
	return v.value
}

func (v *NullableCustomDiscussionconfigurationResponse) Set(val *CustomDiscussionconfigurationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDiscussionconfigurationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDiscussionconfigurationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDiscussionconfigurationResponse(val *CustomDiscussionconfigurationResponse) *NullableCustomDiscussionconfigurationResponse {
	return &NullableCustomDiscussionconfigurationResponse{value: val, isSet: true}
}

func (v NullableCustomDiscussionconfigurationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDiscussionconfigurationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


