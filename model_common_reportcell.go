/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonReportcell type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonReportcell{}

// CommonReportcell A cell in a Reportrow 
type CommonReportcell struct {
	// The number of Reportcolumns the Reportcell spans
	IReportcellColumnspan int32 `json:"iReportcellColumnspan"`
	// The number of Reportrows the Reportcell spans
	IReportcellRowspan int32 `json:"iReportcellRowspan"`
}

type _CommonReportcell CommonReportcell

// NewCommonReportcell instantiates a new CommonReportcell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonReportcell(iReportcellColumnspan int32, iReportcellRowspan int32) *CommonReportcell {
	this := CommonReportcell{}
	this.IReportcellColumnspan = iReportcellColumnspan
	this.IReportcellRowspan = iReportcellRowspan
	return &this
}

// NewCommonReportcellWithDefaults instantiates a new CommonReportcell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonReportcellWithDefaults() *CommonReportcell {
	this := CommonReportcell{}
	return &this
}

// GetIReportcellColumnspan returns the IReportcellColumnspan field value
func (o *CommonReportcell) GetIReportcellColumnspan() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IReportcellColumnspan
}

// GetIReportcellColumnspanOk returns a tuple with the IReportcellColumnspan field value
// and a boolean to check if the value has been set.
func (o *CommonReportcell) GetIReportcellColumnspanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IReportcellColumnspan, true
}

// SetIReportcellColumnspan sets field value
func (o *CommonReportcell) SetIReportcellColumnspan(v int32) {
	o.IReportcellColumnspan = v
}

// GetIReportcellRowspan returns the IReportcellRowspan field value
func (o *CommonReportcell) GetIReportcellRowspan() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IReportcellRowspan
}

// GetIReportcellRowspanOk returns a tuple with the IReportcellRowspan field value
// and a boolean to check if the value has been set.
func (o *CommonReportcell) GetIReportcellRowspanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IReportcellRowspan, true
}

// SetIReportcellRowspan sets field value
func (o *CommonReportcell) SetIReportcellRowspan(v int32) {
	o.IReportcellRowspan = v
}

func (o CommonReportcell) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonReportcell) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["iReportcellColumnspan"] = o.IReportcellColumnspan
	toSerialize["iReportcellRowspan"] = o.IReportcellRowspan
	return toSerialize, nil
}

func (o *CommonReportcell) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"iReportcellColumnspan",
		"iReportcellRowspan",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonReportcell := _CommonReportcell{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonReportcell)

	if err != nil {
		return err
	}

	*o = CommonReportcell(varCommonReportcell)

	return err
}

type NullableCommonReportcell struct {
	value *CommonReportcell
	isSet bool
}

func (v NullableCommonReportcell) Get() *CommonReportcell {
	return v.value
}

func (v *NullableCommonReportcell) Set(val *CommonReportcell) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonReportcell) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonReportcell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonReportcell(val *CommonReportcell) *NullableCommonReportcell {
	return &NullableCommonReportcell{value: val, isSet: true}
}

func (v NullableCommonReportcell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonReportcell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


