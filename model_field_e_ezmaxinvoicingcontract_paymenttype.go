/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzmaxinvoicingcontractPaymenttype The Ezmaxinvoicingcontract payment type
type FieldEEzmaxinvoicingcontractPaymenttype string

// List of Field-eEzmaxinvoicingcontractPaymenttype
const (
	CHEQUE FieldEEzmaxinvoicingcontractPaymenttype = "Cheque"
	CREDIT_CARD FieldEEzmaxinvoicingcontractPaymenttype = "CreditCard"
	DIRECT_DEBIT FieldEEzmaxinvoicingcontractPaymenttype = "DirectDebit"
)

// All allowed values of FieldEEzmaxinvoicingcontractPaymenttype enum
var AllowedFieldEEzmaxinvoicingcontractPaymenttypeEnumValues = []FieldEEzmaxinvoicingcontractPaymenttype{
	"Cheque",
	"CreditCard",
	"DirectDebit",
}

func (v *FieldEEzmaxinvoicingcontractPaymenttype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzmaxinvoicingcontractPaymenttype(value)
	for _, existing := range AllowedFieldEEzmaxinvoicingcontractPaymenttypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzmaxinvoicingcontractPaymenttype", value)
}

// NewFieldEEzmaxinvoicingcontractPaymenttypeFromValue returns a pointer to a valid FieldEEzmaxinvoicingcontractPaymenttype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzmaxinvoicingcontractPaymenttypeFromValue(v string) (*FieldEEzmaxinvoicingcontractPaymenttype, error) {
	ev := FieldEEzmaxinvoicingcontractPaymenttype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzmaxinvoicingcontractPaymenttype: valid values are %v", v, AllowedFieldEEzmaxinvoicingcontractPaymenttypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzmaxinvoicingcontractPaymenttype) IsValid() bool {
	for _, existing := range AllowedFieldEEzmaxinvoicingcontractPaymenttypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzmaxinvoicingcontractPaymenttype value
func (v FieldEEzmaxinvoicingcontractPaymenttype) Ptr() *FieldEEzmaxinvoicingcontractPaymenttype {
	return &v
}

type NullableFieldEEzmaxinvoicingcontractPaymenttype struct {
	value *FieldEEzmaxinvoicingcontractPaymenttype
	isSet bool
}

func (v NullableFieldEEzmaxinvoicingcontractPaymenttype) Get() *FieldEEzmaxinvoicingcontractPaymenttype {
	return v.value
}

func (v *NullableFieldEEzmaxinvoicingcontractPaymenttype) Set(val *FieldEEzmaxinvoicingcontractPaymenttype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzmaxinvoicingcontractPaymenttype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzmaxinvoicingcontractPaymenttype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzmaxinvoicingcontractPaymenttype(val *FieldEEzmaxinvoicingcontractPaymenttype) *NullableFieldEEzmaxinvoicingcontractPaymenttype {
	return &NullableFieldEEzmaxinvoicingcontractPaymenttype{value: val, isSet: true}
}

func (v NullableFieldEEzmaxinvoicingcontractPaymenttype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzmaxinvoicingcontractPaymenttype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

