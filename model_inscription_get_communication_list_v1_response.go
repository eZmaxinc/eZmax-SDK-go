/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InscriptionGetCommunicationListV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InscriptionGetCommunicationListV1Response{}

// InscriptionGetCommunicationListV1Response Response for GET /1/object/inscription/{pkiInscriptionID}/getCommunicationList
type InscriptionGetCommunicationListV1Response struct {
	CommonResponseGetList
	MPayload InscriptionGetCommunicationListV1ResponseMPayload `json:"mPayload"`
}

type _InscriptionGetCommunicationListV1Response InscriptionGetCommunicationListV1Response

// NewInscriptionGetCommunicationListV1Response instantiates a new InscriptionGetCommunicationListV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInscriptionGetCommunicationListV1Response(mPayload InscriptionGetCommunicationListV1ResponseMPayload, objDebugPayload CommonResponseObjDebugPayloadGetList) *InscriptionGetCommunicationListV1Response {
	this := InscriptionGetCommunicationListV1Response{}
	this.ObjDebugPayload = objDebugPayload
	this.MPayload = mPayload
	return &this
}

// NewInscriptionGetCommunicationListV1ResponseWithDefaults instantiates a new InscriptionGetCommunicationListV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInscriptionGetCommunicationListV1ResponseWithDefaults() *InscriptionGetCommunicationListV1Response {
	this := InscriptionGetCommunicationListV1Response{}
	return &this
}

// GetMPayload returns the MPayload field value
func (o *InscriptionGetCommunicationListV1Response) GetMPayload() InscriptionGetCommunicationListV1ResponseMPayload {
	if o == nil {
		var ret InscriptionGetCommunicationListV1ResponseMPayload
		return ret
	}

	return o.MPayload
}

// GetMPayloadOk returns a tuple with the MPayload field value
// and a boolean to check if the value has been set.
func (o *InscriptionGetCommunicationListV1Response) GetMPayloadOk() (*InscriptionGetCommunicationListV1ResponseMPayload, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MPayload, true
}

// SetMPayload sets field value
func (o *InscriptionGetCommunicationListV1Response) SetMPayload(v InscriptionGetCommunicationListV1ResponseMPayload) {
	o.MPayload = v
}

func (o InscriptionGetCommunicationListV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InscriptionGetCommunicationListV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mPayload"] = o.MPayload
	return toSerialize, nil
}

func (o *InscriptionGetCommunicationListV1Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mPayload",
		"objDebugPayload",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInscriptionGetCommunicationListV1Response := _InscriptionGetCommunicationListV1Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInscriptionGetCommunicationListV1Response)

	if err != nil {
		return err
	}

	*o = InscriptionGetCommunicationListV1Response(varInscriptionGetCommunicationListV1Response)

	return err
}

type NullableInscriptionGetCommunicationListV1Response struct {
	value *InscriptionGetCommunicationListV1Response
	isSet bool
}

func (v NullableInscriptionGetCommunicationListV1Response) Get() *InscriptionGetCommunicationListV1Response {
	return v.value
}

func (v *NullableInscriptionGetCommunicationListV1Response) Set(val *InscriptionGetCommunicationListV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableInscriptionGetCommunicationListV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableInscriptionGetCommunicationListV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInscriptionGetCommunicationListV1Response(val *InscriptionGetCommunicationListV1Response) *NullableInscriptionGetCommunicationListV1Response {
	return &NullableInscriptionGetCommunicationListV1Response{value: val, isSet: true}
}

func (v NullableInscriptionGetCommunicationListV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInscriptionGetCommunicationListV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


