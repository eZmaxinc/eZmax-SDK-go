/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAutocompleteElementResponse{}

// UserAutocompleteElementResponse A User AutocompleteElement Response
type UserAutocompleteElementResponse struct {
	EUserType FieldEUserType `json:"eUserType"`
	// The description of the User in the language of the requester
	SUserName string `json:"sUserName"`
	// The unique ID of the User
	PkiUserID int32 `json:"pkiUserID"`
	// Whether the User is active or not
	BUserIsactive bool `json:"bUserIsactive"`
}

type _UserAutocompleteElementResponse UserAutocompleteElementResponse

// NewUserAutocompleteElementResponse instantiates a new UserAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAutocompleteElementResponse(eUserType FieldEUserType, sUserName string, pkiUserID int32, bUserIsactive bool) *UserAutocompleteElementResponse {
	this := UserAutocompleteElementResponse{}
	this.EUserType = eUserType
	this.SUserName = sUserName
	this.PkiUserID = pkiUserID
	this.BUserIsactive = bUserIsactive
	return &this
}

// NewUserAutocompleteElementResponseWithDefaults instantiates a new UserAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAutocompleteElementResponseWithDefaults() *UserAutocompleteElementResponse {
	this := UserAutocompleteElementResponse{}
	return &this
}

// GetEUserType returns the EUserType field value
func (o *UserAutocompleteElementResponse) GetEUserType() FieldEUserType {
	if o == nil {
		var ret FieldEUserType
		return ret
	}

	return o.EUserType
}

// GetEUserTypeOk returns a tuple with the EUserType field value
// and a boolean to check if the value has been set.
func (o *UserAutocompleteElementResponse) GetEUserTypeOk() (*FieldEUserType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EUserType, true
}

// SetEUserType sets field value
func (o *UserAutocompleteElementResponse) SetEUserType(v FieldEUserType) {
	o.EUserType = v
}

// GetSUserName returns the SUserName field value
func (o *UserAutocompleteElementResponse) GetSUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserName
}

// GetSUserNameOk returns a tuple with the SUserName field value
// and a boolean to check if the value has been set.
func (o *UserAutocompleteElementResponse) GetSUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserName, true
}

// SetSUserName sets field value
func (o *UserAutocompleteElementResponse) SetSUserName(v string) {
	o.SUserName = v
}

// GetPkiUserID returns the PkiUserID field value
func (o *UserAutocompleteElementResponse) GetPkiUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiUserID
}

// GetPkiUserIDOk returns a tuple with the PkiUserID field value
// and a boolean to check if the value has been set.
func (o *UserAutocompleteElementResponse) GetPkiUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiUserID, true
}

// SetPkiUserID sets field value
func (o *UserAutocompleteElementResponse) SetPkiUserID(v int32) {
	o.PkiUserID = v
}

// GetBUserIsactive returns the BUserIsactive field value
func (o *UserAutocompleteElementResponse) GetBUserIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BUserIsactive
}

// GetBUserIsactiveOk returns a tuple with the BUserIsactive field value
// and a boolean to check if the value has been set.
func (o *UserAutocompleteElementResponse) GetBUserIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BUserIsactive, true
}

// SetBUserIsactive sets field value
func (o *UserAutocompleteElementResponse) SetBUserIsactive(v bool) {
	o.BUserIsactive = v
}

func (o UserAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eUserType"] = o.EUserType
	toSerialize["sUserName"] = o.SUserName
	toSerialize["pkiUserID"] = o.PkiUserID
	toSerialize["bUserIsactive"] = o.BUserIsactive
	return toSerialize, nil
}

func (o *UserAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eUserType",
		"sUserName",
		"pkiUserID",
		"bUserIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAutocompleteElementResponse := _UserAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = UserAutocompleteElementResponse(varUserAutocompleteElementResponse)

	return err
}

type NullableUserAutocompleteElementResponse struct {
	value *UserAutocompleteElementResponse
	isSet bool
}

func (v NullableUserAutocompleteElementResponse) Get() *UserAutocompleteElementResponse {
	return v.value
}

func (v *NullableUserAutocompleteElementResponse) Set(val *UserAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAutocompleteElementResponse(val *UserAutocompleteElementResponse) *NullableUserAutocompleteElementResponse {
	return &NullableUserAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableUserAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


