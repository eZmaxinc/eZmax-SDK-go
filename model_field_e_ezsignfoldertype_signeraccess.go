/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfoldertypeSigneraccess Indicates which documents the user has access to.
type FieldEEzsignfoldertypeSigneraccess string

// List of Field-eEzsignfoldertypeSigneraccess
const (
	NO FieldEEzsignfoldertypeSigneraccess = "No"
	SIGNER_DOCUMENTS FieldEEzsignfoldertypeSigneraccess = "SignerDocuments"
	ALL_DOCUMENTS FieldEEzsignfoldertypeSigneraccess = "AllDocuments"
)

// All allowed values of FieldEEzsignfoldertypeSigneraccess enum
var AllowedFieldEEzsignfoldertypeSigneraccessEnumValues = []FieldEEzsignfoldertypeSigneraccess{
	"No",
	"SignerDocuments",
	"AllDocuments",
}

func (v *FieldEEzsignfoldertypeSigneraccess) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfoldertypeSigneraccess(value)
	for _, existing := range AllowedFieldEEzsignfoldertypeSigneraccessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfoldertypeSigneraccess", value)
}

// NewFieldEEzsignfoldertypeSigneraccessFromValue returns a pointer to a valid FieldEEzsignfoldertypeSigneraccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfoldertypeSigneraccessFromValue(v string) (*FieldEEzsignfoldertypeSigneraccess, error) {
	ev := FieldEEzsignfoldertypeSigneraccess(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfoldertypeSigneraccess: valid values are %v", v, AllowedFieldEEzsignfoldertypeSigneraccessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfoldertypeSigneraccess) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfoldertypeSigneraccessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfoldertypeSigneraccess value
func (v FieldEEzsignfoldertypeSigneraccess) Ptr() *FieldEEzsignfoldertypeSigneraccess {
	return &v
}

type NullableFieldEEzsignfoldertypeSigneraccess struct {
	value *FieldEEzsignfoldertypeSigneraccess
	isSet bool
}

func (v NullableFieldEEzsignfoldertypeSigneraccess) Get() *FieldEEzsignfoldertypeSigneraccess {
	return v.value
}

func (v *NullableFieldEEzsignfoldertypeSigneraccess) Set(val *FieldEEzsignfoldertypeSigneraccess) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfoldertypeSigneraccess) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfoldertypeSigneraccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfoldertypeSigneraccess(val *FieldEEzsignfoldertypeSigneraccess) *NullableFieldEEzsignfoldertypeSigneraccess {
	return &NullableFieldEEzsignfoldertypeSigneraccess{value: val, isSet: true}
}

func (v NullableFieldEEzsignfoldertypeSigneraccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfoldertypeSigneraccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

