/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignsignatureTooltipposition The location of the tooltip relative to the Ezsignsignature's location.
type FieldEEzsignsignatureTooltipposition string

// List of Field-eEzsignsignatureTooltipposition
const (
	TOP_LEFT FieldEEzsignsignatureTooltipposition = "TopLeft"
	TOP_CENTER FieldEEzsignsignatureTooltipposition = "TopCenter"
	TOP_RIGHT FieldEEzsignsignatureTooltipposition = "TopRight"
	MIDDLE_LEFT FieldEEzsignsignatureTooltipposition = "MiddleLeft"
	MIDDLE_RIGHT FieldEEzsignsignatureTooltipposition = "MiddleRight"
	BOTTOM_LEFT FieldEEzsignsignatureTooltipposition = "BottomLeft"
	BOTTOM_CENTER FieldEEzsignsignatureTooltipposition = "BottomCenter"
	BOTTOM_RIGHT FieldEEzsignsignatureTooltipposition = "BottomRight"
)

// All allowed values of FieldEEzsignsignatureTooltipposition enum
var AllowedFieldEEzsignsignatureTooltippositionEnumValues = []FieldEEzsignsignatureTooltipposition{
	"TopLeft",
	"TopCenter",
	"TopRight",
	"MiddleLeft",
	"MiddleRight",
	"BottomLeft",
	"BottomCenter",
	"BottomRight",
}

func (v *FieldEEzsignsignatureTooltipposition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignsignatureTooltipposition(value)
	for _, existing := range AllowedFieldEEzsignsignatureTooltippositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignsignatureTooltipposition", value)
}

// NewFieldEEzsignsignatureTooltippositionFromValue returns a pointer to a valid FieldEEzsignsignatureTooltipposition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignsignatureTooltippositionFromValue(v string) (*FieldEEzsignsignatureTooltipposition, error) {
	ev := FieldEEzsignsignatureTooltipposition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignsignatureTooltipposition: valid values are %v", v, AllowedFieldEEzsignsignatureTooltippositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignsignatureTooltipposition) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignsignatureTooltippositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignsignatureTooltipposition value
func (v FieldEEzsignsignatureTooltipposition) Ptr() *FieldEEzsignsignatureTooltipposition {
	return &v
}

type NullableFieldEEzsignsignatureTooltipposition struct {
	value *FieldEEzsignsignatureTooltipposition
	isSet bool
}

func (v NullableFieldEEzsignsignatureTooltipposition) Get() *FieldEEzsignsignatureTooltipposition {
	return v.value
}

func (v *NullableFieldEEzsignsignatureTooltipposition) Set(val *FieldEEzsignsignatureTooltipposition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignsignatureTooltipposition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignsignatureTooltipposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignsignatureTooltipposition(val *FieldEEzsignsignatureTooltipposition) *NullableFieldEEzsignsignatureTooltipposition {
	return &NullableFieldEEzsignsignatureTooltipposition{value: val, isSet: true}
}

func (v NullableFieldEEzsignsignatureTooltipposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignsignatureTooltipposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

