/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatedocumentpagerecognitionOperator The operator of the Ezsigntemplatedocumentpagerecognition
type FieldEEzsigntemplatedocumentpagerecognitionOperator string

// List of Field-eEzsigntemplatedocumentpagerecognitionOperator
const (
	EQ FieldEEzsigntemplatedocumentpagerecognitionOperator = "eq"
	IN FieldEEzsigntemplatedocumentpagerecognitionOperator = "in"
	SIMILAR FieldEEzsigntemplatedocumentpagerecognitionOperator = "similar"
)

// All allowed values of FieldEEzsigntemplatedocumentpagerecognitionOperator enum
var AllowedFieldEEzsigntemplatedocumentpagerecognitionOperatorEnumValues = []FieldEEzsigntemplatedocumentpagerecognitionOperator{
	"eq",
	"in",
	"similar",
}

func (v *FieldEEzsigntemplatedocumentpagerecognitionOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatedocumentpagerecognitionOperator(value)
	for _, existing := range AllowedFieldEEzsigntemplatedocumentpagerecognitionOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatedocumentpagerecognitionOperator", value)
}

// NewFieldEEzsigntemplatedocumentpagerecognitionOperatorFromValue returns a pointer to a valid FieldEEzsigntemplatedocumentpagerecognitionOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatedocumentpagerecognitionOperatorFromValue(v string) (*FieldEEzsigntemplatedocumentpagerecognitionOperator, error) {
	ev := FieldEEzsigntemplatedocumentpagerecognitionOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatedocumentpagerecognitionOperator: valid values are %v", v, AllowedFieldEEzsigntemplatedocumentpagerecognitionOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatedocumentpagerecognitionOperator) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatedocumentpagerecognitionOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatedocumentpagerecognitionOperator value
func (v FieldEEzsigntemplatedocumentpagerecognitionOperator) Ptr() *FieldEEzsigntemplatedocumentpagerecognitionOperator {
	return &v
}

type NullableFieldEEzsigntemplatedocumentpagerecognitionOperator struct {
	value *FieldEEzsigntemplatedocumentpagerecognitionOperator
	isSet bool
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) Get() *FieldEEzsigntemplatedocumentpagerecognitionOperator {
	return v.value
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) Set(val *FieldEEzsigntemplatedocumentpagerecognitionOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatedocumentpagerecognitionOperator(val *FieldEEzsigntemplatedocumentpagerecognitionOperator) *NullableFieldEEzsigntemplatedocumentpagerecognitionOperator {
	return &NullableFieldEEzsigntemplatedocumentpagerecognitionOperator{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

