/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiscussionResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscussionResponseCompound{}

// DiscussionResponseCompound A Discussion Object
type DiscussionResponseCompound struct {
	// The unique ID of the Discussion
	PkiDiscussionID int32 `json:"pkiDiscussionID"`
	// The description of the Discussion
	SDiscussionDescription string `json:"sDiscussionDescription" validate:"regexp=^.{0,75}$"`
	// Whether if it's an closed
	BDiscussionClosed bool `json:"bDiscussionClosed"`
	// The date the Discussion was last read
	DtDiscussionLastread *string `json:"dtDiscussionLastread,omitempty"`
	// The count of Attachment.
	IDiscussionmessageCount int32 `json:"iDiscussionmessageCount"`
	// The count of Attachment.
	IDiscussionmessageCountunread int32 `json:"iDiscussionmessageCountunread"`
	ObjDiscussionconfiguration *CustomDiscussionconfigurationResponse `json:"objDiscussionconfiguration,omitempty"`
	AObjDiscussionmembership []DiscussionmembershipResponseCompound `json:"a_objDiscussionmembership"`
	AObjDiscussionmessage []DiscussionmessageResponseCompound `json:"a_objDiscussionmessage"`
}

type _DiscussionResponseCompound DiscussionResponseCompound

// NewDiscussionResponseCompound instantiates a new DiscussionResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscussionResponseCompound(pkiDiscussionID int32, sDiscussionDescription string, bDiscussionClosed bool, iDiscussionmessageCount int32, iDiscussionmessageCountunread int32, aObjDiscussionmembership []DiscussionmembershipResponseCompound, aObjDiscussionmessage []DiscussionmessageResponseCompound) *DiscussionResponseCompound {
	this := DiscussionResponseCompound{}
	this.PkiDiscussionID = pkiDiscussionID
	this.SDiscussionDescription = sDiscussionDescription
	this.BDiscussionClosed = bDiscussionClosed
	this.IDiscussionmessageCount = iDiscussionmessageCount
	this.IDiscussionmessageCountunread = iDiscussionmessageCountunread
	this.AObjDiscussionmembership = aObjDiscussionmembership
	this.AObjDiscussionmessage = aObjDiscussionmessage
	return &this
}

// NewDiscussionResponseCompoundWithDefaults instantiates a new DiscussionResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscussionResponseCompoundWithDefaults() *DiscussionResponseCompound {
	this := DiscussionResponseCompound{}
	return &this
}

// GetPkiDiscussionID returns the PkiDiscussionID field value
func (o *DiscussionResponseCompound) GetPkiDiscussionID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiDiscussionID
}

// GetPkiDiscussionIDOk returns a tuple with the PkiDiscussionID field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetPkiDiscussionIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiDiscussionID, true
}

// SetPkiDiscussionID sets field value
func (o *DiscussionResponseCompound) SetPkiDiscussionID(v int32) {
	o.PkiDiscussionID = v
}

// GetSDiscussionDescription returns the SDiscussionDescription field value
func (o *DiscussionResponseCompound) GetSDiscussionDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDiscussionDescription
}

// GetSDiscussionDescriptionOk returns a tuple with the SDiscussionDescription field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetSDiscussionDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDiscussionDescription, true
}

// SetSDiscussionDescription sets field value
func (o *DiscussionResponseCompound) SetSDiscussionDescription(v string) {
	o.SDiscussionDescription = v
}

// GetBDiscussionClosed returns the BDiscussionClosed field value
func (o *DiscussionResponseCompound) GetBDiscussionClosed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDiscussionClosed
}

// GetBDiscussionClosedOk returns a tuple with the BDiscussionClosed field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetBDiscussionClosedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDiscussionClosed, true
}

// SetBDiscussionClosed sets field value
func (o *DiscussionResponseCompound) SetBDiscussionClosed(v bool) {
	o.BDiscussionClosed = v
}

// GetDtDiscussionLastread returns the DtDiscussionLastread field value if set, zero value otherwise.
func (o *DiscussionResponseCompound) GetDtDiscussionLastread() string {
	if o == nil || IsNil(o.DtDiscussionLastread) {
		var ret string
		return ret
	}
	return *o.DtDiscussionLastread
}

// GetDtDiscussionLastreadOk returns a tuple with the DtDiscussionLastread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetDtDiscussionLastreadOk() (*string, bool) {
	if o == nil || IsNil(o.DtDiscussionLastread) {
		return nil, false
	}
	return o.DtDiscussionLastread, true
}

// HasDtDiscussionLastread returns a boolean if a field has been set.
func (o *DiscussionResponseCompound) HasDtDiscussionLastread() bool {
	if o != nil && !IsNil(o.DtDiscussionLastread) {
		return true
	}

	return false
}

// SetDtDiscussionLastread gets a reference to the given string and assigns it to the DtDiscussionLastread field.
func (o *DiscussionResponseCompound) SetDtDiscussionLastread(v string) {
	o.DtDiscussionLastread = &v
}

// GetIDiscussionmessageCount returns the IDiscussionmessageCount field value
func (o *DiscussionResponseCompound) GetIDiscussionmessageCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IDiscussionmessageCount
}

// GetIDiscussionmessageCountOk returns a tuple with the IDiscussionmessageCount field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetIDiscussionmessageCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IDiscussionmessageCount, true
}

// SetIDiscussionmessageCount sets field value
func (o *DiscussionResponseCompound) SetIDiscussionmessageCount(v int32) {
	o.IDiscussionmessageCount = v
}

// GetIDiscussionmessageCountunread returns the IDiscussionmessageCountunread field value
func (o *DiscussionResponseCompound) GetIDiscussionmessageCountunread() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IDiscussionmessageCountunread
}

// GetIDiscussionmessageCountunreadOk returns a tuple with the IDiscussionmessageCountunread field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetIDiscussionmessageCountunreadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IDiscussionmessageCountunread, true
}

// SetIDiscussionmessageCountunread sets field value
func (o *DiscussionResponseCompound) SetIDiscussionmessageCountunread(v int32) {
	o.IDiscussionmessageCountunread = v
}

// GetObjDiscussionconfiguration returns the ObjDiscussionconfiguration field value if set, zero value otherwise.
func (o *DiscussionResponseCompound) GetObjDiscussionconfiguration() CustomDiscussionconfigurationResponse {
	if o == nil || IsNil(o.ObjDiscussionconfiguration) {
		var ret CustomDiscussionconfigurationResponse
		return ret
	}
	return *o.ObjDiscussionconfiguration
}

// GetObjDiscussionconfigurationOk returns a tuple with the ObjDiscussionconfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetObjDiscussionconfigurationOk() (*CustomDiscussionconfigurationResponse, bool) {
	if o == nil || IsNil(o.ObjDiscussionconfiguration) {
		return nil, false
	}
	return o.ObjDiscussionconfiguration, true
}

// HasObjDiscussionconfiguration returns a boolean if a field has been set.
func (o *DiscussionResponseCompound) HasObjDiscussionconfiguration() bool {
	if o != nil && !IsNil(o.ObjDiscussionconfiguration) {
		return true
	}

	return false
}

// SetObjDiscussionconfiguration gets a reference to the given CustomDiscussionconfigurationResponse and assigns it to the ObjDiscussionconfiguration field.
func (o *DiscussionResponseCompound) SetObjDiscussionconfiguration(v CustomDiscussionconfigurationResponse) {
	o.ObjDiscussionconfiguration = &v
}

// GetAObjDiscussionmembership returns the AObjDiscussionmembership field value
func (o *DiscussionResponseCompound) GetAObjDiscussionmembership() []DiscussionmembershipResponseCompound {
	if o == nil {
		var ret []DiscussionmembershipResponseCompound
		return ret
	}

	return o.AObjDiscussionmembership
}

// GetAObjDiscussionmembershipOk returns a tuple with the AObjDiscussionmembership field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetAObjDiscussionmembershipOk() ([]DiscussionmembershipResponseCompound, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjDiscussionmembership, true
}

// SetAObjDiscussionmembership sets field value
func (o *DiscussionResponseCompound) SetAObjDiscussionmembership(v []DiscussionmembershipResponseCompound) {
	o.AObjDiscussionmembership = v
}

// GetAObjDiscussionmessage returns the AObjDiscussionmessage field value
func (o *DiscussionResponseCompound) GetAObjDiscussionmessage() []DiscussionmessageResponseCompound {
	if o == nil {
		var ret []DiscussionmessageResponseCompound
		return ret
	}

	return o.AObjDiscussionmessage
}

// GetAObjDiscussionmessageOk returns a tuple with the AObjDiscussionmessage field value
// and a boolean to check if the value has been set.
func (o *DiscussionResponseCompound) GetAObjDiscussionmessageOk() ([]DiscussionmessageResponseCompound, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjDiscussionmessage, true
}

// SetAObjDiscussionmessage sets field value
func (o *DiscussionResponseCompound) SetAObjDiscussionmessage(v []DiscussionmessageResponseCompound) {
	o.AObjDiscussionmessage = v
}

func (o DiscussionResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscussionResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiDiscussionID"] = o.PkiDiscussionID
	toSerialize["sDiscussionDescription"] = o.SDiscussionDescription
	toSerialize["bDiscussionClosed"] = o.BDiscussionClosed
	if !IsNil(o.DtDiscussionLastread) {
		toSerialize["dtDiscussionLastread"] = o.DtDiscussionLastread
	}
	toSerialize["iDiscussionmessageCount"] = o.IDiscussionmessageCount
	toSerialize["iDiscussionmessageCountunread"] = o.IDiscussionmessageCountunread
	if !IsNil(o.ObjDiscussionconfiguration) {
		toSerialize["objDiscussionconfiguration"] = o.ObjDiscussionconfiguration
	}
	toSerialize["a_objDiscussionmembership"] = o.AObjDiscussionmembership
	toSerialize["a_objDiscussionmessage"] = o.AObjDiscussionmessage
	return toSerialize, nil
}

func (o *DiscussionResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiDiscussionID",
		"sDiscussionDescription",
		"bDiscussionClosed",
		"iDiscussionmessageCount",
		"iDiscussionmessageCountunread",
		"a_objDiscussionmembership",
		"a_objDiscussionmessage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscussionResponseCompound := _DiscussionResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscussionResponseCompound)

	if err != nil {
		return err
	}

	*o = DiscussionResponseCompound(varDiscussionResponseCompound)

	return err
}

type NullableDiscussionResponseCompound struct {
	value *DiscussionResponseCompound
	isSet bool
}

func (v NullableDiscussionResponseCompound) Get() *DiscussionResponseCompound {
	return v.value
}

func (v *NullableDiscussionResponseCompound) Set(val *DiscussionResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscussionResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscussionResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscussionResponseCompound(val *DiscussionResponseCompound) *NullableDiscussionResponseCompound {
	return &NullableDiscussionResponseCompound{value: val, isSet: true}
}

func (v NullableDiscussionResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscussionResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


