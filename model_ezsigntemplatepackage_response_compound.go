/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsigntemplatepackageResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsigntemplatepackageResponseCompound{}

// EzsigntemplatepackageResponseCompound A Ezsigntemplatepackage Object
type EzsigntemplatepackageResponseCompound struct {
	EzsigntemplatepackageResponse
	AObjEzsigntemplatepackagesigner []EzsigntemplatepackagesignerResponseCompound `json:"a_objEzsigntemplatepackagesigner"`
	AObjEzsigntemplatepackagemembership []EzsigntemplatepackagemembershipResponseCompound `json:"a_objEzsigntemplatepackagemembership"`
}

type _EzsigntemplatepackageResponseCompound EzsigntemplatepackageResponseCompound

// NewEzsigntemplatepackageResponseCompound instantiates a new EzsigntemplatepackageResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigntemplatepackageResponseCompound(aObjEzsigntemplatepackagesigner []EzsigntemplatepackagesignerResponseCompound, aObjEzsigntemplatepackagemembership []EzsigntemplatepackagemembershipResponseCompound, pkiEzsigntemplatepackageID int32, fkiEzsignfoldertypeID int32, fkiLanguageID int32, sLanguageNameX string, sEzsigntemplatepackageDescription string, bEzsigntemplatepackageAdminonly bool, bEzsigntemplatepackageNeedvalidation bool, bEzsigntemplatepackageIsactive bool, sEzsignfoldertypeNameX string, bEzsigntemplatepackageEditallowed bool) *EzsigntemplatepackageResponseCompound {
	this := EzsigntemplatepackageResponseCompound{}
	this.PkiEzsigntemplatepackageID = pkiEzsigntemplatepackageID
	this.FkiEzsignfoldertypeID = fkiEzsignfoldertypeID
	this.FkiLanguageID = fkiLanguageID
	this.SLanguageNameX = sLanguageNameX
	this.SEzsigntemplatepackageDescription = sEzsigntemplatepackageDescription
	this.BEzsigntemplatepackageAdminonly = bEzsigntemplatepackageAdminonly
	this.BEzsigntemplatepackageNeedvalidation = bEzsigntemplatepackageNeedvalidation
	this.BEzsigntemplatepackageIsactive = bEzsigntemplatepackageIsactive
	this.SEzsignfoldertypeNameX = sEzsignfoldertypeNameX
	this.BEzsigntemplatepackageEditallowed = bEzsigntemplatepackageEditallowed
	this.AObjEzsigntemplatepackagesigner = aObjEzsigntemplatepackagesigner
	this.AObjEzsigntemplatepackagemembership = aObjEzsigntemplatepackagemembership
	return &this
}

// NewEzsigntemplatepackageResponseCompoundWithDefaults instantiates a new EzsigntemplatepackageResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigntemplatepackageResponseCompoundWithDefaults() *EzsigntemplatepackageResponseCompound {
	this := EzsigntemplatepackageResponseCompound{}
	return &this
}

// GetAObjEzsigntemplatepackagesigner returns the AObjEzsigntemplatepackagesigner field value
func (o *EzsigntemplatepackageResponseCompound) GetAObjEzsigntemplatepackagesigner() []EzsigntemplatepackagesignerResponseCompound {
	if o == nil {
		var ret []EzsigntemplatepackagesignerResponseCompound
		return ret
	}

	return o.AObjEzsigntemplatepackagesigner
}

// GetAObjEzsigntemplatepackagesignerOk returns a tuple with the AObjEzsigntemplatepackagesigner field value
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepackageResponseCompound) GetAObjEzsigntemplatepackagesignerOk() ([]EzsigntemplatepackagesignerResponseCompound, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjEzsigntemplatepackagesigner, true
}

// SetAObjEzsigntemplatepackagesigner sets field value
func (o *EzsigntemplatepackageResponseCompound) SetAObjEzsigntemplatepackagesigner(v []EzsigntemplatepackagesignerResponseCompound) {
	o.AObjEzsigntemplatepackagesigner = v
}

// GetAObjEzsigntemplatepackagemembership returns the AObjEzsigntemplatepackagemembership field value
func (o *EzsigntemplatepackageResponseCompound) GetAObjEzsigntemplatepackagemembership() []EzsigntemplatepackagemembershipResponseCompound {
	if o == nil {
		var ret []EzsigntemplatepackagemembershipResponseCompound
		return ret
	}

	return o.AObjEzsigntemplatepackagemembership
}

// GetAObjEzsigntemplatepackagemembershipOk returns a tuple with the AObjEzsigntemplatepackagemembership field value
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepackageResponseCompound) GetAObjEzsigntemplatepackagemembershipOk() ([]EzsigntemplatepackagemembershipResponseCompound, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjEzsigntemplatepackagemembership, true
}

// SetAObjEzsigntemplatepackagemembership sets field value
func (o *EzsigntemplatepackageResponseCompound) SetAObjEzsigntemplatepackagemembership(v []EzsigntemplatepackagemembershipResponseCompound) {
	o.AObjEzsigntemplatepackagemembership = v
}

func (o EzsigntemplatepackageResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsigntemplatepackageResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["a_objEzsigntemplatepackagesigner"] = o.AObjEzsigntemplatepackagesigner
	toSerialize["a_objEzsigntemplatepackagemembership"] = o.AObjEzsigntemplatepackagemembership
	return toSerialize, nil
}

func (o *EzsigntemplatepackageResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"a_objEzsigntemplatepackagesigner",
		"a_objEzsigntemplatepackagemembership",
		"pkiEzsigntemplatepackageID",
		"fkiEzsignfoldertypeID",
		"fkiLanguageID",
		"sLanguageNameX",
		"sEzsigntemplatepackageDescription",
		"bEzsigntemplatepackageAdminonly",
		"bEzsigntemplatepackageNeedvalidation",
		"bEzsigntemplatepackageIsactive",
		"sEzsignfoldertypeNameX",
		"bEzsigntemplatepackageEditallowed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsigntemplatepackageResponseCompound := _EzsigntemplatepackageResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsigntemplatepackageResponseCompound)

	if err != nil {
		return err
	}

	*o = EzsigntemplatepackageResponseCompound(varEzsigntemplatepackageResponseCompound)

	return err
}

type NullableEzsigntemplatepackageResponseCompound struct {
	value *EzsigntemplatepackageResponseCompound
	isSet bool
}

func (v NullableEzsigntemplatepackageResponseCompound) Get() *EzsigntemplatepackageResponseCompound {
	return v.value
}

func (v *NullableEzsigntemplatepackageResponseCompound) Set(val *EzsigntemplatepackageResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigntemplatepackageResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigntemplatepackageResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigntemplatepackageResponseCompound(val *EzsigntemplatepackageResponseCompound) *NullableEzsigntemplatepackageResponseCompound {
	return &NullableEzsigntemplatepackageResponseCompound{value: val, isSet: true}
}

func (v NullableEzsigntemplatepackageResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigntemplatepackageResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


