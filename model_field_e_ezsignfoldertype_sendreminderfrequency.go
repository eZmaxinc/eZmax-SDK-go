/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfoldertypeSendreminderfrequency Frequency at which reminders will be sent to signers that haven't signed the documents
type FieldEEzsignfoldertypeSendreminderfrequency string

// List of Field-eEzsignfoldertypeSendreminderfrequency
const (
	NONE FieldEEzsignfoldertypeSendreminderfrequency = "None"
	DAILY FieldEEzsignfoldertypeSendreminderfrequency = "Daily"
	WEEKLY FieldEEzsignfoldertypeSendreminderfrequency = "Weekly"
)

// All allowed values of FieldEEzsignfoldertypeSendreminderfrequency enum
var AllowedFieldEEzsignfoldertypeSendreminderfrequencyEnumValues = []FieldEEzsignfoldertypeSendreminderfrequency{
	"None",
	"Daily",
	"Weekly",
}

func (v *FieldEEzsignfoldertypeSendreminderfrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfoldertypeSendreminderfrequency(value)
	for _, existing := range AllowedFieldEEzsignfoldertypeSendreminderfrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfoldertypeSendreminderfrequency", value)
}

// NewFieldEEzsignfoldertypeSendreminderfrequencyFromValue returns a pointer to a valid FieldEEzsignfoldertypeSendreminderfrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfoldertypeSendreminderfrequencyFromValue(v string) (*FieldEEzsignfoldertypeSendreminderfrequency, error) {
	ev := FieldEEzsignfoldertypeSendreminderfrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfoldertypeSendreminderfrequency: valid values are %v", v, AllowedFieldEEzsignfoldertypeSendreminderfrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfoldertypeSendreminderfrequency) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfoldertypeSendreminderfrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfoldertypeSendreminderfrequency value
func (v FieldEEzsignfoldertypeSendreminderfrequency) Ptr() *FieldEEzsignfoldertypeSendreminderfrequency {
	return &v
}

type NullableFieldEEzsignfoldertypeSendreminderfrequency struct {
	value *FieldEEzsignfoldertypeSendreminderfrequency
	isSet bool
}

func (v NullableFieldEEzsignfoldertypeSendreminderfrequency) Get() *FieldEEzsignfoldertypeSendreminderfrequency {
	return v.value
}

func (v *NullableFieldEEzsignfoldertypeSendreminderfrequency) Set(val *FieldEEzsignfoldertypeSendreminderfrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfoldertypeSendreminderfrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfoldertypeSendreminderfrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfoldertypeSendreminderfrequency(val *FieldEEzsignfoldertypeSendreminderfrequency) *NullableFieldEEzsignfoldertypeSendreminderfrequency {
	return &NullableFieldEEzsignfoldertypeSendreminderfrequency{value: val, isSet: true}
}

func (v NullableFieldEEzsignfoldertypeSendreminderfrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfoldertypeSendreminderfrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

