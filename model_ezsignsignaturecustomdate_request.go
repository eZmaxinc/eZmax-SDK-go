/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignsignaturecustomdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignsignaturecustomdateRequest{}

// EzsignsignaturecustomdateRequest An Ezsignsignaturecustomdate Object
type EzsignsignaturecustomdateRequest struct {
	// The unique ID of the Ezsignsignaturecustomdate
	PkiEzsignsignaturecustomdateID *int32 `json:"pkiEzsignsignaturecustomdateID,omitempty"`
	// The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
	IEzsignsignaturecustomdateX *int32 `json:"iEzsignsignaturecustomdateX,omitempty"`
	// The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
	IEzsignsignaturecustomdateY *int32 `json:"iEzsignsignaturecustomdateY,omitempty"`
	// The X coordinate (Horizontal) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 2 inches from the left of the signature, you would use \"200\" for the X coordinate.
	IEzsignsignaturecustomdateOffsetx *int32 `json:"iEzsignsignaturecustomdateOffsetx,omitempty"`
	// The Y coordinate (Vertical) where to put the Ezsignsignaturecustomdate on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignaturecustomdate block 3 inches from the top of the signature, you would use \"300\" for the Y coordinate.
	IEzsignsignaturecustomdateOffsety *int32 `json:"iEzsignsignaturecustomdateOffsety,omitempty"`
	// The custom date format to use  You can use the codes below and they will be replaced at signature time. Text values like month and day names will be rendered in the proper language. Other text will be left as-is.  The codes examples below are based on the following datetime: Thursday, January 6, 2022 at 08:07:09 EST  For example, the format \"Signature date: {MM}/{DD}/{YYYY} {hh}:{mm}\" would become \"Signature date: 01/06/2022 08:07\"  **Year**  | Code | Example | | - | - | | {YYYY} | 2022 | | {YY} | 22 |  **Month**  | Code | Example | | - | - | | {MonthCapitalize} | Janvier | | {Month} | janvier | | {MM} | 01 | | {M} | 1 |  **Day**  | Code | Example | | - | - | | {DayCapitalize} | Jeudi | | {Day} | jeudi | | {DD} | 06 | | {D} | 6 |  **Hour**  | Code | Example | | - | - | | {hh} | 08 |  **Minute**  | Code | Example | | - | - | | {mm} | 07 |  **Second**  | Code | Example | | - | - | | {ss} | 09 |        **Timezone**  | Code | Example | | - | - | | {Z} | EST |       **Time**  | Code | Example | | - | - | | {Time} | 08:07:09 |   | {TimeZ} | 08:07:09 EST |     **Date**  | Code | Example | | - | - | | {Date} | 2022-01-06 |   | {DateText} | 1er Janvier 2022 |  **Full**  | Code | Example | | - | - | | {DateTime} | 2022-01-06 08:07:09 |   | {DateTimeZ} | 2022-01-06 08:07:09 EST | 
	SEzsignsignaturecustomdateFormat string `json:"sEzsignsignaturecustomdateFormat"`
}

type _EzsignsignaturecustomdateRequest EzsignsignaturecustomdateRequest

// NewEzsignsignaturecustomdateRequest instantiates a new EzsignsignaturecustomdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignsignaturecustomdateRequest(sEzsignsignaturecustomdateFormat string) *EzsignsignaturecustomdateRequest {
	this := EzsignsignaturecustomdateRequest{}
	this.SEzsignsignaturecustomdateFormat = sEzsignsignaturecustomdateFormat
	return &this
}

// NewEzsignsignaturecustomdateRequestWithDefaults instantiates a new EzsignsignaturecustomdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignsignaturecustomdateRequestWithDefaults() *EzsignsignaturecustomdateRequest {
	this := EzsignsignaturecustomdateRequest{}
	return &this
}

// GetPkiEzsignsignaturecustomdateID returns the PkiEzsignsignaturecustomdateID field value if set, zero value otherwise.
func (o *EzsignsignaturecustomdateRequest) GetPkiEzsignsignaturecustomdateID() int32 {
	if o == nil || IsNil(o.PkiEzsignsignaturecustomdateID) {
		var ret int32
		return ret
	}
	return *o.PkiEzsignsignaturecustomdateID
}

// GetPkiEzsignsignaturecustomdateIDOk returns a tuple with the PkiEzsignsignaturecustomdateID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetPkiEzsignsignaturecustomdateIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiEzsignsignaturecustomdateID) {
		return nil, false
	}
	return o.PkiEzsignsignaturecustomdateID, true
}

// HasPkiEzsignsignaturecustomdateID returns a boolean if a field has been set.
func (o *EzsignsignaturecustomdateRequest) HasPkiEzsignsignaturecustomdateID() bool {
	if o != nil && !IsNil(o.PkiEzsignsignaturecustomdateID) {
		return true
	}

	return false
}

// SetPkiEzsignsignaturecustomdateID gets a reference to the given int32 and assigns it to the PkiEzsignsignaturecustomdateID field.
func (o *EzsignsignaturecustomdateRequest) SetPkiEzsignsignaturecustomdateID(v int32) {
	o.PkiEzsignsignaturecustomdateID = &v
}

// GetIEzsignsignaturecustomdateX returns the IEzsignsignaturecustomdateX field value if set, zero value otherwise.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateX() int32 {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateX) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignaturecustomdateX
}

// GetIEzsignsignaturecustomdateXOk returns a tuple with the IEzsignsignaturecustomdateX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateXOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateX) {
		return nil, false
	}
	return o.IEzsignsignaturecustomdateX, true
}

// HasIEzsignsignaturecustomdateX returns a boolean if a field has been set.
func (o *EzsignsignaturecustomdateRequest) HasIEzsignsignaturecustomdateX() bool {
	if o != nil && !IsNil(o.IEzsignsignaturecustomdateX) {
		return true
	}

	return false
}

// SetIEzsignsignaturecustomdateX gets a reference to the given int32 and assigns it to the IEzsignsignaturecustomdateX field.
func (o *EzsignsignaturecustomdateRequest) SetIEzsignsignaturecustomdateX(v int32) {
	o.IEzsignsignaturecustomdateX = &v
}

// GetIEzsignsignaturecustomdateY returns the IEzsignsignaturecustomdateY field value if set, zero value otherwise.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateY() int32 {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateY) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignaturecustomdateY
}

// GetIEzsignsignaturecustomdateYOk returns a tuple with the IEzsignsignaturecustomdateY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateYOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateY) {
		return nil, false
	}
	return o.IEzsignsignaturecustomdateY, true
}

// HasIEzsignsignaturecustomdateY returns a boolean if a field has been set.
func (o *EzsignsignaturecustomdateRequest) HasIEzsignsignaturecustomdateY() bool {
	if o != nil && !IsNil(o.IEzsignsignaturecustomdateY) {
		return true
	}

	return false
}

// SetIEzsignsignaturecustomdateY gets a reference to the given int32 and assigns it to the IEzsignsignaturecustomdateY field.
func (o *EzsignsignaturecustomdateRequest) SetIEzsignsignaturecustomdateY(v int32) {
	o.IEzsignsignaturecustomdateY = &v
}

// GetIEzsignsignaturecustomdateOffsetx returns the IEzsignsignaturecustomdateOffsetx field value if set, zero value otherwise.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateOffsetx() int32 {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateOffsetx) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignaturecustomdateOffsetx
}

// GetIEzsignsignaturecustomdateOffsetxOk returns a tuple with the IEzsignsignaturecustomdateOffsetx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateOffsetxOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateOffsetx) {
		return nil, false
	}
	return o.IEzsignsignaturecustomdateOffsetx, true
}

// HasIEzsignsignaturecustomdateOffsetx returns a boolean if a field has been set.
func (o *EzsignsignaturecustomdateRequest) HasIEzsignsignaturecustomdateOffsetx() bool {
	if o != nil && !IsNil(o.IEzsignsignaturecustomdateOffsetx) {
		return true
	}

	return false
}

// SetIEzsignsignaturecustomdateOffsetx gets a reference to the given int32 and assigns it to the IEzsignsignaturecustomdateOffsetx field.
func (o *EzsignsignaturecustomdateRequest) SetIEzsignsignaturecustomdateOffsetx(v int32) {
	o.IEzsignsignaturecustomdateOffsetx = &v
}

// GetIEzsignsignaturecustomdateOffsety returns the IEzsignsignaturecustomdateOffsety field value if set, zero value otherwise.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateOffsety() int32 {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateOffsety) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignaturecustomdateOffsety
}

// GetIEzsignsignaturecustomdateOffsetyOk returns a tuple with the IEzsignsignaturecustomdateOffsety field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetIEzsignsignaturecustomdateOffsetyOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignaturecustomdateOffsety) {
		return nil, false
	}
	return o.IEzsignsignaturecustomdateOffsety, true
}

// HasIEzsignsignaturecustomdateOffsety returns a boolean if a field has been set.
func (o *EzsignsignaturecustomdateRequest) HasIEzsignsignaturecustomdateOffsety() bool {
	if o != nil && !IsNil(o.IEzsignsignaturecustomdateOffsety) {
		return true
	}

	return false
}

// SetIEzsignsignaturecustomdateOffsety gets a reference to the given int32 and assigns it to the IEzsignsignaturecustomdateOffsety field.
func (o *EzsignsignaturecustomdateRequest) SetIEzsignsignaturecustomdateOffsety(v int32) {
	o.IEzsignsignaturecustomdateOffsety = &v
}

// GetSEzsignsignaturecustomdateFormat returns the SEzsignsignaturecustomdateFormat field value
func (o *EzsignsignaturecustomdateRequest) GetSEzsignsignaturecustomdateFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEzsignsignaturecustomdateFormat
}

// GetSEzsignsignaturecustomdateFormatOk returns a tuple with the SEzsignsignaturecustomdateFormat field value
// and a boolean to check if the value has been set.
func (o *EzsignsignaturecustomdateRequest) GetSEzsignsignaturecustomdateFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEzsignsignaturecustomdateFormat, true
}

// SetSEzsignsignaturecustomdateFormat sets field value
func (o *EzsignsignaturecustomdateRequest) SetSEzsignsignaturecustomdateFormat(v string) {
	o.SEzsignsignaturecustomdateFormat = v
}

func (o EzsignsignaturecustomdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignsignaturecustomdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiEzsignsignaturecustomdateID) {
		toSerialize["pkiEzsignsignaturecustomdateID"] = o.PkiEzsignsignaturecustomdateID
	}
	if !IsNil(o.IEzsignsignaturecustomdateX) {
		toSerialize["iEzsignsignaturecustomdateX"] = o.IEzsignsignaturecustomdateX
	}
	if !IsNil(o.IEzsignsignaturecustomdateY) {
		toSerialize["iEzsignsignaturecustomdateY"] = o.IEzsignsignaturecustomdateY
	}
	if !IsNil(o.IEzsignsignaturecustomdateOffsetx) {
		toSerialize["iEzsignsignaturecustomdateOffsetx"] = o.IEzsignsignaturecustomdateOffsetx
	}
	if !IsNil(o.IEzsignsignaturecustomdateOffsety) {
		toSerialize["iEzsignsignaturecustomdateOffsety"] = o.IEzsignsignaturecustomdateOffsety
	}
	toSerialize["sEzsignsignaturecustomdateFormat"] = o.SEzsignsignaturecustomdateFormat
	return toSerialize, nil
}

func (o *EzsignsignaturecustomdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sEzsignsignaturecustomdateFormat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignsignaturecustomdateRequest := _EzsignsignaturecustomdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignsignaturecustomdateRequest)

	if err != nil {
		return err
	}

	*o = EzsignsignaturecustomdateRequest(varEzsignsignaturecustomdateRequest)

	return err
}

type NullableEzsignsignaturecustomdateRequest struct {
	value *EzsignsignaturecustomdateRequest
	isSet bool
}

func (v NullableEzsignsignaturecustomdateRequest) Get() *EzsignsignaturecustomdateRequest {
	return v.value
}

func (v *NullableEzsignsignaturecustomdateRequest) Set(val *EzsignsignaturecustomdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignsignaturecustomdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignsignaturecustomdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignsignaturecustomdateRequest(val *EzsignsignaturecustomdateRequest) *NullableEzsignsignaturecustomdateRequest {
	return &NullableEzsignsignaturecustomdateRequest{value: val, isSet: true}
}

func (v NullableEzsignsignaturecustomdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignsignaturecustomdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


