/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomTimezoneWithCodeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomTimezoneWithCodeResponse{}

// CustomTimezoneWithCodeResponse Generic AutocompleteElement Response
type CustomTimezoneWithCodeResponse struct {
	// The Name of timezone
	STimezoneName string `json:"sTimezoneName"`
	// The Code of the time
	SCode string `json:"sCode"`
}

type _CustomTimezoneWithCodeResponse CustomTimezoneWithCodeResponse

// NewCustomTimezoneWithCodeResponse instantiates a new CustomTimezoneWithCodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomTimezoneWithCodeResponse(sTimezoneName string, sCode string) *CustomTimezoneWithCodeResponse {
	this := CustomTimezoneWithCodeResponse{}
	this.STimezoneName = sTimezoneName
	this.SCode = sCode
	return &this
}

// NewCustomTimezoneWithCodeResponseWithDefaults instantiates a new CustomTimezoneWithCodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomTimezoneWithCodeResponseWithDefaults() *CustomTimezoneWithCodeResponse {
	this := CustomTimezoneWithCodeResponse{}
	return &this
}

// GetSTimezoneName returns the STimezoneName field value
func (o *CustomTimezoneWithCodeResponse) GetSTimezoneName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.STimezoneName
}

// GetSTimezoneNameOk returns a tuple with the STimezoneName field value
// and a boolean to check if the value has been set.
func (o *CustomTimezoneWithCodeResponse) GetSTimezoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.STimezoneName, true
}

// SetSTimezoneName sets field value
func (o *CustomTimezoneWithCodeResponse) SetSTimezoneName(v string) {
	o.STimezoneName = v
}

// GetSCode returns the SCode field value
func (o *CustomTimezoneWithCodeResponse) GetSCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCode
}

// GetSCodeOk returns a tuple with the SCode field value
// and a boolean to check if the value has been set.
func (o *CustomTimezoneWithCodeResponse) GetSCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCode, true
}

// SetSCode sets field value
func (o *CustomTimezoneWithCodeResponse) SetSCode(v string) {
	o.SCode = v
}

func (o CustomTimezoneWithCodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomTimezoneWithCodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sTimezoneName"] = o.STimezoneName
	toSerialize["sCode"] = o.SCode
	return toSerialize, nil
}

func (o *CustomTimezoneWithCodeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sTimezoneName",
		"sCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomTimezoneWithCodeResponse := _CustomTimezoneWithCodeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomTimezoneWithCodeResponse)

	if err != nil {
		return err
	}

	*o = CustomTimezoneWithCodeResponse(varCustomTimezoneWithCodeResponse)

	return err
}

type NullableCustomTimezoneWithCodeResponse struct {
	value *CustomTimezoneWithCodeResponse
	isSet bool
}

func (v NullableCustomTimezoneWithCodeResponse) Get() *CustomTimezoneWithCodeResponse {
	return v.value
}

func (v *NullableCustomTimezoneWithCodeResponse) Set(val *CustomTimezoneWithCodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomTimezoneWithCodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomTimezoneWithCodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomTimezoneWithCodeResponse(val *CustomTimezoneWithCodeResponse) *NullableCustomTimezoneWithCodeResponse {
	return &NullableCustomTimezoneWithCodeResponse{value: val, isSet: true}
}

func (v NullableCustomTimezoneWithCodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomTimezoneWithCodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


