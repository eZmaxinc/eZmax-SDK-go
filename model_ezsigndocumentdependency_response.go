/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsigndocumentdependencyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsigndocumentdependencyResponse{}

// EzsigndocumentdependencyResponse An Ezsigndocumentdependency Object
type EzsigndocumentdependencyResponse struct {
	// The unique ID of the Ezsigndocumentdependency
	PkiEzsigndocumentdependencyID int32 `json:"pkiEzsigndocumentdependencyID"`
	// The unique ID of the Ezsigndocument
	FkiEzsigndocumentIDdependency int32 `json:"fkiEzsigndocumentIDdependency"`
}

type _EzsigndocumentdependencyResponse EzsigndocumentdependencyResponse

// NewEzsigndocumentdependencyResponse instantiates a new EzsigndocumentdependencyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigndocumentdependencyResponse(pkiEzsigndocumentdependencyID int32, fkiEzsigndocumentIDdependency int32) *EzsigndocumentdependencyResponse {
	this := EzsigndocumentdependencyResponse{}
	this.PkiEzsigndocumentdependencyID = pkiEzsigndocumentdependencyID
	this.FkiEzsigndocumentIDdependency = fkiEzsigndocumentIDdependency
	return &this
}

// NewEzsigndocumentdependencyResponseWithDefaults instantiates a new EzsigndocumentdependencyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigndocumentdependencyResponseWithDefaults() *EzsigndocumentdependencyResponse {
	this := EzsigndocumentdependencyResponse{}
	return &this
}

// GetPkiEzsigndocumentdependencyID returns the PkiEzsigndocumentdependencyID field value
func (o *EzsigndocumentdependencyResponse) GetPkiEzsigndocumentdependencyID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEzsigndocumentdependencyID
}

// GetPkiEzsigndocumentdependencyIDOk returns a tuple with the PkiEzsigndocumentdependencyID field value
// and a boolean to check if the value has been set.
func (o *EzsigndocumentdependencyResponse) GetPkiEzsigndocumentdependencyIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEzsigndocumentdependencyID, true
}

// SetPkiEzsigndocumentdependencyID sets field value
func (o *EzsigndocumentdependencyResponse) SetPkiEzsigndocumentdependencyID(v int32) {
	o.PkiEzsigndocumentdependencyID = v
}

// GetFkiEzsigndocumentIDdependency returns the FkiEzsigndocumentIDdependency field value
func (o *EzsigndocumentdependencyResponse) GetFkiEzsigndocumentIDdependency() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzsigndocumentIDdependency
}

// GetFkiEzsigndocumentIDdependencyOk returns a tuple with the FkiEzsigndocumentIDdependency field value
// and a boolean to check if the value has been set.
func (o *EzsigndocumentdependencyResponse) GetFkiEzsigndocumentIDdependencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzsigndocumentIDdependency, true
}

// SetFkiEzsigndocumentIDdependency sets field value
func (o *EzsigndocumentdependencyResponse) SetFkiEzsigndocumentIDdependency(v int32) {
	o.FkiEzsigndocumentIDdependency = v
}

func (o EzsigndocumentdependencyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsigndocumentdependencyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEzsigndocumentdependencyID"] = o.PkiEzsigndocumentdependencyID
	toSerialize["fkiEzsigndocumentIDdependency"] = o.FkiEzsigndocumentIDdependency
	return toSerialize, nil
}

func (o *EzsigndocumentdependencyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEzsigndocumentdependencyID",
		"fkiEzsigndocumentIDdependency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsigndocumentdependencyResponse := _EzsigndocumentdependencyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsigndocumentdependencyResponse)

	if err != nil {
		return err
	}

	*o = EzsigndocumentdependencyResponse(varEzsigndocumentdependencyResponse)

	return err
}

type NullableEzsigndocumentdependencyResponse struct {
	value *EzsigndocumentdependencyResponse
	isSet bool
}

func (v NullableEzsigndocumentdependencyResponse) Get() *EzsigndocumentdependencyResponse {
	return v.value
}

func (v *NullableEzsigndocumentdependencyResponse) Set(val *EzsigndocumentdependencyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigndocumentdependencyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigndocumentdependencyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigndocumentdependencyResponse(val *EzsigndocumentdependencyResponse) *NullableEzsigndocumentdependencyResponse {
	return &NullableEzsigndocumentdependencyResponse{value: val, isSet: true}
}

func (v NullableEzsigndocumentdependencyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigndocumentdependencyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


