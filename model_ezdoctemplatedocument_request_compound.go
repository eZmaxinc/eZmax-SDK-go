/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzdoctemplatedocumentRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzdoctemplatedocumentRequestCompound{}

// EzdoctemplatedocumentRequestCompound A Ezdoctemplatedocument Object and children
type EzdoctemplatedocumentRequestCompound struct {
	// The unique ID of the Ezdoctemplatedocument
	PkiEzdoctemplatedocumentID *int32 `json:"pkiEzdoctemplatedocumentID,omitempty"`
	// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
	FkiLanguageID int32 `json:"fkiLanguageID"`
	// The unique ID of the Ezsignfoldertype.
	FkiEzsignfoldertypeID *int32 `json:"fkiEzsignfoldertypeID,omitempty"`
	// The unique ID of the Ezdoctemplatetype
	FkiEzdoctemplatetypeID int32 `json:"fkiEzdoctemplatetypeID"`
	// The unique ID of the Ezdoctemplatefieldtypecategory
	FkiEzdoctemplatefieldtypecategoryID int32 `json:"fkiEzdoctemplatefieldtypecategoryID"`
	EEzdoctemplatedocumentPrivacylevel *FieldEEzdoctemplatedocumentPrivacylevel `json:"eEzdoctemplatedocumentPrivacylevel,omitempty"`
	// Whether the ezdoctemplatedocument is active or not
	BEzdoctemplatedocumentIsactive bool `json:"bEzdoctemplatedocumentIsactive"`
	ObjEzdoctemplatedocumentName MultilingualEzdoctemplatedocumentName `json:"objEzdoctemplatedocumentName"`
}

type _EzdoctemplatedocumentRequestCompound EzdoctemplatedocumentRequestCompound

// NewEzdoctemplatedocumentRequestCompound instantiates a new EzdoctemplatedocumentRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzdoctemplatedocumentRequestCompound(fkiLanguageID int32, fkiEzdoctemplatetypeID int32, fkiEzdoctemplatefieldtypecategoryID int32, bEzdoctemplatedocumentIsactive bool, objEzdoctemplatedocumentName MultilingualEzdoctemplatedocumentName) *EzdoctemplatedocumentRequestCompound {
	this := EzdoctemplatedocumentRequestCompound{}
	this.FkiLanguageID = fkiLanguageID
	this.FkiEzdoctemplatetypeID = fkiEzdoctemplatetypeID
	this.FkiEzdoctemplatefieldtypecategoryID = fkiEzdoctemplatefieldtypecategoryID
	this.BEzdoctemplatedocumentIsactive = bEzdoctemplatedocumentIsactive
	this.ObjEzdoctemplatedocumentName = objEzdoctemplatedocumentName
	return &this
}

// NewEzdoctemplatedocumentRequestCompoundWithDefaults instantiates a new EzdoctemplatedocumentRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzdoctemplatedocumentRequestCompoundWithDefaults() *EzdoctemplatedocumentRequestCompound {
	this := EzdoctemplatedocumentRequestCompound{}
	return &this
}

// GetPkiEzdoctemplatedocumentID returns the PkiEzdoctemplatedocumentID field value if set, zero value otherwise.
func (o *EzdoctemplatedocumentRequestCompound) GetPkiEzdoctemplatedocumentID() int32 {
	if o == nil || IsNil(o.PkiEzdoctemplatedocumentID) {
		var ret int32
		return ret
	}
	return *o.PkiEzdoctemplatedocumentID
}

// GetPkiEzdoctemplatedocumentIDOk returns a tuple with the PkiEzdoctemplatedocumentID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetPkiEzdoctemplatedocumentIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiEzdoctemplatedocumentID) {
		return nil, false
	}
	return o.PkiEzdoctemplatedocumentID, true
}

// HasPkiEzdoctemplatedocumentID returns a boolean if a field has been set.
func (o *EzdoctemplatedocumentRequestCompound) HasPkiEzdoctemplatedocumentID() bool {
	if o != nil && !IsNil(o.PkiEzdoctemplatedocumentID) {
		return true
	}

	return false
}

// SetPkiEzdoctemplatedocumentID gets a reference to the given int32 and assigns it to the PkiEzdoctemplatedocumentID field.
func (o *EzdoctemplatedocumentRequestCompound) SetPkiEzdoctemplatedocumentID(v int32) {
	o.PkiEzdoctemplatedocumentID = &v
}

// GetFkiLanguageID returns the FkiLanguageID field value
func (o *EzdoctemplatedocumentRequestCompound) GetFkiLanguageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiLanguageID
}

// GetFkiLanguageIDOk returns a tuple with the FkiLanguageID field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetFkiLanguageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiLanguageID, true
}

// SetFkiLanguageID sets field value
func (o *EzdoctemplatedocumentRequestCompound) SetFkiLanguageID(v int32) {
	o.FkiLanguageID = v
}

// GetFkiEzsignfoldertypeID returns the FkiEzsignfoldertypeID field value if set, zero value otherwise.
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzsignfoldertypeID() int32 {
	if o == nil || IsNil(o.FkiEzsignfoldertypeID) {
		var ret int32
		return ret
	}
	return *o.FkiEzsignfoldertypeID
}

// GetFkiEzsignfoldertypeIDOk returns a tuple with the FkiEzsignfoldertypeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzsignfoldertypeIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiEzsignfoldertypeID) {
		return nil, false
	}
	return o.FkiEzsignfoldertypeID, true
}

// HasFkiEzsignfoldertypeID returns a boolean if a field has been set.
func (o *EzdoctemplatedocumentRequestCompound) HasFkiEzsignfoldertypeID() bool {
	if o != nil && !IsNil(o.FkiEzsignfoldertypeID) {
		return true
	}

	return false
}

// SetFkiEzsignfoldertypeID gets a reference to the given int32 and assigns it to the FkiEzsignfoldertypeID field.
func (o *EzdoctemplatedocumentRequestCompound) SetFkiEzsignfoldertypeID(v int32) {
	o.FkiEzsignfoldertypeID = &v
}

// GetFkiEzdoctemplatetypeID returns the FkiEzdoctemplatetypeID field value
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzdoctemplatetypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzdoctemplatetypeID
}

// GetFkiEzdoctemplatetypeIDOk returns a tuple with the FkiEzdoctemplatetypeID field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzdoctemplatetypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzdoctemplatetypeID, true
}

// SetFkiEzdoctemplatetypeID sets field value
func (o *EzdoctemplatedocumentRequestCompound) SetFkiEzdoctemplatetypeID(v int32) {
	o.FkiEzdoctemplatetypeID = v
}

// GetFkiEzdoctemplatefieldtypecategoryID returns the FkiEzdoctemplatefieldtypecategoryID field value
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzdoctemplatefieldtypecategoryID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzdoctemplatefieldtypecategoryID
}

// GetFkiEzdoctemplatefieldtypecategoryIDOk returns a tuple with the FkiEzdoctemplatefieldtypecategoryID field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetFkiEzdoctemplatefieldtypecategoryIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzdoctemplatefieldtypecategoryID, true
}

// SetFkiEzdoctemplatefieldtypecategoryID sets field value
func (o *EzdoctemplatedocumentRequestCompound) SetFkiEzdoctemplatefieldtypecategoryID(v int32) {
	o.FkiEzdoctemplatefieldtypecategoryID = v
}

// GetEEzdoctemplatedocumentPrivacylevel returns the EEzdoctemplatedocumentPrivacylevel field value if set, zero value otherwise.
func (o *EzdoctemplatedocumentRequestCompound) GetEEzdoctemplatedocumentPrivacylevel() FieldEEzdoctemplatedocumentPrivacylevel {
	if o == nil || IsNil(o.EEzdoctemplatedocumentPrivacylevel) {
		var ret FieldEEzdoctemplatedocumentPrivacylevel
		return ret
	}
	return *o.EEzdoctemplatedocumentPrivacylevel
}

// GetEEzdoctemplatedocumentPrivacylevelOk returns a tuple with the EEzdoctemplatedocumentPrivacylevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetEEzdoctemplatedocumentPrivacylevelOk() (*FieldEEzdoctemplatedocumentPrivacylevel, bool) {
	if o == nil || IsNil(o.EEzdoctemplatedocumentPrivacylevel) {
		return nil, false
	}
	return o.EEzdoctemplatedocumentPrivacylevel, true
}

// HasEEzdoctemplatedocumentPrivacylevel returns a boolean if a field has been set.
func (o *EzdoctemplatedocumentRequestCompound) HasEEzdoctemplatedocumentPrivacylevel() bool {
	if o != nil && !IsNil(o.EEzdoctemplatedocumentPrivacylevel) {
		return true
	}

	return false
}

// SetEEzdoctemplatedocumentPrivacylevel gets a reference to the given FieldEEzdoctemplatedocumentPrivacylevel and assigns it to the EEzdoctemplatedocumentPrivacylevel field.
func (o *EzdoctemplatedocumentRequestCompound) SetEEzdoctemplatedocumentPrivacylevel(v FieldEEzdoctemplatedocumentPrivacylevel) {
	o.EEzdoctemplatedocumentPrivacylevel = &v
}

// GetBEzdoctemplatedocumentIsactive returns the BEzdoctemplatedocumentIsactive field value
func (o *EzdoctemplatedocumentRequestCompound) GetBEzdoctemplatedocumentIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BEzdoctemplatedocumentIsactive
}

// GetBEzdoctemplatedocumentIsactiveOk returns a tuple with the BEzdoctemplatedocumentIsactive field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetBEzdoctemplatedocumentIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BEzdoctemplatedocumentIsactive, true
}

// SetBEzdoctemplatedocumentIsactive sets field value
func (o *EzdoctemplatedocumentRequestCompound) SetBEzdoctemplatedocumentIsactive(v bool) {
	o.BEzdoctemplatedocumentIsactive = v
}

// GetObjEzdoctemplatedocumentName returns the ObjEzdoctemplatedocumentName field value
func (o *EzdoctemplatedocumentRequestCompound) GetObjEzdoctemplatedocumentName() MultilingualEzdoctemplatedocumentName {
	if o == nil {
		var ret MultilingualEzdoctemplatedocumentName
		return ret
	}

	return o.ObjEzdoctemplatedocumentName
}

// GetObjEzdoctemplatedocumentNameOk returns a tuple with the ObjEzdoctemplatedocumentName field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatedocumentRequestCompound) GetObjEzdoctemplatedocumentNameOk() (*MultilingualEzdoctemplatedocumentName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjEzdoctemplatedocumentName, true
}

// SetObjEzdoctemplatedocumentName sets field value
func (o *EzdoctemplatedocumentRequestCompound) SetObjEzdoctemplatedocumentName(v MultilingualEzdoctemplatedocumentName) {
	o.ObjEzdoctemplatedocumentName = v
}

func (o EzdoctemplatedocumentRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzdoctemplatedocumentRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiEzdoctemplatedocumentID) {
		toSerialize["pkiEzdoctemplatedocumentID"] = o.PkiEzdoctemplatedocumentID
	}
	toSerialize["fkiLanguageID"] = o.FkiLanguageID
	if !IsNil(o.FkiEzsignfoldertypeID) {
		toSerialize["fkiEzsignfoldertypeID"] = o.FkiEzsignfoldertypeID
	}
	toSerialize["fkiEzdoctemplatetypeID"] = o.FkiEzdoctemplatetypeID
	toSerialize["fkiEzdoctemplatefieldtypecategoryID"] = o.FkiEzdoctemplatefieldtypecategoryID
	if !IsNil(o.EEzdoctemplatedocumentPrivacylevel) {
		toSerialize["eEzdoctemplatedocumentPrivacylevel"] = o.EEzdoctemplatedocumentPrivacylevel
	}
	toSerialize["bEzdoctemplatedocumentIsactive"] = o.BEzdoctemplatedocumentIsactive
	toSerialize["objEzdoctemplatedocumentName"] = o.ObjEzdoctemplatedocumentName
	return toSerialize, nil
}

func (o *EzdoctemplatedocumentRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiLanguageID",
		"fkiEzdoctemplatetypeID",
		"fkiEzdoctemplatefieldtypecategoryID",
		"bEzdoctemplatedocumentIsactive",
		"objEzdoctemplatedocumentName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzdoctemplatedocumentRequestCompound := _EzdoctemplatedocumentRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzdoctemplatedocumentRequestCompound)

	if err != nil {
		return err
	}

	*o = EzdoctemplatedocumentRequestCompound(varEzdoctemplatedocumentRequestCompound)

	return err
}

type NullableEzdoctemplatedocumentRequestCompound struct {
	value *EzdoctemplatedocumentRequestCompound
	isSet bool
}

func (v NullableEzdoctemplatedocumentRequestCompound) Get() *EzdoctemplatedocumentRequestCompound {
	return v.value
}

func (v *NullableEzdoctemplatedocumentRequestCompound) Set(val *EzdoctemplatedocumentRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableEzdoctemplatedocumentRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableEzdoctemplatedocumentRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzdoctemplatedocumentRequestCompound(val *EzdoctemplatedocumentRequestCompound) *NullableEzdoctemplatedocumentRequestCompound {
	return &NullableEzdoctemplatedocumentRequestCompound{value: val, isSet: true}
}

func (v NullableEzdoctemplatedocumentRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzdoctemplatedocumentRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


