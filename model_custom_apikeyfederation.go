/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomApikeyfederation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomApikeyfederation{}

// CustomApikeyfederation A Custom Apikeyfederation Object
type CustomApikeyfederation struct {
	// The key of the Apikeyfederation
	SApikeyfederationKey string `json:"sApikeyfederationKey" validate:"regexp=^.{1,200}$"`
	// The secret of the Apikeyfederation
	SApikeyfederationSecret string `json:"sApikeyfederationSecret" validate:"regexp=^[0-9a-fA-F]{1,32}$"`
}

type _CustomApikeyfederation CustomApikeyfederation

// NewCustomApikeyfederation instantiates a new CustomApikeyfederation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomApikeyfederation(sApikeyfederationKey string, sApikeyfederationSecret string) *CustomApikeyfederation {
	this := CustomApikeyfederation{}
	this.SApikeyfederationKey = sApikeyfederationKey
	this.SApikeyfederationSecret = sApikeyfederationSecret
	return &this
}

// NewCustomApikeyfederationWithDefaults instantiates a new CustomApikeyfederation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomApikeyfederationWithDefaults() *CustomApikeyfederation {
	this := CustomApikeyfederation{}
	return &this
}

// GetSApikeyfederationKey returns the SApikeyfederationKey field value
func (o *CustomApikeyfederation) GetSApikeyfederationKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SApikeyfederationKey
}

// GetSApikeyfederationKeyOk returns a tuple with the SApikeyfederationKey field value
// and a boolean to check if the value has been set.
func (o *CustomApikeyfederation) GetSApikeyfederationKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SApikeyfederationKey, true
}

// SetSApikeyfederationKey sets field value
func (o *CustomApikeyfederation) SetSApikeyfederationKey(v string) {
	o.SApikeyfederationKey = v
}

// GetSApikeyfederationSecret returns the SApikeyfederationSecret field value
func (o *CustomApikeyfederation) GetSApikeyfederationSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SApikeyfederationSecret
}

// GetSApikeyfederationSecretOk returns a tuple with the SApikeyfederationSecret field value
// and a boolean to check if the value has been set.
func (o *CustomApikeyfederation) GetSApikeyfederationSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SApikeyfederationSecret, true
}

// SetSApikeyfederationSecret sets field value
func (o *CustomApikeyfederation) SetSApikeyfederationSecret(v string) {
	o.SApikeyfederationSecret = v
}

func (o CustomApikeyfederation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomApikeyfederation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sApikeyfederationKey"] = o.SApikeyfederationKey
	toSerialize["sApikeyfederationSecret"] = o.SApikeyfederationSecret
	return toSerialize, nil
}

func (o *CustomApikeyfederation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sApikeyfederationKey",
		"sApikeyfederationSecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomApikeyfederation := _CustomApikeyfederation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomApikeyfederation)

	if err != nil {
		return err
	}

	*o = CustomApikeyfederation(varCustomApikeyfederation)

	return err
}

type NullableCustomApikeyfederation struct {
	value *CustomApikeyfederation
	isSet bool
}

func (v NullableCustomApikeyfederation) Get() *CustomApikeyfederation {
	return v.value
}

func (v *NullableCustomApikeyfederation) Set(val *CustomApikeyfederation) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomApikeyfederation) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomApikeyfederation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomApikeyfederation(val *CustomApikeyfederation) *NullableCustomApikeyfederation {
	return &NullableCustomApikeyfederation{value: val, isSet: true}
}

func (v NullableCustomApikeyfederation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomApikeyfederation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


