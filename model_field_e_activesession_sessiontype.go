/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.4
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEActivesessionSessiontype The Type of session for the Activesession
type FieldEActivesessionSessiontype string

// List of Field-eActivesessionSessiontype
const (
	NORMAL FieldEActivesessionSessiontype = "Normal"
)

// All allowed values of FieldEActivesessionSessiontype enum
var AllowedFieldEActivesessionSessiontypeEnumValues = []FieldEActivesessionSessiontype{
	"Normal",
}

func (v *FieldEActivesessionSessiontype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEActivesessionSessiontype(value)
	for _, existing := range AllowedFieldEActivesessionSessiontypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEActivesessionSessiontype", value)
}

// NewFieldEActivesessionSessiontypeFromValue returns a pointer to a valid FieldEActivesessionSessiontype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEActivesessionSessiontypeFromValue(v string) (*FieldEActivesessionSessiontype, error) {
	ev := FieldEActivesessionSessiontype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEActivesessionSessiontype: valid values are %v", v, AllowedFieldEActivesessionSessiontypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEActivesessionSessiontype) IsValid() bool {
	for _, existing := range AllowedFieldEActivesessionSessiontypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eActivesessionSessiontype value
func (v FieldEActivesessionSessiontype) Ptr() *FieldEActivesessionSessiontype {
	return &v
}

type NullableFieldEActivesessionSessiontype struct {
	value *FieldEActivesessionSessiontype
	isSet bool
}

func (v NullableFieldEActivesessionSessiontype) Get() *FieldEActivesessionSessiontype {
	return v.value
}

func (v *NullableFieldEActivesessionSessiontype) Set(val *FieldEActivesessionSessiontype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEActivesessionSessiontype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEActivesessionSessiontype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEActivesessionSessiontype(val *FieldEActivesessionSessiontype) *NullableFieldEActivesessionSessiontype {
	return &NullableFieldEActivesessionSessiontype{value: val, isSet: true}
}

func (v NullableFieldEActivesessionSessiontype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEActivesessionSessiontype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

