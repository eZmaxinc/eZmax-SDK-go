/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.3
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatepackageType The type of the Ezsigntemplatepackage.
type FieldEEzsigntemplatepackageType string

// List of Field-eEzsigntemplatepackageType
const (
	COMPANY FieldEEzsigntemplatepackageType = "Company"
	DEPARTMENT FieldEEzsigntemplatepackageType = "Department"
	TEAM FieldEEzsigntemplatepackageType = "Team"
	USER FieldEEzsigntemplatepackageType = "User"
	USERGROUP FieldEEzsigntemplatepackageType = "Usergroup"
)

// All allowed values of FieldEEzsigntemplatepackageType enum
var AllowedFieldEEzsigntemplatepackageTypeEnumValues = []FieldEEzsigntemplatepackageType{
	"Company",
	"Department",
	"Team",
	"User",
	"Usergroup",
}

func (v *FieldEEzsigntemplatepackageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatepackageType(value)
	for _, existing := range AllowedFieldEEzsigntemplatepackageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatepackageType", value)
}

// NewFieldEEzsigntemplatepackageTypeFromValue returns a pointer to a valid FieldEEzsigntemplatepackageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatepackageTypeFromValue(v string) (*FieldEEzsigntemplatepackageType, error) {
	ev := FieldEEzsigntemplatepackageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatepackageType: valid values are %v", v, AllowedFieldEEzsigntemplatepackageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatepackageType) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatepackageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatepackageType value
func (v FieldEEzsigntemplatepackageType) Ptr() *FieldEEzsigntemplatepackageType {
	return &v
}

type NullableFieldEEzsigntemplatepackageType struct {
	value *FieldEEzsigntemplatepackageType
	isSet bool
}

func (v NullableFieldEEzsigntemplatepackageType) Get() *FieldEEzsigntemplatepackageType {
	return v.value
}

func (v *NullableFieldEEzsigntemplatepackageType) Set(val *FieldEEzsigntemplatepackageType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatepackageType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatepackageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatepackageType(val *FieldEEzsigntemplatepackageType) *NullableFieldEEzsigntemplatepackageType {
	return &NullableFieldEEzsigntemplatepackageType{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatepackageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatepackageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

