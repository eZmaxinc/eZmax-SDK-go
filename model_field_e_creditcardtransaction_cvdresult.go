/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECreditcardtransactionCvdresult The result for the cvd validation
type FieldECreditcardtransactionCvdresult string

// List of Field-eCreditcardtransactionCvdresult
const (
	MATCH FieldECreditcardtransactionCvdresult = "Match"
	NO_MATCH FieldECreditcardtransactionCvdresult = "NoMatch"
	NOT_VERIFIED FieldECreditcardtransactionCvdresult = "NotVerified"
)

// All allowed values of FieldECreditcardtransactionCvdresult enum
var AllowedFieldECreditcardtransactionCvdresultEnumValues = []FieldECreditcardtransactionCvdresult{
	"Match",
	"NoMatch",
	"NotVerified",
}

func (v *FieldECreditcardtransactionCvdresult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECreditcardtransactionCvdresult(value)
	for _, existing := range AllowedFieldECreditcardtransactionCvdresultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECreditcardtransactionCvdresult", value)
}

// NewFieldECreditcardtransactionCvdresultFromValue returns a pointer to a valid FieldECreditcardtransactionCvdresult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECreditcardtransactionCvdresultFromValue(v string) (*FieldECreditcardtransactionCvdresult, error) {
	ev := FieldECreditcardtransactionCvdresult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECreditcardtransactionCvdresult: valid values are %v", v, AllowedFieldECreditcardtransactionCvdresultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECreditcardtransactionCvdresult) IsValid() bool {
	for _, existing := range AllowedFieldECreditcardtransactionCvdresultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCreditcardtransactionCvdresult value
func (v FieldECreditcardtransactionCvdresult) Ptr() *FieldECreditcardtransactionCvdresult {
	return &v
}

type NullableFieldECreditcardtransactionCvdresult struct {
	value *FieldECreditcardtransactionCvdresult
	isSet bool
}

func (v NullableFieldECreditcardtransactionCvdresult) Get() *FieldECreditcardtransactionCvdresult {
	return v.value
}

func (v *NullableFieldECreditcardtransactionCvdresult) Set(val *FieldECreditcardtransactionCvdresult) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECreditcardtransactionCvdresult) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECreditcardtransactionCvdresult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECreditcardtransactionCvdresult(val *FieldECreditcardtransactionCvdresult) *NullableFieldECreditcardtransactionCvdresult {
	return &NullableFieldECreditcardtransactionCvdresult{value: val, isSet: true}
}

func (v NullableFieldECreditcardtransactionCvdresult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECreditcardtransactionCvdresult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

