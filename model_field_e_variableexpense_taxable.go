/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEVariableexpenseTaxable The taxable of the Variableexpense
type FieldEVariableexpenseTaxable string

// List of Field-eVariableexpenseTaxable
const (
	YES FieldEVariableexpenseTaxable = "Yes"
	NO FieldEVariableexpenseTaxable = "No"
	INCLUDED FieldEVariableexpenseTaxable = "Included"
)

// All allowed values of FieldEVariableexpenseTaxable enum
var AllowedFieldEVariableexpenseTaxableEnumValues = []FieldEVariableexpenseTaxable{
	"Yes",
	"No",
	"Included",
}

func (v *FieldEVariableexpenseTaxable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEVariableexpenseTaxable(value)
	for _, existing := range AllowedFieldEVariableexpenseTaxableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEVariableexpenseTaxable", value)
}

// NewFieldEVariableexpenseTaxableFromValue returns a pointer to a valid FieldEVariableexpenseTaxable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEVariableexpenseTaxableFromValue(v string) (*FieldEVariableexpenseTaxable, error) {
	ev := FieldEVariableexpenseTaxable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEVariableexpenseTaxable: valid values are %v", v, AllowedFieldEVariableexpenseTaxableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEVariableexpenseTaxable) IsValid() bool {
	for _, existing := range AllowedFieldEVariableexpenseTaxableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eVariableexpenseTaxable value
func (v FieldEVariableexpenseTaxable) Ptr() *FieldEVariableexpenseTaxable {
	return &v
}

type NullableFieldEVariableexpenseTaxable struct {
	value *FieldEVariableexpenseTaxable
	isSet bool
}

func (v NullableFieldEVariableexpenseTaxable) Get() *FieldEVariableexpenseTaxable {
	return v.value
}

func (v *NullableFieldEVariableexpenseTaxable) Set(val *FieldEVariableexpenseTaxable) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEVariableexpenseTaxable) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEVariableexpenseTaxable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEVariableexpenseTaxable(val *FieldEVariableexpenseTaxable) *NullableFieldEVariableexpenseTaxable {
	return &NullableFieldEVariableexpenseTaxable{value: val, isSet: true}
}

func (v NullableFieldEVariableexpenseTaxable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEVariableexpenseTaxable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

