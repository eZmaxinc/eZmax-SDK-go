/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomApikey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomApikey{}

// CustomApikey A Custom Apikey Object
type CustomApikey struct {
	// The key of the Apikey
	SApikeyKey string `json:"sApikeyKey" validate:"regexp=^.{1,200}$"`
	// The secret of the Apikey
	SApikeySecret string `json:"sApikeySecret" validate:"regexp=^[0-9a-fA-F]{1,32}$"`
}

type _CustomApikey CustomApikey

// NewCustomApikey instantiates a new CustomApikey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomApikey(sApikeyKey string, sApikeySecret string) *CustomApikey {
	this := CustomApikey{}
	this.SApikeyKey = sApikeyKey
	this.SApikeySecret = sApikeySecret
	return &this
}

// NewCustomApikeyWithDefaults instantiates a new CustomApikey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomApikeyWithDefaults() *CustomApikey {
	this := CustomApikey{}
	return &this
}

// GetSApikeyKey returns the SApikeyKey field value
func (o *CustomApikey) GetSApikeyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SApikeyKey
}

// GetSApikeyKeyOk returns a tuple with the SApikeyKey field value
// and a boolean to check if the value has been set.
func (o *CustomApikey) GetSApikeyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SApikeyKey, true
}

// SetSApikeyKey sets field value
func (o *CustomApikey) SetSApikeyKey(v string) {
	o.SApikeyKey = v
}

// GetSApikeySecret returns the SApikeySecret field value
func (o *CustomApikey) GetSApikeySecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SApikeySecret
}

// GetSApikeySecretOk returns a tuple with the SApikeySecret field value
// and a boolean to check if the value has been set.
func (o *CustomApikey) GetSApikeySecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SApikeySecret, true
}

// SetSApikeySecret sets field value
func (o *CustomApikey) SetSApikeySecret(v string) {
	o.SApikeySecret = v
}

func (o CustomApikey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomApikey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sApikeyKey"] = o.SApikeyKey
	toSerialize["sApikeySecret"] = o.SApikeySecret
	return toSerialize, nil
}

func (o *CustomApikey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sApikeyKey",
		"sApikeySecret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomApikey := _CustomApikey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomApikey)

	if err != nil {
		return err
	}

	*o = CustomApikey(varCustomApikey)

	return err
}

type NullableCustomApikey struct {
	value *CustomApikey
	isSet bool
}

func (v NullableCustomApikey) Get() *CustomApikey {
	return v.value
}

func (v *NullableCustomApikey) Set(val *CustomApikey) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomApikey) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomApikey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomApikey(val *CustomApikey) *NullableCustomApikey {
	return &NullableCustomApikey{value: val, isSet: true}
}

func (v NullableCustomApikey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomApikey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


