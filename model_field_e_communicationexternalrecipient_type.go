/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECommunicationexternalrecipientType The type of Communicationexternalrecipient
type FieldECommunicationexternalrecipientType string

// List of Field-eCommunicationexternalrecipientType
const (
	TO FieldECommunicationexternalrecipientType = "To"
	CC FieldECommunicationexternalrecipientType = "Cc"
	BCC FieldECommunicationexternalrecipientType = "Bcc"
)

// All allowed values of FieldECommunicationexternalrecipientType enum
var AllowedFieldECommunicationexternalrecipientTypeEnumValues = []FieldECommunicationexternalrecipientType{
	"To",
	"Cc",
	"Bcc",
}

func (v *FieldECommunicationexternalrecipientType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECommunicationexternalrecipientType(value)
	for _, existing := range AllowedFieldECommunicationexternalrecipientTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECommunicationexternalrecipientType", value)
}

// NewFieldECommunicationexternalrecipientTypeFromValue returns a pointer to a valid FieldECommunicationexternalrecipientType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECommunicationexternalrecipientTypeFromValue(v string) (*FieldECommunicationexternalrecipientType, error) {
	ev := FieldECommunicationexternalrecipientType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECommunicationexternalrecipientType: valid values are %v", v, AllowedFieldECommunicationexternalrecipientTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECommunicationexternalrecipientType) IsValid() bool {
	for _, existing := range AllowedFieldECommunicationexternalrecipientTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCommunicationexternalrecipientType value
func (v FieldECommunicationexternalrecipientType) Ptr() *FieldECommunicationexternalrecipientType {
	return &v
}

type NullableFieldECommunicationexternalrecipientType struct {
	value *FieldECommunicationexternalrecipientType
	isSet bool
}

func (v NullableFieldECommunicationexternalrecipientType) Get() *FieldECommunicationexternalrecipientType {
	return v.value
}

func (v *NullableFieldECommunicationexternalrecipientType) Set(val *FieldECommunicationexternalrecipientType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECommunicationexternalrecipientType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECommunicationexternalrecipientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECommunicationexternalrecipientType(val *FieldECommunicationexternalrecipientType) *NullableFieldECommunicationexternalrecipientType {
	return &NullableFieldECommunicationexternalrecipientType{value: val, isSet: true}
}

func (v NullableFieldECommunicationexternalrecipientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECommunicationexternalrecipientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

