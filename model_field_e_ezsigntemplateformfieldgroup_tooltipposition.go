/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplateformfieldgroupTooltipposition The location of the tooltip relative to the Ezsigntemplateformfieldgroup's location.
type FieldEEzsigntemplateformfieldgroupTooltipposition string

// List of Field-eEzsigntemplateformfieldgroupTooltipposition
const (
	TOP_LEFT FieldEEzsigntemplateformfieldgroupTooltipposition = "TopLeft"
	TOP_CENTER FieldEEzsigntemplateformfieldgroupTooltipposition = "TopCenter"
	TOP_RIGHT FieldEEzsigntemplateformfieldgroupTooltipposition = "TopRight"
	MIDDLE_LEFT FieldEEzsigntemplateformfieldgroupTooltipposition = "MiddleLeft"
	MIDDLE_RIGHT FieldEEzsigntemplateformfieldgroupTooltipposition = "MiddleRight"
	BOTTOM_LEFT FieldEEzsigntemplateformfieldgroupTooltipposition = "BottomLeft"
	BOTTOM_CENTER FieldEEzsigntemplateformfieldgroupTooltipposition = "BottomCenter"
	BOTTOM_RIGHT FieldEEzsigntemplateformfieldgroupTooltipposition = "BottomRight"
)

// All allowed values of FieldEEzsigntemplateformfieldgroupTooltipposition enum
var AllowedFieldEEzsigntemplateformfieldgroupTooltippositionEnumValues = []FieldEEzsigntemplateformfieldgroupTooltipposition{
	"TopLeft",
	"TopCenter",
	"TopRight",
	"MiddleLeft",
	"MiddleRight",
	"BottomLeft",
	"BottomCenter",
	"BottomRight",
}

func (v *FieldEEzsigntemplateformfieldgroupTooltipposition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplateformfieldgroupTooltipposition(value)
	for _, existing := range AllowedFieldEEzsigntemplateformfieldgroupTooltippositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplateformfieldgroupTooltipposition", value)
}

// NewFieldEEzsigntemplateformfieldgroupTooltippositionFromValue returns a pointer to a valid FieldEEzsigntemplateformfieldgroupTooltipposition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplateformfieldgroupTooltippositionFromValue(v string) (*FieldEEzsigntemplateformfieldgroupTooltipposition, error) {
	ev := FieldEEzsigntemplateformfieldgroupTooltipposition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplateformfieldgroupTooltipposition: valid values are %v", v, AllowedFieldEEzsigntemplateformfieldgroupTooltippositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplateformfieldgroupTooltipposition) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplateformfieldgroupTooltippositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplateformfieldgroupTooltipposition value
func (v FieldEEzsigntemplateformfieldgroupTooltipposition) Ptr() *FieldEEzsigntemplateformfieldgroupTooltipposition {
	return &v
}

type NullableFieldEEzsigntemplateformfieldgroupTooltipposition struct {
	value *FieldEEzsigntemplateformfieldgroupTooltipposition
	isSet bool
}

func (v NullableFieldEEzsigntemplateformfieldgroupTooltipposition) Get() *FieldEEzsigntemplateformfieldgroupTooltipposition {
	return v.value
}

func (v *NullableFieldEEzsigntemplateformfieldgroupTooltipposition) Set(val *FieldEEzsigntemplateformfieldgroupTooltipposition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplateformfieldgroupTooltipposition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplateformfieldgroupTooltipposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplateformfieldgroupTooltipposition(val *FieldEEzsigntemplateformfieldgroupTooltipposition) *NullableFieldEEzsigntemplateformfieldgroupTooltipposition {
	return &NullableFieldEEzsigntemplateformfieldgroupTooltipposition{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplateformfieldgroupTooltipposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplateformfieldgroupTooltipposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

