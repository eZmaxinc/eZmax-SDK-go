/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEActivesessionWeekdaystart The weekday start of the User.
type FieldEActivesessionWeekdaystart string

// List of Field-eActivesessionWeekdaystart
const (
	SUNDAY FieldEActivesessionWeekdaystart = "Sunday"
	MONDAY FieldEActivesessionWeekdaystart = "Monday"
	TUESDAY FieldEActivesessionWeekdaystart = "Tuesday"
	WEDNESDAY FieldEActivesessionWeekdaystart = "Wednesday"
	THURSDAY FieldEActivesessionWeekdaystart = "Thursday"
	FRIDAY FieldEActivesessionWeekdaystart = "Friday"
	SATURDAY FieldEActivesessionWeekdaystart = "Saturday"
)

// All allowed values of FieldEActivesessionWeekdaystart enum
var AllowedFieldEActivesessionWeekdaystartEnumValues = []FieldEActivesessionWeekdaystart{
	"Sunday",
	"Monday",
	"Tuesday",
	"Wednesday",
	"Thursday",
	"Friday",
	"Saturday",
}

func (v *FieldEActivesessionWeekdaystart) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEActivesessionWeekdaystart(value)
	for _, existing := range AllowedFieldEActivesessionWeekdaystartEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEActivesessionWeekdaystart", value)
}

// NewFieldEActivesessionWeekdaystartFromValue returns a pointer to a valid FieldEActivesessionWeekdaystart
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEActivesessionWeekdaystartFromValue(v string) (*FieldEActivesessionWeekdaystart, error) {
	ev := FieldEActivesessionWeekdaystart(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEActivesessionWeekdaystart: valid values are %v", v, AllowedFieldEActivesessionWeekdaystartEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEActivesessionWeekdaystart) IsValid() bool {
	for _, existing := range AllowedFieldEActivesessionWeekdaystartEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eActivesessionWeekdaystart value
func (v FieldEActivesessionWeekdaystart) Ptr() *FieldEActivesessionWeekdaystart {
	return &v
}

type NullableFieldEActivesessionWeekdaystart struct {
	value *FieldEActivesessionWeekdaystart
	isSet bool
}

func (v NullableFieldEActivesessionWeekdaystart) Get() *FieldEActivesessionWeekdaystart {
	return v.value
}

func (v *NullableFieldEActivesessionWeekdaystart) Set(val *FieldEActivesessionWeekdaystart) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEActivesessionWeekdaystart) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEActivesessionWeekdaystart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEActivesessionWeekdaystart(val *FieldEActivesessionWeekdaystart) *NullableFieldEActivesessionWeekdaystart {
	return &NullableFieldEActivesessionWeekdaystart{value: val, isSet: true}
}

func (v NullableFieldEActivesessionWeekdaystart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEActivesessionWeekdaystart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

