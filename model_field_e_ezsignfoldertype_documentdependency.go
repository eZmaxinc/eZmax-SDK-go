/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfoldertypeDocumentdependency Indicates if document dependencies apply to all users or just to Ezsignsigner
type FieldEEzsignfoldertypeDocumentdependency string

// List of Field-eEzsignfoldertypeDocumentdependency
const (
	ALL FieldEEzsignfoldertypeDocumentdependency = "All"
	EZSIGNSIGNER_ONLY FieldEEzsignfoldertypeDocumentdependency = "EzsignsignerOnly"
)

// All allowed values of FieldEEzsignfoldertypeDocumentdependency enum
var AllowedFieldEEzsignfoldertypeDocumentdependencyEnumValues = []FieldEEzsignfoldertypeDocumentdependency{
	"All",
	"EzsignsignerOnly",
}

func (v *FieldEEzsignfoldertypeDocumentdependency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfoldertypeDocumentdependency(value)
	for _, existing := range AllowedFieldEEzsignfoldertypeDocumentdependencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfoldertypeDocumentdependency", value)
}

// NewFieldEEzsignfoldertypeDocumentdependencyFromValue returns a pointer to a valid FieldEEzsignfoldertypeDocumentdependency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfoldertypeDocumentdependencyFromValue(v string) (*FieldEEzsignfoldertypeDocumentdependency, error) {
	ev := FieldEEzsignfoldertypeDocumentdependency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfoldertypeDocumentdependency: valid values are %v", v, AllowedFieldEEzsignfoldertypeDocumentdependencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfoldertypeDocumentdependency) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfoldertypeDocumentdependencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfoldertypeDocumentdependency value
func (v FieldEEzsignfoldertypeDocumentdependency) Ptr() *FieldEEzsignfoldertypeDocumentdependency {
	return &v
}

type NullableFieldEEzsignfoldertypeDocumentdependency struct {
	value *FieldEEzsignfoldertypeDocumentdependency
	isSet bool
}

func (v NullableFieldEEzsignfoldertypeDocumentdependency) Get() *FieldEEzsignfoldertypeDocumentdependency {
	return v.value
}

func (v *NullableFieldEEzsignfoldertypeDocumentdependency) Set(val *FieldEEzsignfoldertypeDocumentdependency) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfoldertypeDocumentdependency) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfoldertypeDocumentdependency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfoldertypeDocumentdependency(val *FieldEEzsignfoldertypeDocumentdependency) *NullableFieldEEzsignfoldertypeDocumentdependency {
	return &NullableFieldEEzsignfoldertypeDocumentdependency{value: val, isSet: true}
}

func (v NullableFieldEEzsignfoldertypeDocumentdependency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfoldertypeDocumentdependency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

