/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatesignerMapping Mapping configuration to use when template is apply to an document.  1. **Manual** User need to choose mapping manually. 2. **Creator** mapping will be set to creator of template. 3. **User** mapping will be set to fkiUserID 4. **Usergroup** mapping will be set to fkiUsergroupID.
type FieldEEzsigntemplatesignerMapping string

// List of Field-eEzsigntemplatesignerMapping
const (
	MANUAL FieldEEzsigntemplatesignerMapping = "Manual"
	CREATOR FieldEEzsigntemplatesignerMapping = "Creator"
	USER FieldEEzsigntemplatesignerMapping = "User"
	USERGROUP FieldEEzsigntemplatesignerMapping = "Usergroup"
)

// All allowed values of FieldEEzsigntemplatesignerMapping enum
var AllowedFieldEEzsigntemplatesignerMappingEnumValues = []FieldEEzsigntemplatesignerMapping{
	"Manual",
	"Creator",
	"User",
	"Usergroup",
}

func (v *FieldEEzsigntemplatesignerMapping) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatesignerMapping(value)
	for _, existing := range AllowedFieldEEzsigntemplatesignerMappingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatesignerMapping", value)
}

// NewFieldEEzsigntemplatesignerMappingFromValue returns a pointer to a valid FieldEEzsigntemplatesignerMapping
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatesignerMappingFromValue(v string) (*FieldEEzsigntemplatesignerMapping, error) {
	ev := FieldEEzsigntemplatesignerMapping(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatesignerMapping: valid values are %v", v, AllowedFieldEEzsigntemplatesignerMappingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatesignerMapping) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatesignerMappingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatesignerMapping value
func (v FieldEEzsigntemplatesignerMapping) Ptr() *FieldEEzsigntemplatesignerMapping {
	return &v
}

type NullableFieldEEzsigntemplatesignerMapping struct {
	value *FieldEEzsigntemplatesignerMapping
	isSet bool
}

func (v NullableFieldEEzsigntemplatesignerMapping) Get() *FieldEEzsigntemplatesignerMapping {
	return v.value
}

func (v *NullableFieldEEzsigntemplatesignerMapping) Set(val *FieldEEzsigntemplatesignerMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatesignerMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatesignerMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatesignerMapping(val *FieldEEzsigntemplatesignerMapping) *NullableFieldEEzsigntemplatesignerMapping {
	return &NullableFieldEEzsigntemplatesignerMapping{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatesignerMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatesignerMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

