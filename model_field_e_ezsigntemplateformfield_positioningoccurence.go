/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplateformfieldPositioningoccurence The occurence of the pattern to add the Ezsigntemplateformfield  This will be required if **eEzsigntemplateformfieldPositioning** is set to **PerCoordinates**
type FieldEEzsigntemplateformfieldPositioningoccurence string

// List of Field-eEzsigntemplateformfieldPositioningoccurence
const (
	ALL FieldEEzsigntemplateformfieldPositioningoccurence = "All"
	FIRST FieldEEzsigntemplateformfieldPositioningoccurence = "First"
	LAST FieldEEzsigntemplateformfieldPositioningoccurence = "Last"
)

// All allowed values of FieldEEzsigntemplateformfieldPositioningoccurence enum
var AllowedFieldEEzsigntemplateformfieldPositioningoccurenceEnumValues = []FieldEEzsigntemplateformfieldPositioningoccurence{
	"All",
	"First",
	"Last",
}

func (v *FieldEEzsigntemplateformfieldPositioningoccurence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplateformfieldPositioningoccurence(value)
	for _, existing := range AllowedFieldEEzsigntemplateformfieldPositioningoccurenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplateformfieldPositioningoccurence", value)
}

// NewFieldEEzsigntemplateformfieldPositioningoccurenceFromValue returns a pointer to a valid FieldEEzsigntemplateformfieldPositioningoccurence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplateformfieldPositioningoccurenceFromValue(v string) (*FieldEEzsigntemplateformfieldPositioningoccurence, error) {
	ev := FieldEEzsigntemplateformfieldPositioningoccurence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplateformfieldPositioningoccurence: valid values are %v", v, AllowedFieldEEzsigntemplateformfieldPositioningoccurenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplateformfieldPositioningoccurence) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplateformfieldPositioningoccurenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplateformfieldPositioningoccurence value
func (v FieldEEzsigntemplateformfieldPositioningoccurence) Ptr() *FieldEEzsigntemplateformfieldPositioningoccurence {
	return &v
}

type NullableFieldEEzsigntemplateformfieldPositioningoccurence struct {
	value *FieldEEzsigntemplateformfieldPositioningoccurence
	isSet bool
}

func (v NullableFieldEEzsigntemplateformfieldPositioningoccurence) Get() *FieldEEzsigntemplateformfieldPositioningoccurence {
	return v.value
}

func (v *NullableFieldEEzsigntemplateformfieldPositioningoccurence) Set(val *FieldEEzsigntemplateformfieldPositioningoccurence) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplateformfieldPositioningoccurence) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplateformfieldPositioningoccurence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplateformfieldPositioningoccurence(val *FieldEEzsigntemplateformfieldPositioningoccurence) *NullableFieldEEzsigntemplateformfieldPositioningoccurence {
	return &NullableFieldEEzsigntemplateformfieldPositioningoccurence{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplateformfieldPositioningoccurence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplateformfieldPositioningoccurence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

