/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEUserOrigin The origin of the User
type FieldEUserOrigin string

// List of Field-eUserOrigin
const (
	BUILT_IN FieldEUserOrigin = "BuiltIn"
	EXTERNAL FieldEUserOrigin = "External"
)

// All allowed values of FieldEUserOrigin enum
var AllowedFieldEUserOriginEnumValues = []FieldEUserOrigin{
	"BuiltIn",
	"External",
}

func (v *FieldEUserOrigin) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEUserOrigin(value)
	for _, existing := range AllowedFieldEUserOriginEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEUserOrigin", value)
}

// NewFieldEUserOriginFromValue returns a pointer to a valid FieldEUserOrigin
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEUserOriginFromValue(v string) (*FieldEUserOrigin, error) {
	ev := FieldEUserOrigin(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEUserOrigin: valid values are %v", v, AllowedFieldEUserOriginEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEUserOrigin) IsValid() bool {
	for _, existing := range AllowedFieldEUserOriginEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eUserOrigin value
func (v FieldEUserOrigin) Ptr() *FieldEUserOrigin {
	return &v
}

type NullableFieldEUserOrigin struct {
	value *FieldEUserOrigin
	isSet bool
}

func (v NullableFieldEUserOrigin) Get() *FieldEUserOrigin {
	return v.value
}

func (v *NullableFieldEUserOrigin) Set(val *FieldEUserOrigin) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEUserOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEUserOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEUserOrigin(val *FieldEUserOrigin) *NullableFieldEUserOrigin {
	return &NullableFieldEUserOrigin{value: val, isSet: true}
}

func (v NullableFieldEUserOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEUserOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

