/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECommunicationrecipientType The type for the Communicationrecipient.  Only used when eCommunicationType is **Email**
type FieldECommunicationrecipientType string

// List of Field-eCommunicationrecipientType
const (
	TO FieldECommunicationrecipientType = "To"
	CC FieldECommunicationrecipientType = "Cc"
	BCC FieldECommunicationrecipientType = "Bcc"
)

// All allowed values of FieldECommunicationrecipientType enum
var AllowedFieldECommunicationrecipientTypeEnumValues = []FieldECommunicationrecipientType{
	"To",
	"Cc",
	"Bcc",
}

func (v *FieldECommunicationrecipientType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECommunicationrecipientType(value)
	for _, existing := range AllowedFieldECommunicationrecipientTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECommunicationrecipientType", value)
}

// NewFieldECommunicationrecipientTypeFromValue returns a pointer to a valid FieldECommunicationrecipientType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECommunicationrecipientTypeFromValue(v string) (*FieldECommunicationrecipientType, error) {
	ev := FieldECommunicationrecipientType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECommunicationrecipientType: valid values are %v", v, AllowedFieldECommunicationrecipientTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECommunicationrecipientType) IsValid() bool {
	for _, existing := range AllowedFieldECommunicationrecipientTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCommunicationrecipientType value
func (v FieldECommunicationrecipientType) Ptr() *FieldECommunicationrecipientType {
	return &v
}

type NullableFieldECommunicationrecipientType struct {
	value *FieldECommunicationrecipientType
	isSet bool
}

func (v NullableFieldECommunicationrecipientType) Get() *FieldECommunicationrecipientType {
	return v.value
}

func (v *NullableFieldECommunicationrecipientType) Set(val *FieldECommunicationrecipientType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECommunicationrecipientType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECommunicationrecipientType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECommunicationrecipientType(val *FieldECommunicationrecipientType) *NullableFieldECommunicationrecipientType {
	return &NullableFieldECommunicationrecipientType{value: val, isSet: true}
}

func (v NullableFieldECommunicationrecipientType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECommunicationrecipientType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

