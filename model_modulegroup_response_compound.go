/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModulegroupResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModulegroupResponseCompound{}

// ModulegroupResponseCompound A Modulegroup Object
type ModulegroupResponseCompound struct {
	// The unique ID of the Modulegroup
	PkiModulegroupID int32 `json:"pkiModulegroupID"`
	// The name of the Modulegroup in the language of the requester
	SModulegroupNameX string `json:"sModulegroupNameX"`
	AObjModule []ModuleResponseCompound `json:"a_objModule,omitempty"`
}

type _ModulegroupResponseCompound ModulegroupResponseCompound

// NewModulegroupResponseCompound instantiates a new ModulegroupResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModulegroupResponseCompound(pkiModulegroupID int32, sModulegroupNameX string) *ModulegroupResponseCompound {
	this := ModulegroupResponseCompound{}
	this.PkiModulegroupID = pkiModulegroupID
	this.SModulegroupNameX = sModulegroupNameX
	return &this
}

// NewModulegroupResponseCompoundWithDefaults instantiates a new ModulegroupResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModulegroupResponseCompoundWithDefaults() *ModulegroupResponseCompound {
	this := ModulegroupResponseCompound{}
	return &this
}

// GetPkiModulegroupID returns the PkiModulegroupID field value
func (o *ModulegroupResponseCompound) GetPkiModulegroupID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiModulegroupID
}

// GetPkiModulegroupIDOk returns a tuple with the PkiModulegroupID field value
// and a boolean to check if the value has been set.
func (o *ModulegroupResponseCompound) GetPkiModulegroupIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiModulegroupID, true
}

// SetPkiModulegroupID sets field value
func (o *ModulegroupResponseCompound) SetPkiModulegroupID(v int32) {
	o.PkiModulegroupID = v
}

// GetSModulegroupNameX returns the SModulegroupNameX field value
func (o *ModulegroupResponseCompound) GetSModulegroupNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SModulegroupNameX
}

// GetSModulegroupNameXOk returns a tuple with the SModulegroupNameX field value
// and a boolean to check if the value has been set.
func (o *ModulegroupResponseCompound) GetSModulegroupNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SModulegroupNameX, true
}

// SetSModulegroupNameX sets field value
func (o *ModulegroupResponseCompound) SetSModulegroupNameX(v string) {
	o.SModulegroupNameX = v
}

// GetAObjModule returns the AObjModule field value if set, zero value otherwise.
func (o *ModulegroupResponseCompound) GetAObjModule() []ModuleResponseCompound {
	if o == nil || IsNil(o.AObjModule) {
		var ret []ModuleResponseCompound
		return ret
	}
	return o.AObjModule
}

// GetAObjModuleOk returns a tuple with the AObjModule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModulegroupResponseCompound) GetAObjModuleOk() ([]ModuleResponseCompound, bool) {
	if o == nil || IsNil(o.AObjModule) {
		return nil, false
	}
	return o.AObjModule, true
}

// HasAObjModule returns a boolean if a field has been set.
func (o *ModulegroupResponseCompound) HasAObjModule() bool {
	if o != nil && !IsNil(o.AObjModule) {
		return true
	}

	return false
}

// SetAObjModule gets a reference to the given []ModuleResponseCompound and assigns it to the AObjModule field.
func (o *ModulegroupResponseCompound) SetAObjModule(v []ModuleResponseCompound) {
	o.AObjModule = v
}

func (o ModulegroupResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModulegroupResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiModulegroupID"] = o.PkiModulegroupID
	toSerialize["sModulegroupNameX"] = o.SModulegroupNameX
	if !IsNil(o.AObjModule) {
		toSerialize["a_objModule"] = o.AObjModule
	}
	return toSerialize, nil
}

func (o *ModulegroupResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiModulegroupID",
		"sModulegroupNameX",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModulegroupResponseCompound := _ModulegroupResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModulegroupResponseCompound)

	if err != nil {
		return err
	}

	*o = ModulegroupResponseCompound(varModulegroupResponseCompound)

	return err
}

type NullableModulegroupResponseCompound struct {
	value *ModulegroupResponseCompound
	isSet bool
}

func (v NullableModulegroupResponseCompound) Get() *ModulegroupResponseCompound {
	return v.value
}

func (v *NullableModulegroupResponseCompound) Set(val *ModulegroupResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableModulegroupResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableModulegroupResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulegroupResponseCompound(val *ModulegroupResponseCompound) *NullableModulegroupResponseCompound {
	return &NullableModulegroupResponseCompound{value: val, isSet: true}
}

func (v NullableModulegroupResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulegroupResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


