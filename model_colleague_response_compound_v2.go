/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ColleagueResponseCompoundV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColleagueResponseCompoundV2{}

// ColleagueResponseCompoundV2 A Colleague Object
type ColleagueResponseCompoundV2 struct {
	ColleagueResponseV2
}

type _ColleagueResponseCompoundV2 ColleagueResponseCompoundV2

// NewColleagueResponseCompoundV2 instantiates a new ColleagueResponseCompoundV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColleagueResponseCompoundV2(pkiColleagueID int32, fkiUserID int32, fkiUserIDColleague int32, bColleagueEzsignemail bool, bColleagueFinancial bool, bColleagueUsecloneemail bool, bColleagueAttachment bool, bColleagueCanafe bool, bColleaguePermission bool, bColleagueRealestatecompleted bool, eColleagueEzsign FieldEColleagueEzsign, eColleagueRealestateinprogress FieldEColleagueRealestateinprogess, objUserName CustomUserNameResponse, objAudit CommonAudit) *ColleagueResponseCompoundV2 {
	this := ColleagueResponseCompoundV2{}
	this.PkiColleagueID = pkiColleagueID
	this.FkiUserID = fkiUserID
	this.FkiUserIDColleague = fkiUserIDColleague
	this.BColleagueEzsignemail = bColleagueEzsignemail
	this.BColleagueFinancial = bColleagueFinancial
	this.BColleagueUsecloneemail = bColleagueUsecloneemail
	this.BColleagueAttachment = bColleagueAttachment
	this.BColleagueCanafe = bColleagueCanafe
	this.BColleaguePermission = bColleaguePermission
	this.BColleagueRealestatecompleted = bColleagueRealestatecompleted
	this.EColleagueEzsign = eColleagueEzsign
	this.EColleagueRealestateinprogress = eColleagueRealestateinprogress
	this.ObjUserName = objUserName
	this.ObjAudit = objAudit
	return &this
}

// NewColleagueResponseCompoundV2WithDefaults instantiates a new ColleagueResponseCompoundV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColleagueResponseCompoundV2WithDefaults() *ColleagueResponseCompoundV2 {
	this := ColleagueResponseCompoundV2{}
	return &this
}

func (o ColleagueResponseCompoundV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColleagueResponseCompoundV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

func (o *ColleagueResponseCompoundV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiColleagueID",
		"fkiUserID",
		"fkiUserIDColleague",
		"bColleagueEzsignemail",
		"bColleagueFinancial",
		"bColleagueUsecloneemail",
		"bColleagueAttachment",
		"bColleagueCanafe",
		"bColleaguePermission",
		"bColleagueRealestatecompleted",
		"eColleagueEzsign",
		"eColleagueRealestateinprogress",
		"objUserName",
		"objAudit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varColleagueResponseCompoundV2 := _ColleagueResponseCompoundV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varColleagueResponseCompoundV2)

	if err != nil {
		return err
	}

	*o = ColleagueResponseCompoundV2(varColleagueResponseCompoundV2)

	return err
}

type NullableColleagueResponseCompoundV2 struct {
	value *ColleagueResponseCompoundV2
	isSet bool
}

func (v NullableColleagueResponseCompoundV2) Get() *ColleagueResponseCompoundV2 {
	return v.value
}

func (v *NullableColleagueResponseCompoundV2) Set(val *ColleagueResponseCompoundV2) {
	v.value = val
	v.isSet = true
}

func (v NullableColleagueResponseCompoundV2) IsSet() bool {
	return v.isSet
}

func (v *NullableColleagueResponseCompoundV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColleagueResponseCompoundV2(val *ColleagueResponseCompoundV2) *NullableColleagueResponseCompoundV2 {
	return &NullableColleagueResponseCompoundV2{value: val, isSet: true}
}

func (v NullableColleagueResponseCompoundV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColleagueResponseCompoundV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


