/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEColleagueEzsign The permission of the cloning user for Ezsign
type FieldEColleagueEzsign string

// List of Field-eColleagueEzsign
const (
	NO FieldEColleagueEzsign = "No"
	READ FieldEColleagueEzsign = "Read"
	MODIFY FieldEColleagueEzsign = "Modify"
	FULL FieldEColleagueEzsign = "Full"
)

// All allowed values of FieldEColleagueEzsign enum
var AllowedFieldEColleagueEzsignEnumValues = []FieldEColleagueEzsign{
	"No",
	"Read",
	"Modify",
	"Full",
}

func (v *FieldEColleagueEzsign) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEColleagueEzsign(value)
	for _, existing := range AllowedFieldEColleagueEzsignEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEColleagueEzsign", value)
}

// NewFieldEColleagueEzsignFromValue returns a pointer to a valid FieldEColleagueEzsign
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEColleagueEzsignFromValue(v string) (*FieldEColleagueEzsign, error) {
	ev := FieldEColleagueEzsign(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEColleagueEzsign: valid values are %v", v, AllowedFieldEColleagueEzsignEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEColleagueEzsign) IsValid() bool {
	for _, existing := range AllowedFieldEColleagueEzsignEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eColleagueEzsign value
func (v FieldEColleagueEzsign) Ptr() *FieldEColleagueEzsign {
	return &v
}

type NullableFieldEColleagueEzsign struct {
	value *FieldEColleagueEzsign
	isSet bool
}

func (v NullableFieldEColleagueEzsign) Get() *FieldEColleagueEzsign {
	return v.value
}

func (v *NullableFieldEColleagueEzsign) Set(val *FieldEColleagueEzsign) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEColleagueEzsign) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEColleagueEzsign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEColleagueEzsign(val *FieldEColleagueEzsign) *NullableFieldEColleagueEzsign {
	return &NullableFieldEColleagueEzsign{value: val, isSet: true}
}

func (v NullableFieldEColleagueEzsign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEColleagueEzsign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

