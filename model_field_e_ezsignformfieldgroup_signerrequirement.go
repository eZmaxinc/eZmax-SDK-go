/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignformfieldgroupSignerrequirement The Signer requirement of the Ezsignformfieldgroup. **All** means anyone can fill it, **One** means a specific person must fill it.
type FieldEEzsignformfieldgroupSignerrequirement string

// List of Field-eEzsignformfieldgroupSignerrequirement
const (
	ALL FieldEEzsignformfieldgroupSignerrequirement = "All"
	ONE FieldEEzsignformfieldgroupSignerrequirement = "One"
)

// All allowed values of FieldEEzsignformfieldgroupSignerrequirement enum
var AllowedFieldEEzsignformfieldgroupSignerrequirementEnumValues = []FieldEEzsignformfieldgroupSignerrequirement{
	"All",
	"One",
}

func (v *FieldEEzsignformfieldgroupSignerrequirement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignformfieldgroupSignerrequirement(value)
	for _, existing := range AllowedFieldEEzsignformfieldgroupSignerrequirementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignformfieldgroupSignerrequirement", value)
}

// NewFieldEEzsignformfieldgroupSignerrequirementFromValue returns a pointer to a valid FieldEEzsignformfieldgroupSignerrequirement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignformfieldgroupSignerrequirementFromValue(v string) (*FieldEEzsignformfieldgroupSignerrequirement, error) {
	ev := FieldEEzsignformfieldgroupSignerrequirement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignformfieldgroupSignerrequirement: valid values are %v", v, AllowedFieldEEzsignformfieldgroupSignerrequirementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignformfieldgroupSignerrequirement) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignformfieldgroupSignerrequirementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignformfieldgroupSignerrequirement value
func (v FieldEEzsignformfieldgroupSignerrequirement) Ptr() *FieldEEzsignformfieldgroupSignerrequirement {
	return &v
}

type NullableFieldEEzsignformfieldgroupSignerrequirement struct {
	value *FieldEEzsignformfieldgroupSignerrequirement
	isSet bool
}

func (v NullableFieldEEzsignformfieldgroupSignerrequirement) Get() *FieldEEzsignformfieldgroupSignerrequirement {
	return v.value
}

func (v *NullableFieldEEzsignformfieldgroupSignerrequirement) Set(val *FieldEEzsignformfieldgroupSignerrequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignformfieldgroupSignerrequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignformfieldgroupSignerrequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignformfieldgroupSignerrequirement(val *FieldEEzsignformfieldgroupSignerrequirement) *NullableFieldEEzsignformfieldgroupSignerrequirement {
	return &NullableFieldEEzsignformfieldgroupSignerrequirement{value: val, isSet: true}
}

func (v NullableFieldEEzsignformfieldgroupSignerrequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignformfieldgroupSignerrequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

