/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScimServiceProviderConfigFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimServiceProviderConfigFilter{}

// ScimServiceProviderConfigFilter A complex type that specifies FILTER options.
type ScimServiceProviderConfigFilter struct {
	// A Boolean value specifying whether or not the operation is supported.
	Supported bool `json:"supported"`
	// An integer value specifying the maximum number of resources returned in a response.
	MaxResults int32 `json:"maxResults"`
}

type _ScimServiceProviderConfigFilter ScimServiceProviderConfigFilter

// NewScimServiceProviderConfigFilter instantiates a new ScimServiceProviderConfigFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimServiceProviderConfigFilter(supported bool, maxResults int32) *ScimServiceProviderConfigFilter {
	this := ScimServiceProviderConfigFilter{}
	this.Supported = supported
	this.MaxResults = maxResults
	return &this
}

// NewScimServiceProviderConfigFilterWithDefaults instantiates a new ScimServiceProviderConfigFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimServiceProviderConfigFilterWithDefaults() *ScimServiceProviderConfigFilter {
	this := ScimServiceProviderConfigFilter{}
	return &this
}

// GetSupported returns the Supported field value
func (o *ScimServiceProviderConfigFilter) GetSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value
// and a boolean to check if the value has been set.
func (o *ScimServiceProviderConfigFilter) GetSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supported, true
}

// SetSupported sets field value
func (o *ScimServiceProviderConfigFilter) SetSupported(v bool) {
	o.Supported = v
}

// GetMaxResults returns the MaxResults field value
func (o *ScimServiceProviderConfigFilter) GetMaxResults() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value
// and a boolean to check if the value has been set.
func (o *ScimServiceProviderConfigFilter) GetMaxResultsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxResults, true
}

// SetMaxResults sets field value
func (o *ScimServiceProviderConfigFilter) SetMaxResults(v int32) {
	o.MaxResults = v
}

func (o ScimServiceProviderConfigFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimServiceProviderConfigFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supported"] = o.Supported
	toSerialize["maxResults"] = o.MaxResults
	return toSerialize, nil
}

func (o *ScimServiceProviderConfigFilter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"supported",
		"maxResults",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScimServiceProviderConfigFilter := _ScimServiceProviderConfigFilter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScimServiceProviderConfigFilter)

	if err != nil {
		return err
	}

	*o = ScimServiceProviderConfigFilter(varScimServiceProviderConfigFilter)

	return err
}

type NullableScimServiceProviderConfigFilter struct {
	value *ScimServiceProviderConfigFilter
	isSet bool
}

func (v NullableScimServiceProviderConfigFilter) Get() *ScimServiceProviderConfigFilter {
	return v.value
}

func (v *NullableScimServiceProviderConfigFilter) Set(val *ScimServiceProviderConfigFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableScimServiceProviderConfigFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableScimServiceProviderConfigFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimServiceProviderConfigFilter(val *ScimServiceProviderConfigFilter) *NullableScimServiceProviderConfigFilter {
	return &NullableScimServiceProviderConfigFilter{value: val, isSet: true}
}

func (v NullableScimServiceProviderConfigFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimServiceProviderConfigFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


