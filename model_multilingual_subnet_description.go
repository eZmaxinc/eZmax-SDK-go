/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the MultilingualSubnetDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultilingualSubnetDescription{}

// MultilingualSubnetDescription The description of the Subnet
type MultilingualSubnetDescription struct {
	// The description of the Subnet in French
	SSubnetDescription1 *string `json:"sSubnetDescription1,omitempty" validate:"regexp=^.{0,50}$"`
	// The description of the Subnet in English
	SSubnetDescription2 *string `json:"sSubnetDescription2,omitempty" validate:"regexp=^.{0,50}$"`
}

// NewMultilingualSubnetDescription instantiates a new MultilingualSubnetDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultilingualSubnetDescription() *MultilingualSubnetDescription {
	this := MultilingualSubnetDescription{}
	return &this
}

// NewMultilingualSubnetDescriptionWithDefaults instantiates a new MultilingualSubnetDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultilingualSubnetDescriptionWithDefaults() *MultilingualSubnetDescription {
	this := MultilingualSubnetDescription{}
	return &this
}

// GetSSubnetDescription1 returns the SSubnetDescription1 field value if set, zero value otherwise.
func (o *MultilingualSubnetDescription) GetSSubnetDescription1() string {
	if o == nil || IsNil(o.SSubnetDescription1) {
		var ret string
		return ret
	}
	return *o.SSubnetDescription1
}

// GetSSubnetDescription1Ok returns a tuple with the SSubnetDescription1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualSubnetDescription) GetSSubnetDescription1Ok() (*string, bool) {
	if o == nil || IsNil(o.SSubnetDescription1) {
		return nil, false
	}
	return o.SSubnetDescription1, true
}

// HasSSubnetDescription1 returns a boolean if a field has been set.
func (o *MultilingualSubnetDescription) HasSSubnetDescription1() bool {
	if o != nil && !IsNil(o.SSubnetDescription1) {
		return true
	}

	return false
}

// SetSSubnetDescription1 gets a reference to the given string and assigns it to the SSubnetDescription1 field.
func (o *MultilingualSubnetDescription) SetSSubnetDescription1(v string) {
	o.SSubnetDescription1 = &v
}

// GetSSubnetDescription2 returns the SSubnetDescription2 field value if set, zero value otherwise.
func (o *MultilingualSubnetDescription) GetSSubnetDescription2() string {
	if o == nil || IsNil(o.SSubnetDescription2) {
		var ret string
		return ret
	}
	return *o.SSubnetDescription2
}

// GetSSubnetDescription2Ok returns a tuple with the SSubnetDescription2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualSubnetDescription) GetSSubnetDescription2Ok() (*string, bool) {
	if o == nil || IsNil(o.SSubnetDescription2) {
		return nil, false
	}
	return o.SSubnetDescription2, true
}

// HasSSubnetDescription2 returns a boolean if a field has been set.
func (o *MultilingualSubnetDescription) HasSSubnetDescription2() bool {
	if o != nil && !IsNil(o.SSubnetDescription2) {
		return true
	}

	return false
}

// SetSSubnetDescription2 gets a reference to the given string and assigns it to the SSubnetDescription2 field.
func (o *MultilingualSubnetDescription) SetSSubnetDescription2(v string) {
	o.SSubnetDescription2 = &v
}

func (o MultilingualSubnetDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultilingualSubnetDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SSubnetDescription1) {
		toSerialize["sSubnetDescription1"] = o.SSubnetDescription1
	}
	if !IsNil(o.SSubnetDescription2) {
		toSerialize["sSubnetDescription2"] = o.SSubnetDescription2
	}
	return toSerialize, nil
}

type NullableMultilingualSubnetDescription struct {
	value *MultilingualSubnetDescription
	isSet bool
}

func (v NullableMultilingualSubnetDescription) Get() *MultilingualSubnetDescription {
	return v.value
}

func (v *NullableMultilingualSubnetDescription) Set(val *MultilingualSubnetDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableMultilingualSubnetDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableMultilingualSubnetDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultilingualSubnetDescription(val *MultilingualSubnetDescription) *NullableMultilingualSubnetDescription {
	return &NullableMultilingualSubnetDescription{value: val, isSet: true}
}

func (v NullableMultilingualSubnetDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultilingualSubnetDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


