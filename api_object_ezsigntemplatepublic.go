/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzsigntemplatepublicAPIService ObjectEzsigntemplatepublicAPI service
type ObjectEzsigntemplatepublicAPIService service

type ApiEzsigntemplatepublicCreateEzsignfolderV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	ezsigntemplatepublicCreateEzsignfolderV1Request *EzsigntemplatepublicCreateEzsignfolderV1Request
}

func (r ApiEzsigntemplatepublicCreateEzsignfolderV1Request) EzsigntemplatepublicCreateEzsignfolderV1Request(ezsigntemplatepublicCreateEzsignfolderV1Request EzsigntemplatepublicCreateEzsignfolderV1Request) ApiEzsigntemplatepublicCreateEzsignfolderV1Request {
	r.ezsigntemplatepublicCreateEzsignfolderV1Request = &ezsigntemplatepublicCreateEzsignfolderV1Request
	return r
}

func (r ApiEzsigntemplatepublicCreateEzsignfolderV1Request) Execute() (*EzsigntemplatepublicCreateEzsignfolderV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicCreateEzsignfolderV1Execute(r)
}

/*
EzsigntemplatepublicCreateEzsignfolderV1 Create an Ezsignfolder

Create an Ezsignfolder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepublicCreateEzsignfolderV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicCreateEzsignfolderV1(ctx context.Context) ApiEzsigntemplatepublicCreateEzsignfolderV1Request {
	return ApiEzsigntemplatepublicCreateEzsignfolderV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicCreateEzsignfolderV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicCreateEzsignfolderV1Execute(r ApiEzsigntemplatepublicCreateEzsignfolderV1Request) (*EzsigntemplatepublicCreateEzsignfolderV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicCreateEzsignfolderV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicCreateEzsignfolderV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/createEzsignfolder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsigntemplatepublicCreateEzsignfolderV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepublicCreateEzsignfolderV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepublicCreateEzsignfolderV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	ezsigntemplatepublicCreateObjectV1Request *EzsigntemplatepublicCreateObjectV1Request
}

func (r ApiEzsigntemplatepublicCreateObjectV1Request) EzsigntemplatepublicCreateObjectV1Request(ezsigntemplatepublicCreateObjectV1Request EzsigntemplatepublicCreateObjectV1Request) ApiEzsigntemplatepublicCreateObjectV1Request {
	r.ezsigntemplatepublicCreateObjectV1Request = &ezsigntemplatepublicCreateObjectV1Request
	return r
}

func (r ApiEzsigntemplatepublicCreateObjectV1Request) Execute() (*EzsigntemplatepublicCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicCreateObjectV1Execute(r)
}

/*
EzsigntemplatepublicCreateObjectV1 Create a new Ezsigntemplatepublic

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepublicCreateObjectV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicCreateObjectV1(ctx context.Context) ApiEzsigntemplatepublicCreateObjectV1Request {
	return ApiEzsigntemplatepublicCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicCreateObjectV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicCreateObjectV1Execute(r ApiEzsigntemplatepublicCreateObjectV1Request) (*EzsigntemplatepublicCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsigntemplatepublicCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepublicCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepublicCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	pkiEzsigntemplatepublicID int32
	ezsigntemplatepublicEditObjectV1Request *EzsigntemplatepublicEditObjectV1Request
}

func (r ApiEzsigntemplatepublicEditObjectV1Request) EzsigntemplatepublicEditObjectV1Request(ezsigntemplatepublicEditObjectV1Request EzsigntemplatepublicEditObjectV1Request) ApiEzsigntemplatepublicEditObjectV1Request {
	r.ezsigntemplatepublicEditObjectV1Request = &ezsigntemplatepublicEditObjectV1Request
	return r
}

func (r ApiEzsigntemplatepublicEditObjectV1Request) Execute() (*EzsigntemplatepublicEditObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicEditObjectV1Execute(r)
}

/*
EzsigntemplatepublicEditObjectV1 Edit an existing Ezsigntemplatepublic



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
 @return ApiEzsigntemplatepublicEditObjectV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicEditObjectV1(ctx context.Context, pkiEzsigntemplatepublicID int32) ApiEzsigntemplatepublicEditObjectV1Request {
	return ApiEzsigntemplatepublicEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicEditObjectV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicEditObjectV1Execute(r ApiEzsigntemplatepublicEditObjectV1Request) (*EzsigntemplatepublicEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepublicID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepublicID, "pkiEzsigntemplatepublicID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepublicID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be greater than 0")
	}
	if r.pkiEzsigntemplatepublicID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be less than 65535")
	}
	if r.ezsigntemplatepublicEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepublicEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepublicEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
}

func (r ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request(ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request {
	r.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request = &ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
	return r
}

func (r ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) Execute() (*EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Execute(r)
}

/*
EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1 Retrieve the Ezsigntemplatepublic details

Retrieve the Ezsigntemplatepublic details

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1(ctx context.Context) ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request {
	return ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Execute(r ApiEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request) (*EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatepublicGetEzsigntemplatepublicDetailsV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicGetFormsDataV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	pkiEzsigntemplatepublicID int32
}

func (r ApiEzsigntemplatepublicGetFormsDataV1Request) Execute() (*EzsigntemplatepublicGetFormsDataV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicGetFormsDataV1Execute(r)
}

/*
EzsigntemplatepublicGetFormsDataV1 Retrieve an existing Ezsigntemplatepublic's forms data



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepublicID
 @return ApiEzsigntemplatepublicGetFormsDataV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetFormsDataV1(ctx context.Context, pkiEzsigntemplatepublicID int32) ApiEzsigntemplatepublicGetFormsDataV1Request {
	return ApiEzsigntemplatepublicGetFormsDataV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicGetFormsDataV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetFormsDataV1Execute(r ApiEzsigntemplatepublicGetFormsDataV1Request) (*EzsigntemplatepublicGetFormsDataV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicGetFormsDataV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicGetFormsDataV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/getFormsData"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepublicID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepublicID, "pkiEzsigntemplatepublicID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepublicID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be greater than 0")
	}
	if r.pkiEzsigntemplatepublicID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiEzsigntemplatepublicGetListV1Request) EOrderBy(eOrderBy string) ApiEzsigntemplatepublicGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiEzsigntemplatepublicGetListV1Request) IRowMax(iRowMax int32) ApiEzsigntemplatepublicGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiEzsigntemplatepublicGetListV1Request) IRowOffset(iRowOffset int32) ApiEzsigntemplatepublicGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiEzsigntemplatepublicGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiEzsigntemplatepublicGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiEzsigntemplatepublicGetListV1Request) SFilter(sFilter string) ApiEzsigntemplatepublicGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiEzsigntemplatepublicGetListV1Request) Execute() (*EzsigntemplatepublicGetListV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicGetListV1Execute(r)
}

/*
EzsigntemplatepublicGetListV1 Retrieve Ezsigntemplatepublic list

Enum values that can be filtered in query parameter *sFilter*:

| Variable | Valid values |
|---|---|
| eEzsigntemplatepublicLimittype | Hour<br>Day<br>Month<br>Total |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatepublicGetListV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetListV1(ctx context.Context) ApiEzsigntemplatepublicGetListV1Request {
	return ApiEzsigntemplatepublicGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicGetListV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetListV1Execute(r ApiEzsigntemplatepublicGetListV1Request) (*EzsigntemplatepublicGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	pkiEzsigntemplatepublicID int32
}

func (r ApiEzsigntemplatepublicGetObjectV2Request) Execute() (*EzsigntemplatepublicGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicGetObjectV2Execute(r)
}

/*
EzsigntemplatepublicGetObjectV2 Retrieve an existing Ezsigntemplatepublic



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepublicID The unique ID of the Ezsigntemplatepublic
 @return ApiEzsigntemplatepublicGetObjectV2Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetObjectV2(ctx context.Context, pkiEzsigntemplatepublicID int32) ApiEzsigntemplatepublicGetObjectV2Request {
	return ApiEzsigntemplatepublicGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicGetObjectV2Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicGetObjectV2Execute(r ApiEzsigntemplatepublicGetObjectV2Request) (*EzsigntemplatepublicGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepublicID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepublicID, "pkiEzsigntemplatepublicID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepublicID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be greater than 0")
	}
	if r.pkiEzsigntemplatepublicID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicResetLimitExceededCounterV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	pkiEzsigntemplatepublicID int32
	body *map[string]interface{}
}

func (r ApiEzsigntemplatepublicResetLimitExceededCounterV1Request) Body(body map[string]interface{}) ApiEzsigntemplatepublicResetLimitExceededCounterV1Request {
	r.body = &body
	return r
}

func (r ApiEzsigntemplatepublicResetLimitExceededCounterV1Request) Execute() (*EzsigntemplatepublicResetLimitExceededCounterV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicResetLimitExceededCounterV1Execute(r)
}

/*
EzsigntemplatepublicResetLimitExceededCounterV1 Reset the limit exceeded counter



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepublicID
 @return ApiEzsigntemplatepublicResetLimitExceededCounterV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicResetLimitExceededCounterV1(ctx context.Context, pkiEzsigntemplatepublicID int32) ApiEzsigntemplatepublicResetLimitExceededCounterV1Request {
	return ApiEzsigntemplatepublicResetLimitExceededCounterV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicResetLimitExceededCounterV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicResetLimitExceededCounterV1Execute(r ApiEzsigntemplatepublicResetLimitExceededCounterV1Request) (*EzsigntemplatepublicResetLimitExceededCounterV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicResetLimitExceededCounterV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicResetLimitExceededCounterV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetLimitExceededCounter"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepublicID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepublicID, "pkiEzsigntemplatepublicID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepublicID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be greater than 0")
	}
	if r.pkiEzsigntemplatepublicID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be less than 65535")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatepublicResetUrlV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatepublicAPIService
	pkiEzsigntemplatepublicID int32
	body *map[string]interface{}
}

func (r ApiEzsigntemplatepublicResetUrlV1Request) Body(body map[string]interface{}) ApiEzsigntemplatepublicResetUrlV1Request {
	r.body = &body
	return r
}

func (r ApiEzsigntemplatepublicResetUrlV1Request) Execute() (*EzsigntemplatepublicResetUrlV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatepublicResetUrlV1Execute(r)
}

/*
EzsigntemplatepublicResetUrlV1 Reset the Ezsigntemplatepublic url



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatepublicID
 @return ApiEzsigntemplatepublicResetUrlV1Request
*/
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicResetUrlV1(ctx context.Context, pkiEzsigntemplatepublicID int32) ApiEzsigntemplatepublicResetUrlV1Request {
	return ApiEzsigntemplatepublicResetUrlV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatepublicID: pkiEzsigntemplatepublicID,
	}
}

// Execute executes the request
//  @return EzsigntemplatepublicResetUrlV1Response
func (a *ObjectEzsigntemplatepublicAPIService) EzsigntemplatepublicResetUrlV1Execute(r ApiEzsigntemplatepublicResetUrlV1Request) (*EzsigntemplatepublicResetUrlV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatepublicResetUrlV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatepublicAPIService.EzsigntemplatepublicResetUrlV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatepublic/{pkiEzsigntemplatepublicID}/resetUrl"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatepublicID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatepublicID, "pkiEzsigntemplatepublicID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatepublicID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be greater than 0")
	}
	if r.pkiEzsigntemplatepublicID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatepublicID must be less than 65535")
	}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
