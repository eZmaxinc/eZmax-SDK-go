/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// EzsigndocumentGetWordsPositionsV1Request Request for the /1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions API Request
type EzsigndocumentGetWordsPositionsV1Request struct {
	// Specify if you want to retrieve *All* words or specific *Words* from the document. If you specify *Words*, you must send the list of words to search for in *a_sWord*.
	EGet string `json:"eGet"`
	// IF *true*, words will be searched case-sensitive and results will be returned case-sensitive. IF *false*, words will be searched case-insensitive and results will be returned case-insensitive.
	BWordCaseSensitive bool `json:"bWordCaseSensitive"`
	// Array of words to find in the document
	ASWord *[]string `json:"a_sWord,omitempty"`
}

// NewEzsigndocumentGetWordsPositionsV1Request instantiates a new EzsigndocumentGetWordsPositionsV1Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigndocumentGetWordsPositionsV1Request(eGet string, bWordCaseSensitive bool) *EzsigndocumentGetWordsPositionsV1Request {
	this := EzsigndocumentGetWordsPositionsV1Request{}
	this.EGet = eGet
	this.BWordCaseSensitive = bWordCaseSensitive
	return &this
}

// NewEzsigndocumentGetWordsPositionsV1RequestWithDefaults instantiates a new EzsigndocumentGetWordsPositionsV1Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigndocumentGetWordsPositionsV1RequestWithDefaults() *EzsigndocumentGetWordsPositionsV1Request {
	this := EzsigndocumentGetWordsPositionsV1Request{}
	return &this
}

// GetEGet returns the EGet field value
func (o *EzsigndocumentGetWordsPositionsV1Request) GetEGet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EGet
}

// GetEGetOk returns a tuple with the EGet field value
// and a boolean to check if the value has been set.
func (o *EzsigndocumentGetWordsPositionsV1Request) GetEGetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EGet, true
}

// SetEGet sets field value
func (o *EzsigndocumentGetWordsPositionsV1Request) SetEGet(v string) {
	o.EGet = v
}

// GetBWordCaseSensitive returns the BWordCaseSensitive field value
func (o *EzsigndocumentGetWordsPositionsV1Request) GetBWordCaseSensitive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BWordCaseSensitive
}

// GetBWordCaseSensitiveOk returns a tuple with the BWordCaseSensitive field value
// and a boolean to check if the value has been set.
func (o *EzsigndocumentGetWordsPositionsV1Request) GetBWordCaseSensitiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BWordCaseSensitive, true
}

// SetBWordCaseSensitive sets field value
func (o *EzsigndocumentGetWordsPositionsV1Request) SetBWordCaseSensitive(v bool) {
	o.BWordCaseSensitive = v
}

// GetASWord returns the ASWord field value if set, zero value otherwise.
func (o *EzsigndocumentGetWordsPositionsV1Request) GetASWord() []string {
	if o == nil || o.ASWord == nil {
		var ret []string
		return ret
	}
	return *o.ASWord
}

// GetASWordOk returns a tuple with the ASWord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsigndocumentGetWordsPositionsV1Request) GetASWordOk() (*[]string, bool) {
	if o == nil || o.ASWord == nil {
		return nil, false
	}
	return o.ASWord, true
}

// HasASWord returns a boolean if a field has been set.
func (o *EzsigndocumentGetWordsPositionsV1Request) HasASWord() bool {
	if o != nil && o.ASWord != nil {
		return true
	}

	return false
}

// SetASWord gets a reference to the given []string and assigns it to the ASWord field.
func (o *EzsigndocumentGetWordsPositionsV1Request) SetASWord(v []string) {
	o.ASWord = &v
}

func (o EzsigndocumentGetWordsPositionsV1Request) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eGet"] = o.EGet
	}
	if true {
		toSerialize["bWordCaseSensitive"] = o.BWordCaseSensitive
	}
	if o.ASWord != nil {
		toSerialize["a_sWord"] = o.ASWord
	}
	return json.Marshal(toSerialize)
}

type NullableEzsigndocumentGetWordsPositionsV1Request struct {
	value *EzsigndocumentGetWordsPositionsV1Request
	isSet bool
}

func (v NullableEzsigndocumentGetWordsPositionsV1Request) Get() *EzsigndocumentGetWordsPositionsV1Request {
	return v.value
}

func (v *NullableEzsigndocumentGetWordsPositionsV1Request) Set(val *EzsigndocumentGetWordsPositionsV1Request) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigndocumentGetWordsPositionsV1Request) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigndocumentGetWordsPositionsV1Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigndocumentGetWordsPositionsV1Request(val *EzsigndocumentGetWordsPositionsV1Request) *NullableEzsigndocumentGetWordsPositionsV1Request {
	return &NullableEzsigndocumentGetWordsPositionsV1Request{value: val, isSet: true}
}

func (v NullableEzsigndocumentGetWordsPositionsV1Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigndocumentGetWordsPositionsV1Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


