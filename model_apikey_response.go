/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApikeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApikeyResponse{}

// ApikeyResponse An Apikey Object
type ApikeyResponse struct {
	// The unique ID of the Apikey
	PkiApikeyID int32 `json:"pkiApikeyID"`
	// The unique ID of the User
	FkiUserID int32 `json:"fkiUserID"`
	ObjApikeyDescription MultilingualApikeyDescription `json:"objApikeyDescription"`
	ObjContactName CustomContactNameResponse `json:"objContactName"`
	// The Apikey for the API key.  This will be hidden if we are not creating or regenerating the Apikey.
	SApikeyApikey *string `json:"sApikeyApikey,omitempty"`
	// The Secret for the API key.  This will be hidden if we are not creating or regenerating the Apikey.
	SApikeySecret *string `json:"sApikeySecret,omitempty"`
	// Whether the apikey is active or not
	BApikeyIsactive bool `json:"bApikeyIsactive"`
	// Whether the apikey is signed or not
	BApikeyIssigned *bool `json:"bApikeyIssigned,omitempty"`
	ObjAudit CommonAudit `json:"objAudit"`
}

type _ApikeyResponse ApikeyResponse

// NewApikeyResponse instantiates a new ApikeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApikeyResponse(pkiApikeyID int32, fkiUserID int32, objApikeyDescription MultilingualApikeyDescription, objContactName CustomContactNameResponse, bApikeyIsactive bool, objAudit CommonAudit) *ApikeyResponse {
	this := ApikeyResponse{}
	this.PkiApikeyID = pkiApikeyID
	this.FkiUserID = fkiUserID
	this.ObjApikeyDescription = objApikeyDescription
	this.ObjContactName = objContactName
	this.BApikeyIsactive = bApikeyIsactive
	this.ObjAudit = objAudit
	return &this
}

// NewApikeyResponseWithDefaults instantiates a new ApikeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApikeyResponseWithDefaults() *ApikeyResponse {
	this := ApikeyResponse{}
	return &this
}

// GetPkiApikeyID returns the PkiApikeyID field value
func (o *ApikeyResponse) GetPkiApikeyID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiApikeyID
}

// GetPkiApikeyIDOk returns a tuple with the PkiApikeyID field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetPkiApikeyIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiApikeyID, true
}

// SetPkiApikeyID sets field value
func (o *ApikeyResponse) SetPkiApikeyID(v int32) {
	o.PkiApikeyID = v
}

// GetFkiUserID returns the FkiUserID field value
func (o *ApikeyResponse) GetFkiUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiUserID
}

// GetFkiUserIDOk returns a tuple with the FkiUserID field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetFkiUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiUserID, true
}

// SetFkiUserID sets field value
func (o *ApikeyResponse) SetFkiUserID(v int32) {
	o.FkiUserID = v
}

// GetObjApikeyDescription returns the ObjApikeyDescription field value
func (o *ApikeyResponse) GetObjApikeyDescription() MultilingualApikeyDescription {
	if o == nil {
		var ret MultilingualApikeyDescription
		return ret
	}

	return o.ObjApikeyDescription
}

// GetObjApikeyDescriptionOk returns a tuple with the ObjApikeyDescription field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetObjApikeyDescriptionOk() (*MultilingualApikeyDescription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjApikeyDescription, true
}

// SetObjApikeyDescription sets field value
func (o *ApikeyResponse) SetObjApikeyDescription(v MultilingualApikeyDescription) {
	o.ObjApikeyDescription = v
}

// GetObjContactName returns the ObjContactName field value
func (o *ApikeyResponse) GetObjContactName() CustomContactNameResponse {
	if o == nil {
		var ret CustomContactNameResponse
		return ret
	}

	return o.ObjContactName
}

// GetObjContactNameOk returns a tuple with the ObjContactName field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetObjContactNameOk() (*CustomContactNameResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjContactName, true
}

// SetObjContactName sets field value
func (o *ApikeyResponse) SetObjContactName(v CustomContactNameResponse) {
	o.ObjContactName = v
}

// GetSApikeyApikey returns the SApikeyApikey field value if set, zero value otherwise.
func (o *ApikeyResponse) GetSApikeyApikey() string {
	if o == nil || IsNil(o.SApikeyApikey) {
		var ret string
		return ret
	}
	return *o.SApikeyApikey
}

// GetSApikeyApikeyOk returns a tuple with the SApikeyApikey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetSApikeyApikeyOk() (*string, bool) {
	if o == nil || IsNil(o.SApikeyApikey) {
		return nil, false
	}
	return o.SApikeyApikey, true
}

// HasSApikeyApikey returns a boolean if a field has been set.
func (o *ApikeyResponse) HasSApikeyApikey() bool {
	if o != nil && !IsNil(o.SApikeyApikey) {
		return true
	}

	return false
}

// SetSApikeyApikey gets a reference to the given string and assigns it to the SApikeyApikey field.
func (o *ApikeyResponse) SetSApikeyApikey(v string) {
	o.SApikeyApikey = &v
}

// GetSApikeySecret returns the SApikeySecret field value if set, zero value otherwise.
func (o *ApikeyResponse) GetSApikeySecret() string {
	if o == nil || IsNil(o.SApikeySecret) {
		var ret string
		return ret
	}
	return *o.SApikeySecret
}

// GetSApikeySecretOk returns a tuple with the SApikeySecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetSApikeySecretOk() (*string, bool) {
	if o == nil || IsNil(o.SApikeySecret) {
		return nil, false
	}
	return o.SApikeySecret, true
}

// HasSApikeySecret returns a boolean if a field has been set.
func (o *ApikeyResponse) HasSApikeySecret() bool {
	if o != nil && !IsNil(o.SApikeySecret) {
		return true
	}

	return false
}

// SetSApikeySecret gets a reference to the given string and assigns it to the SApikeySecret field.
func (o *ApikeyResponse) SetSApikeySecret(v string) {
	o.SApikeySecret = &v
}

// GetBApikeyIsactive returns the BApikeyIsactive field value
func (o *ApikeyResponse) GetBApikeyIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BApikeyIsactive
}

// GetBApikeyIsactiveOk returns a tuple with the BApikeyIsactive field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetBApikeyIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BApikeyIsactive, true
}

// SetBApikeyIsactive sets field value
func (o *ApikeyResponse) SetBApikeyIsactive(v bool) {
	o.BApikeyIsactive = v
}

// GetBApikeyIssigned returns the BApikeyIssigned field value if set, zero value otherwise.
func (o *ApikeyResponse) GetBApikeyIssigned() bool {
	if o == nil || IsNil(o.BApikeyIssigned) {
		var ret bool
		return ret
	}
	return *o.BApikeyIssigned
}

// GetBApikeyIssignedOk returns a tuple with the BApikeyIssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetBApikeyIssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.BApikeyIssigned) {
		return nil, false
	}
	return o.BApikeyIssigned, true
}

// HasBApikeyIssigned returns a boolean if a field has been set.
func (o *ApikeyResponse) HasBApikeyIssigned() bool {
	if o != nil && !IsNil(o.BApikeyIssigned) {
		return true
	}

	return false
}

// SetBApikeyIssigned gets a reference to the given bool and assigns it to the BApikeyIssigned field.
func (o *ApikeyResponse) SetBApikeyIssigned(v bool) {
	o.BApikeyIssigned = &v
}

// GetObjAudit returns the ObjAudit field value
func (o *ApikeyResponse) GetObjAudit() CommonAudit {
	if o == nil {
		var ret CommonAudit
		return ret
	}

	return o.ObjAudit
}

// GetObjAuditOk returns a tuple with the ObjAudit field value
// and a boolean to check if the value has been set.
func (o *ApikeyResponse) GetObjAuditOk() (*CommonAudit, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjAudit, true
}

// SetObjAudit sets field value
func (o *ApikeyResponse) SetObjAudit(v CommonAudit) {
	o.ObjAudit = v
}

func (o ApikeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApikeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiApikeyID"] = o.PkiApikeyID
	toSerialize["fkiUserID"] = o.FkiUserID
	toSerialize["objApikeyDescription"] = o.ObjApikeyDescription
	toSerialize["objContactName"] = o.ObjContactName
	if !IsNil(o.SApikeyApikey) {
		toSerialize["sApikeyApikey"] = o.SApikeyApikey
	}
	if !IsNil(o.SApikeySecret) {
		toSerialize["sApikeySecret"] = o.SApikeySecret
	}
	toSerialize["bApikeyIsactive"] = o.BApikeyIsactive
	if !IsNil(o.BApikeyIssigned) {
		toSerialize["bApikeyIssigned"] = o.BApikeyIssigned
	}
	toSerialize["objAudit"] = o.ObjAudit
	return toSerialize, nil
}

func (o *ApikeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiApikeyID",
		"fkiUserID",
		"objApikeyDescription",
		"objContactName",
		"bApikeyIsactive",
		"objAudit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApikeyResponse := _ApikeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApikeyResponse)

	if err != nil {
		return err
	}

	*o = ApikeyResponse(varApikeyResponse)

	return err
}

type NullableApikeyResponse struct {
	value *ApikeyResponse
	isSet bool
}

func (v NullableApikeyResponse) Get() *ApikeyResponse {
	return v.value
}

func (v *NullableApikeyResponse) Set(val *ApikeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableApikeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableApikeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApikeyResponse(val *ApikeyResponse) *NullableApikeyResponse {
	return &NullableApikeyResponse{value: val, isSet: true}
}

func (v NullableApikeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApikeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


