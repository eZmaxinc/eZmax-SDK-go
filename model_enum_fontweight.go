/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// EnumFontweight The Font Weight
type EnumFontweight string

// List of Enum-Fontweight
const (
	NORMAL EnumFontweight = "Normal"
	BOLD EnumFontweight = "Bold"
)

// All allowed values of EnumFontweight enum
var AllowedEnumFontweightEnumValues = []EnumFontweight{
	"Normal",
	"Bold",
}

func (v *EnumFontweight) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFontweight(value)
	for _, existing := range AllowedEnumFontweightEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFontweight", value)
}

// NewEnumFontweightFromValue returns a pointer to a valid EnumFontweight
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFontweightFromValue(v string) (*EnumFontweight, error) {
	ev := EnumFontweight(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFontweight: valid values are %v", v, AllowedEnumFontweightEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFontweight) IsValid() bool {
	for _, existing := range AllowedEnumFontweightEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum-Fontweight value
func (v EnumFontweight) Ptr() *EnumFontweight {
	return &v
}

type NullableEnumFontweight struct {
	value *EnumFontweight
	isSet bool
}

func (v NullableEnumFontweight) Get() *EnumFontweight {
	return v.value
}

func (v *NullableEnumFontweight) Set(val *EnumFontweight) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFontweight) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFontweight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFontweight(val *EnumFontweight) *NullableEnumFontweight {
	return &NullableEnumFontweight{value: val, isSet: true}
}

func (v NullableEnumFontweight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFontweight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

