/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactRequestCompound{}

// ContactRequestCompound A Contact Object and children to create a complete structure
type ContactRequestCompound struct {
	ContactRequest
	ObjContactinformations ContactinformationsRequestCompound `json:"objContactinformations"`
}

type _ContactRequestCompound ContactRequestCompound

// NewContactRequestCompound instantiates a new ContactRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactRequestCompound(objContactinformations ContactinformationsRequestCompound, fkiContacttitleID int32, fkiLanguageID int32, sContactFirstname string, sContactLastname string, sContactCompany string) *ContactRequestCompound {
	this := ContactRequestCompound{}
	this.FkiContacttitleID = fkiContacttitleID
	this.FkiLanguageID = fkiLanguageID
	this.SContactFirstname = sContactFirstname
	this.SContactLastname = sContactLastname
	this.SContactCompany = sContactCompany
	this.ObjContactinformations = objContactinformations
	return &this
}

// NewContactRequestCompoundWithDefaults instantiates a new ContactRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactRequestCompoundWithDefaults() *ContactRequestCompound {
	this := ContactRequestCompound{}
	return &this
}

// GetObjContactinformations returns the ObjContactinformations field value
func (o *ContactRequestCompound) GetObjContactinformations() ContactinformationsRequestCompound {
	if o == nil {
		var ret ContactinformationsRequestCompound
		return ret
	}

	return o.ObjContactinformations
}

// GetObjContactinformationsOk returns a tuple with the ObjContactinformations field value
// and a boolean to check if the value has been set.
func (o *ContactRequestCompound) GetObjContactinformationsOk() (*ContactinformationsRequestCompound, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjContactinformations, true
}

// SetObjContactinformations sets field value
func (o *ContactRequestCompound) SetObjContactinformations(v ContactinformationsRequestCompound) {
	o.ObjContactinformations = v
}

func (o ContactRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objContactinformations"] = o.ObjContactinformations
	return toSerialize, nil
}

func (o *ContactRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objContactinformations",
		"fkiContacttitleID",
		"fkiLanguageID",
		"sContactFirstname",
		"sContactLastname",
		"sContactCompany",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactRequestCompound := _ContactRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactRequestCompound)

	if err != nil {
		return err
	}

	*o = ContactRequestCompound(varContactRequestCompound)

	return err
}

type NullableContactRequestCompound struct {
	value *ContactRequestCompound
	isSet bool
}

func (v NullableContactRequestCompound) Get() *ContactRequestCompound {
	return v.value
}

func (v *NullableContactRequestCompound) Set(val *ContactRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableContactRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableContactRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactRequestCompound(val *ContactRequestCompound) *NullableContactRequestCompound {
	return &NullableContactRequestCompound{value: val, isSet: true}
}

func (v NullableContactRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


