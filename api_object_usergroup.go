/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectUsergroupAPIService ObjectUsergroupAPI service
type ObjectUsergroupAPIService service

type ApiUsergroupCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	usergroupCreateObjectV1Request *UsergroupCreateObjectV1Request
}

func (r ApiUsergroupCreateObjectV1Request) UsergroupCreateObjectV1Request(usergroupCreateObjectV1Request UsergroupCreateObjectV1Request) ApiUsergroupCreateObjectV1Request {
	r.usergroupCreateObjectV1Request = &usergroupCreateObjectV1Request
	return r
}

func (r ApiUsergroupCreateObjectV1Request) Execute() (*UsergroupCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.UsergroupCreateObjectV1Execute(r)
}

/*
UsergroupCreateObjectV1 Create a new Usergroup

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupCreateObjectV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupCreateObjectV1(ctx context.Context) ApiUsergroupCreateObjectV1Request {
	return ApiUsergroupCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupCreateObjectV1Response
func (a *ObjectUsergroupAPIService) UsergroupCreateObjectV1Execute(r ApiUsergroupCreateObjectV1Request) (*UsergroupCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.usergroupCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
	usergroupEditObjectV1Request *UsergroupEditObjectV1Request
}

func (r ApiUsergroupEditObjectV1Request) UsergroupEditObjectV1Request(usergroupEditObjectV1Request UsergroupEditObjectV1Request) ApiUsergroupEditObjectV1Request {
	r.usergroupEditObjectV1Request = &usergroupEditObjectV1Request
	return r
}

func (r ApiUsergroupEditObjectV1Request) Execute() (*UsergroupEditObjectV1Response, *http.Response, error) {
	return r.ApiService.UsergroupEditObjectV1Execute(r)
}

/*
UsergroupEditObjectV1 Edit an existing Usergroup



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupEditObjectV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupEditObjectV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupEditObjectV1Request {
	return ApiUsergroupEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupEditObjectV1Response
func (a *ObjectUsergroupAPIService) UsergroupEditObjectV1Execute(r ApiUsergroupEditObjectV1Request) (*UsergroupEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}
	if r.usergroupEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupEditPermissionsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
	usergroupEditPermissionsV1Request *UsergroupEditPermissionsV1Request
}

func (r ApiUsergroupEditPermissionsV1Request) UsergroupEditPermissionsV1Request(usergroupEditPermissionsV1Request UsergroupEditPermissionsV1Request) ApiUsergroupEditPermissionsV1Request {
	r.usergroupEditPermissionsV1Request = &usergroupEditPermissionsV1Request
	return r
}

func (r ApiUsergroupEditPermissionsV1Request) Execute() (*UsergroupEditPermissionsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupEditPermissionsV1Execute(r)
}

/*
UsergroupEditPermissionsV1 Edit multiple Permissions

Using this endpoint, you can edit multiple Permissions at the same time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupEditPermissionsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupEditPermissionsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupEditPermissionsV1Request {
	return ApiUsergroupEditPermissionsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupEditPermissionsV1Response
func (a *ObjectUsergroupAPIService) UsergroupEditPermissionsV1Execute(r ApiUsergroupEditPermissionsV1Request) (*UsergroupEditPermissionsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupEditPermissionsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupEditPermissionsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/editPermissions"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}
	if r.usergroupEditPermissionsV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupEditPermissionsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupEditPermissionsV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupEditUsergroupdelegationsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
	usergroupEditUsergroupdelegationsV1Request *UsergroupEditUsergroupdelegationsV1Request
}

func (r ApiUsergroupEditUsergroupdelegationsV1Request) UsergroupEditUsergroupdelegationsV1Request(usergroupEditUsergroupdelegationsV1Request UsergroupEditUsergroupdelegationsV1Request) ApiUsergroupEditUsergroupdelegationsV1Request {
	r.usergroupEditUsergroupdelegationsV1Request = &usergroupEditUsergroupdelegationsV1Request
	return r
}

func (r ApiUsergroupEditUsergroupdelegationsV1Request) Execute() (*UsergroupEditUsergroupdelegationsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupEditUsergroupdelegationsV1Execute(r)
}

/*
UsergroupEditUsergroupdelegationsV1 Edit multiple Usergroupdelegations

Edit multiple Usergroupdelegations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupEditUsergroupdelegationsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupEditUsergroupdelegationsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupEditUsergroupdelegationsV1Request {
	return ApiUsergroupEditUsergroupdelegationsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupEditUsergroupdelegationsV1Response
func (a *ObjectUsergroupAPIService) UsergroupEditUsergroupdelegationsV1Execute(r ApiUsergroupEditUsergroupdelegationsV1Request) (*UsergroupEditUsergroupdelegationsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupEditUsergroupdelegationsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupEditUsergroupdelegationsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/editUsergroupdelegations"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}
	if r.usergroupEditUsergroupdelegationsV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupEditUsergroupdelegationsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupEditUsergroupdelegationsV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupEditUsergroupmembershipsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
	usergroupEditUsergroupmembershipsV1Request *UsergroupEditUsergroupmembershipsV1Request
}

func (r ApiUsergroupEditUsergroupmembershipsV1Request) UsergroupEditUsergroupmembershipsV1Request(usergroupEditUsergroupmembershipsV1Request UsergroupEditUsergroupmembershipsV1Request) ApiUsergroupEditUsergroupmembershipsV1Request {
	r.usergroupEditUsergroupmembershipsV1Request = &usergroupEditUsergroupmembershipsV1Request
	return r
}

func (r ApiUsergroupEditUsergroupmembershipsV1Request) Execute() (*UsergroupEditUsergroupmembershipsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupEditUsergroupmembershipsV1Execute(r)
}

/*
UsergroupEditUsergroupmembershipsV1 Edit multiple Usergroupmemberships

Using this endpoint, you can edit multiple Usergroupmemberships at the same time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupEditUsergroupmembershipsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupEditUsergroupmembershipsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupEditUsergroupmembershipsV1Request {
	return ApiUsergroupEditUsergroupmembershipsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupEditUsergroupmembershipsV1Response
func (a *ObjectUsergroupAPIService) UsergroupEditUsergroupmembershipsV1Execute(r ApiUsergroupEditUsergroupmembershipsV1Request) (*UsergroupEditUsergroupmembershipsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupEditUsergroupmembershipsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupEditUsergroupmembershipsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/editUsergroupmemberships"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}
	if r.usergroupEditUsergroupmembershipsV1Request == nil {
		return localVarReturnValue, nil, reportError("usergroupEditUsergroupmembershipsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.usergroupEditUsergroupmembershipsV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetAutocompleteV2Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	sSelector string
	eFilterActive *string
	sQuery *string
	acceptLanguage *HeaderAcceptLanguage
}

// Specify which results we want to display.
func (r ApiUsergroupGetAutocompleteV2Request) EFilterActive(eFilterActive string) ApiUsergroupGetAutocompleteV2Request {
	r.eFilterActive = &eFilterActive
	return r
}

// Allow to filter the returned results
func (r ApiUsergroupGetAutocompleteV2Request) SQuery(sQuery string) ApiUsergroupGetAutocompleteV2Request {
	r.sQuery = &sQuery
	return r
}

func (r ApiUsergroupGetAutocompleteV2Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiUsergroupGetAutocompleteV2Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiUsergroupGetAutocompleteV2Request) Execute() (*UsergroupGetAutocompleteV2Response, *http.Response, error) {
	return r.ApiService.UsergroupGetAutocompleteV2Execute(r)
}

/*
UsergroupGetAutocompleteV2 Retrieve Usergroups and IDs

Get the list of Usergroup to be used in a dropdown or autocomplete control.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sSelector The type of Usergroups to return
 @return ApiUsergroupGetAutocompleteV2Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetAutocompleteV2(ctx context.Context, sSelector string) ApiUsergroupGetAutocompleteV2Request {
	return ApiUsergroupGetAutocompleteV2Request{
		ApiService: a,
		ctx: ctx,
		sSelector: sSelector,
	}
}

// Execute executes the request
//  @return UsergroupGetAutocompleteV2Response
func (a *ObjectUsergroupAPIService) UsergroupGetAutocompleteV2Execute(r ApiUsergroupGetAutocompleteV2Request) (*UsergroupGetAutocompleteV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetAutocompleteV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetAutocompleteV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/usergroup/getAutocomplete/{sSelector}"
	localVarPath = strings.Replace(localVarPath, "{"+"sSelector"+"}", url.PathEscape(parameterValueToString(r.sSelector, "sSelector")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eFilterActive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eFilterActive", r.eFilterActive, "form", "")
	} else {
		var defaultValue string = "Active"
		r.eFilterActive = &defaultValue
	}
	if r.sQuery != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sQuery", r.sQuery, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetListV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	eOrderBy *string
	iRowMax *int32
	iRowOffset *int32
	acceptLanguage *HeaderAcceptLanguage
	sFilter *string
}

// Specify how you want the results to be sorted
func (r ApiUsergroupGetListV1Request) EOrderBy(eOrderBy string) ApiUsergroupGetListV1Request {
	r.eOrderBy = &eOrderBy
	return r
}

func (r ApiUsergroupGetListV1Request) IRowMax(iRowMax int32) ApiUsergroupGetListV1Request {
	r.iRowMax = &iRowMax
	return r
}

func (r ApiUsergroupGetListV1Request) IRowOffset(iRowOffset int32) ApiUsergroupGetListV1Request {
	r.iRowOffset = &iRowOffset
	return r
}

func (r ApiUsergroupGetListV1Request) AcceptLanguage(acceptLanguage HeaderAcceptLanguage) ApiUsergroupGetListV1Request {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiUsergroupGetListV1Request) SFilter(sFilter string) ApiUsergroupGetListV1Request {
	r.sFilter = &sFilter
	return r
}

func (r ApiUsergroupGetListV1Request) Execute() (*UsergroupGetListV1Response, *http.Response, error) {
	return r.ApiService.UsergroupGetListV1Execute(r)
}

/*
UsergroupGetListV1 Retrieve Usergroup list



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupGetListV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetListV1(ctx context.Context) ApiUsergroupGetListV1Request {
	return ApiUsergroupGetListV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupGetListV1Response
func (a *ObjectUsergroupAPIService) UsergroupGetListV1Execute(r ApiUsergroupGetListV1Request) (*UsergroupGetListV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetListV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetListV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/getList"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.eOrderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eOrderBy", r.eOrderBy, "form", "")
	}
	if r.iRowMax != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowMax", r.iRowMax, "form", "")
	}
	if r.iRowOffset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iRowOffset", r.iRowOffset, "form", "")
	} else {
		var defaultValue int32 = 0
		r.iRowOffset = &defaultValue
	}
	if r.sFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sFilter", r.sFilter, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
}

func (r ApiUsergroupGetObjectV2Request) Execute() (*UsergroupGetObjectV2Response, *http.Response, error) {
	return r.ApiService.UsergroupGetObjectV2Execute(r)
}

/*
UsergroupGetObjectV2 Retrieve an existing Usergroup



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupGetObjectV2Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetObjectV2(ctx context.Context, pkiUsergroupID int32) ApiUsergroupGetObjectV2Request {
	return ApiUsergroupGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupGetObjectV2Response
func (a *ObjectUsergroupAPIService) UsergroupGetObjectV2Execute(r ApiUsergroupGetObjectV2Request) (*UsergroupGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/usergroup/{pkiUsergroupID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetPermissionsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
}

func (r ApiUsergroupGetPermissionsV1Request) Execute() (*UsergroupGetPermissionsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupGetPermissionsV1Execute(r)
}

/*
UsergroupGetPermissionsV1 Retrieve an existing Usergroup's Permissions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupGetPermissionsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetPermissionsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupGetPermissionsV1Request {
	return ApiUsergroupGetPermissionsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupGetPermissionsV1Response
func (a *ObjectUsergroupAPIService) UsergroupGetPermissionsV1Execute(r ApiUsergroupGetPermissionsV1Request) (*UsergroupGetPermissionsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetPermissionsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetPermissionsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/getPermissions"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetUsergroupdelegationsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
}

func (r ApiUsergroupGetUsergroupdelegationsV1Request) Execute() (*UsergroupGetUsergroupdelegationsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupGetUsergroupdelegationsV1Execute(r)
}

/*
UsergroupGetUsergroupdelegationsV1 Retrieve an existing Usergroup's Usergroupdelegations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupGetUsergroupdelegationsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetUsergroupdelegationsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupGetUsergroupdelegationsV1Request {
	return ApiUsergroupGetUsergroupdelegationsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupGetUsergroupdelegationsV1Response
func (a *ObjectUsergroupAPIService) UsergroupGetUsergroupdelegationsV1Execute(r ApiUsergroupGetUsergroupdelegationsV1Request) (*UsergroupGetUsergroupdelegationsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetUsergroupdelegationsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetUsergroupdelegationsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/getUsergroupdelegations"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupGetUsergroupmembershipsV1Request struct {
	ctx context.Context
	ApiService *ObjectUsergroupAPIService
	pkiUsergroupID int32
}

func (r ApiUsergroupGetUsergroupmembershipsV1Request) Execute() (*UsergroupGetUsergroupmembershipsV1Response, *http.Response, error) {
	return r.ApiService.UsergroupGetUsergroupmembershipsV1Execute(r)
}

/*
UsergroupGetUsergroupmembershipsV1 Retrieve an existing Usergroup's Usergroupmemberships

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiUsergroupID
 @return ApiUsergroupGetUsergroupmembershipsV1Request
*/
func (a *ObjectUsergroupAPIService) UsergroupGetUsergroupmembershipsV1(ctx context.Context, pkiUsergroupID int32) ApiUsergroupGetUsergroupmembershipsV1Request {
	return ApiUsergroupGetUsergroupmembershipsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiUsergroupID: pkiUsergroupID,
	}
}

// Execute executes the request
//  @return UsergroupGetUsergroupmembershipsV1Response
func (a *ObjectUsergroupAPIService) UsergroupGetUsergroupmembershipsV1Execute(r ApiUsergroupGetUsergroupmembershipsV1Request) (*UsergroupGetUsergroupmembershipsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupGetUsergroupmembershipsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectUsergroupAPIService.UsergroupGetUsergroupmembershipsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/usergroup/{pkiUsergroupID}/getUsergroupmemberships"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiUsergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiUsergroupID, "pkiUsergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiUsergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be greater than 0")
	}
	if r.pkiUsergroupID > 255 {
		return localVarReturnValue, nil, reportError("pkiUsergroupID must be less than 255")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
