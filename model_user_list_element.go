/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserListElement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserListElement{}

// UserListElement A User List Element
type UserListElement struct {
	// The unique ID of the User
	PkiUserID int32 `json:"pkiUserID"`
	// The first name of the user
	SUserFirstname string `json:"sUserFirstname"`
	// The last name of the user
	SUserLastname string `json:"sUserLastname"`
	// The login name of the User.
	SUserLoginname string `json:"sUserLoginname"`
	// Whether the User is active or not
	BUserIsactive bool `json:"bUserIsactive"`
	EUserType FieldEUserType `json:"eUserType"`
	EUserOrigin FieldEUserOrigin `json:"eUserOrigin"`
	EUserEzsignaccess FieldEUserEzsignaccess `json:"eUserEzsignaccess"`
	// The eZsign prepaid expiration date
	DtUserEzsignprepaidexpiration *string `json:"dtUserEzsignprepaidexpiration,omitempty"`
	// The email address.
	SEmailAddress string `json:"sEmailAddress"`
}

type _UserListElement UserListElement

// NewUserListElement instantiates a new UserListElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserListElement(pkiUserID int32, sUserFirstname string, sUserLastname string, sUserLoginname string, bUserIsactive bool, eUserType FieldEUserType, eUserOrigin FieldEUserOrigin, eUserEzsignaccess FieldEUserEzsignaccess, sEmailAddress string) *UserListElement {
	this := UserListElement{}
	this.PkiUserID = pkiUserID
	this.SUserFirstname = sUserFirstname
	this.SUserLastname = sUserLastname
	this.SUserLoginname = sUserLoginname
	this.BUserIsactive = bUserIsactive
	this.EUserType = eUserType
	this.EUserOrigin = eUserOrigin
	this.EUserEzsignaccess = eUserEzsignaccess
	this.SEmailAddress = sEmailAddress
	return &this
}

// NewUserListElementWithDefaults instantiates a new UserListElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserListElementWithDefaults() *UserListElement {
	this := UserListElement{}
	return &this
}

// GetPkiUserID returns the PkiUserID field value
func (o *UserListElement) GetPkiUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiUserID
}

// GetPkiUserIDOk returns a tuple with the PkiUserID field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetPkiUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiUserID, true
}

// SetPkiUserID sets field value
func (o *UserListElement) SetPkiUserID(v int32) {
	o.PkiUserID = v
}

// GetSUserFirstname returns the SUserFirstname field value
func (o *UserListElement) GetSUserFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserFirstname
}

// GetSUserFirstnameOk returns a tuple with the SUserFirstname field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetSUserFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserFirstname, true
}

// SetSUserFirstname sets field value
func (o *UserListElement) SetSUserFirstname(v string) {
	o.SUserFirstname = v
}

// GetSUserLastname returns the SUserLastname field value
func (o *UserListElement) GetSUserLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserLastname
}

// GetSUserLastnameOk returns a tuple with the SUserLastname field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetSUserLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserLastname, true
}

// SetSUserLastname sets field value
func (o *UserListElement) SetSUserLastname(v string) {
	o.SUserLastname = v
}

// GetSUserLoginname returns the SUserLoginname field value
func (o *UserListElement) GetSUserLoginname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserLoginname
}

// GetSUserLoginnameOk returns a tuple with the SUserLoginname field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetSUserLoginnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserLoginname, true
}

// SetSUserLoginname sets field value
func (o *UserListElement) SetSUserLoginname(v string) {
	o.SUserLoginname = v
}

// GetBUserIsactive returns the BUserIsactive field value
func (o *UserListElement) GetBUserIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BUserIsactive
}

// GetBUserIsactiveOk returns a tuple with the BUserIsactive field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetBUserIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BUserIsactive, true
}

// SetBUserIsactive sets field value
func (o *UserListElement) SetBUserIsactive(v bool) {
	o.BUserIsactive = v
}

// GetEUserType returns the EUserType field value
func (o *UserListElement) GetEUserType() FieldEUserType {
	if o == nil {
		var ret FieldEUserType
		return ret
	}

	return o.EUserType
}

// GetEUserTypeOk returns a tuple with the EUserType field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetEUserTypeOk() (*FieldEUserType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EUserType, true
}

// SetEUserType sets field value
func (o *UserListElement) SetEUserType(v FieldEUserType) {
	o.EUserType = v
}

// GetEUserOrigin returns the EUserOrigin field value
func (o *UserListElement) GetEUserOrigin() FieldEUserOrigin {
	if o == nil {
		var ret FieldEUserOrigin
		return ret
	}

	return o.EUserOrigin
}

// GetEUserOriginOk returns a tuple with the EUserOrigin field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetEUserOriginOk() (*FieldEUserOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EUserOrigin, true
}

// SetEUserOrigin sets field value
func (o *UserListElement) SetEUserOrigin(v FieldEUserOrigin) {
	o.EUserOrigin = v
}

// GetEUserEzsignaccess returns the EUserEzsignaccess field value
func (o *UserListElement) GetEUserEzsignaccess() FieldEUserEzsignaccess {
	if o == nil {
		var ret FieldEUserEzsignaccess
		return ret
	}

	return o.EUserEzsignaccess
}

// GetEUserEzsignaccessOk returns a tuple with the EUserEzsignaccess field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetEUserEzsignaccessOk() (*FieldEUserEzsignaccess, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EUserEzsignaccess, true
}

// SetEUserEzsignaccess sets field value
func (o *UserListElement) SetEUserEzsignaccess(v FieldEUserEzsignaccess) {
	o.EUserEzsignaccess = v
}

// GetDtUserEzsignprepaidexpiration returns the DtUserEzsignprepaidexpiration field value if set, zero value otherwise.
func (o *UserListElement) GetDtUserEzsignprepaidexpiration() string {
	if o == nil || IsNil(o.DtUserEzsignprepaidexpiration) {
		var ret string
		return ret
	}
	return *o.DtUserEzsignprepaidexpiration
}

// GetDtUserEzsignprepaidexpirationOk returns a tuple with the DtUserEzsignprepaidexpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserListElement) GetDtUserEzsignprepaidexpirationOk() (*string, bool) {
	if o == nil || IsNil(o.DtUserEzsignprepaidexpiration) {
		return nil, false
	}
	return o.DtUserEzsignprepaidexpiration, true
}

// HasDtUserEzsignprepaidexpiration returns a boolean if a field has been set.
func (o *UserListElement) HasDtUserEzsignprepaidexpiration() bool {
	if o != nil && !IsNil(o.DtUserEzsignprepaidexpiration) {
		return true
	}

	return false
}

// SetDtUserEzsignprepaidexpiration gets a reference to the given string and assigns it to the DtUserEzsignprepaidexpiration field.
func (o *UserListElement) SetDtUserEzsignprepaidexpiration(v string) {
	o.DtUserEzsignprepaidexpiration = &v
}

// GetSEmailAddress returns the SEmailAddress field value
func (o *UserListElement) GetSEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEmailAddress
}

// GetSEmailAddressOk returns a tuple with the SEmailAddress field value
// and a boolean to check if the value has been set.
func (o *UserListElement) GetSEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEmailAddress, true
}

// SetSEmailAddress sets field value
func (o *UserListElement) SetSEmailAddress(v string) {
	o.SEmailAddress = v
}

func (o UserListElement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserListElement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiUserID"] = o.PkiUserID
	toSerialize["sUserFirstname"] = o.SUserFirstname
	toSerialize["sUserLastname"] = o.SUserLastname
	toSerialize["sUserLoginname"] = o.SUserLoginname
	toSerialize["bUserIsactive"] = o.BUserIsactive
	toSerialize["eUserType"] = o.EUserType
	toSerialize["eUserOrigin"] = o.EUserOrigin
	toSerialize["eUserEzsignaccess"] = o.EUserEzsignaccess
	if !IsNil(o.DtUserEzsignprepaidexpiration) {
		toSerialize["dtUserEzsignprepaidexpiration"] = o.DtUserEzsignprepaidexpiration
	}
	toSerialize["sEmailAddress"] = o.SEmailAddress
	return toSerialize, nil
}

func (o *UserListElement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiUserID",
		"sUserFirstname",
		"sUserLastname",
		"sUserLoginname",
		"bUserIsactive",
		"eUserType",
		"eUserOrigin",
		"eUserEzsignaccess",
		"sEmailAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserListElement := _UserListElement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserListElement)

	if err != nil {
		return err
	}

	*o = UserListElement(varUserListElement)

	return err
}

type NullableUserListElement struct {
	value *UserListElement
	isSet bool
}

func (v NullableUserListElement) Get() *UserListElement {
	return v.value
}

func (v *NullableUserListElement) Set(val *UserListElement) {
	v.value = val
	v.isSet = true
}

func (v NullableUserListElement) IsSet() bool {
	return v.isSet
}

func (v *NullableUserListElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserListElement(val *UserListElement) *NullableUserListElement {
	return &NullableUserListElement{value: val, isSet: true}
}

func (v NullableUserListElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserListElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


