/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivesessionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivesessionResponse{}

// ActivesessionResponse An Activesession Object
type ActivesessionResponse struct {
	EActivesessionUsertype FieldEActivesessionUsertype `json:"eActivesessionUsertype"`
	EActivesessionOrigin FieldEActivesessionOrigin `json:"eActivesessionOrigin"`
	EActivesessionWeekdaystart FieldEActivesessionWeekdaystart `json:"eActivesessionWeekdaystart"`
	// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
	FkiLanguageID int32 `json:"fkiLanguageID"`
	// The Name of the Company in the language of the requester
	SCompanyNameX string `json:"sCompanyNameX"`
	// The Name of the Department in the language of the requester
	SDepartmentNameX string `json:"sDepartmentNameX"`
	// Whether the active session is in debug or not
	BActivesessionDebug bool `json:"bActivesessionDebug"`
	// Whether the active session is superadmin or not
	BActivesessionIssuperadmin bool `json:"bActivesessionIssuperadmin"`
	// Can access attachment when we clone a user
	BActivesessionAttachment *bool `json:"bActivesessionAttachment,omitempty"`
	// Can access canafe when we clone a user
	BActivesessionCanafe *bool `json:"bActivesessionCanafe,omitempty"`
	// Can access financial element when we clone a user
	BActivesessionFinancial *bool `json:"bActivesessionFinancial,omitempty"`
	// Can access closed realestate folders when we clone a user
	BActivesessionRealestatecompleted *bool `json:"bActivesessionRealestatecompleted,omitempty"`
	EActivesessionEzsign *FieldEActivesessionEzsign `json:"eActivesessionEzsign,omitempty"`
	EActivesessionEzsignaccess FieldEActivesessionEzsignaccess `json:"eActivesessionEzsignaccess"`
	EActivesessionEzsignprepaid *FieldEActivesessionEzsignprepaid `json:"eActivesessionEzsignprepaid,omitempty"`
	EActivesessionRealestateinprogress *FieldEActivesessionRealestateinprogress `json:"eActivesessionRealestateinprogress,omitempty"`
	// The customer code assigned to your account
	PksCustomerCode string `json:"pksCustomerCode"`
	// The unique ID of the Systemconfigurationtype
	FkiSystemconfigurationtypeID int32 `json:"fkiSystemconfigurationtypeID"`
	// The unique ID of the Signature
	FkiSignatureID *int32 `json:"fkiSignatureID,omitempty"`
}

type _ActivesessionResponse ActivesessionResponse

// NewActivesessionResponse instantiates a new ActivesessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivesessionResponse(eActivesessionUsertype FieldEActivesessionUsertype, eActivesessionOrigin FieldEActivesessionOrigin, eActivesessionWeekdaystart FieldEActivesessionWeekdaystart, fkiLanguageID int32, sCompanyNameX string, sDepartmentNameX string, bActivesessionDebug bool, bActivesessionIssuperadmin bool, eActivesessionEzsignaccess FieldEActivesessionEzsignaccess, pksCustomerCode string, fkiSystemconfigurationtypeID int32) *ActivesessionResponse {
	this := ActivesessionResponse{}
	this.EActivesessionUsertype = eActivesessionUsertype
	this.EActivesessionOrigin = eActivesessionOrigin
	this.EActivesessionWeekdaystart = eActivesessionWeekdaystart
	this.FkiLanguageID = fkiLanguageID
	this.SCompanyNameX = sCompanyNameX
	this.SDepartmentNameX = sDepartmentNameX
	this.BActivesessionDebug = bActivesessionDebug
	this.BActivesessionIssuperadmin = bActivesessionIssuperadmin
	this.EActivesessionEzsignaccess = eActivesessionEzsignaccess
	this.PksCustomerCode = pksCustomerCode
	this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID
	return &this
}

// NewActivesessionResponseWithDefaults instantiates a new ActivesessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivesessionResponseWithDefaults() *ActivesessionResponse {
	this := ActivesessionResponse{}
	return &this
}

// GetEActivesessionUsertype returns the EActivesessionUsertype field value
func (o *ActivesessionResponse) GetEActivesessionUsertype() FieldEActivesessionUsertype {
	if o == nil {
		var ret FieldEActivesessionUsertype
		return ret
	}

	return o.EActivesessionUsertype
}

// GetEActivesessionUsertypeOk returns a tuple with the EActivesessionUsertype field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionUsertypeOk() (*FieldEActivesessionUsertype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionUsertype, true
}

// SetEActivesessionUsertype sets field value
func (o *ActivesessionResponse) SetEActivesessionUsertype(v FieldEActivesessionUsertype) {
	o.EActivesessionUsertype = v
}

// GetEActivesessionOrigin returns the EActivesessionOrigin field value
func (o *ActivesessionResponse) GetEActivesessionOrigin() FieldEActivesessionOrigin {
	if o == nil {
		var ret FieldEActivesessionOrigin
		return ret
	}

	return o.EActivesessionOrigin
}

// GetEActivesessionOriginOk returns a tuple with the EActivesessionOrigin field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionOriginOk() (*FieldEActivesessionOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionOrigin, true
}

// SetEActivesessionOrigin sets field value
func (o *ActivesessionResponse) SetEActivesessionOrigin(v FieldEActivesessionOrigin) {
	o.EActivesessionOrigin = v
}

// GetEActivesessionWeekdaystart returns the EActivesessionWeekdaystart field value
func (o *ActivesessionResponse) GetEActivesessionWeekdaystart() FieldEActivesessionWeekdaystart {
	if o == nil {
		var ret FieldEActivesessionWeekdaystart
		return ret
	}

	return o.EActivesessionWeekdaystart
}

// GetEActivesessionWeekdaystartOk returns a tuple with the EActivesessionWeekdaystart field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionWeekdaystartOk() (*FieldEActivesessionWeekdaystart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionWeekdaystart, true
}

// SetEActivesessionWeekdaystart sets field value
func (o *ActivesessionResponse) SetEActivesessionWeekdaystart(v FieldEActivesessionWeekdaystart) {
	o.EActivesessionWeekdaystart = v
}

// GetFkiLanguageID returns the FkiLanguageID field value
func (o *ActivesessionResponse) GetFkiLanguageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiLanguageID
}

// GetFkiLanguageIDOk returns a tuple with the FkiLanguageID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetFkiLanguageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiLanguageID, true
}

// SetFkiLanguageID sets field value
func (o *ActivesessionResponse) SetFkiLanguageID(v int32) {
	o.FkiLanguageID = v
}

// GetSCompanyNameX returns the SCompanyNameX field value
func (o *ActivesessionResponse) GetSCompanyNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCompanyNameX
}

// GetSCompanyNameXOk returns a tuple with the SCompanyNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetSCompanyNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCompanyNameX, true
}

// SetSCompanyNameX sets field value
func (o *ActivesessionResponse) SetSCompanyNameX(v string) {
	o.SCompanyNameX = v
}

// GetSDepartmentNameX returns the SDepartmentNameX field value
func (o *ActivesessionResponse) GetSDepartmentNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDepartmentNameX
}

// GetSDepartmentNameXOk returns a tuple with the SDepartmentNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetSDepartmentNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDepartmentNameX, true
}

// SetSDepartmentNameX sets field value
func (o *ActivesessionResponse) SetSDepartmentNameX(v string) {
	o.SDepartmentNameX = v
}

// GetBActivesessionDebug returns the BActivesessionDebug field value
func (o *ActivesessionResponse) GetBActivesessionDebug() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BActivesessionDebug
}

// GetBActivesessionDebugOk returns a tuple with the BActivesessionDebug field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionDebugOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BActivesessionDebug, true
}

// SetBActivesessionDebug sets field value
func (o *ActivesessionResponse) SetBActivesessionDebug(v bool) {
	o.BActivesessionDebug = v
}

// GetBActivesessionIssuperadmin returns the BActivesessionIssuperadmin field value
func (o *ActivesessionResponse) GetBActivesessionIssuperadmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BActivesessionIssuperadmin
}

// GetBActivesessionIssuperadminOk returns a tuple with the BActivesessionIssuperadmin field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionIssuperadminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BActivesessionIssuperadmin, true
}

// SetBActivesessionIssuperadmin sets field value
func (o *ActivesessionResponse) SetBActivesessionIssuperadmin(v bool) {
	o.BActivesessionIssuperadmin = v
}

// GetBActivesessionAttachment returns the BActivesessionAttachment field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetBActivesessionAttachment() bool {
	if o == nil || IsNil(o.BActivesessionAttachment) {
		var ret bool
		return ret
	}
	return *o.BActivesessionAttachment
}

// GetBActivesessionAttachmentOk returns a tuple with the BActivesessionAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionAttachmentOk() (*bool, bool) {
	if o == nil || IsNil(o.BActivesessionAttachment) {
		return nil, false
	}
	return o.BActivesessionAttachment, true
}

// HasBActivesessionAttachment returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasBActivesessionAttachment() bool {
	if o != nil && !IsNil(o.BActivesessionAttachment) {
		return true
	}

	return false
}

// SetBActivesessionAttachment gets a reference to the given bool and assigns it to the BActivesessionAttachment field.
func (o *ActivesessionResponse) SetBActivesessionAttachment(v bool) {
	o.BActivesessionAttachment = &v
}

// GetBActivesessionCanafe returns the BActivesessionCanafe field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetBActivesessionCanafe() bool {
	if o == nil || IsNil(o.BActivesessionCanafe) {
		var ret bool
		return ret
	}
	return *o.BActivesessionCanafe
}

// GetBActivesessionCanafeOk returns a tuple with the BActivesessionCanafe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionCanafeOk() (*bool, bool) {
	if o == nil || IsNil(o.BActivesessionCanafe) {
		return nil, false
	}
	return o.BActivesessionCanafe, true
}

// HasBActivesessionCanafe returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasBActivesessionCanafe() bool {
	if o != nil && !IsNil(o.BActivesessionCanafe) {
		return true
	}

	return false
}

// SetBActivesessionCanafe gets a reference to the given bool and assigns it to the BActivesessionCanafe field.
func (o *ActivesessionResponse) SetBActivesessionCanafe(v bool) {
	o.BActivesessionCanafe = &v
}

// GetBActivesessionFinancial returns the BActivesessionFinancial field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetBActivesessionFinancial() bool {
	if o == nil || IsNil(o.BActivesessionFinancial) {
		var ret bool
		return ret
	}
	return *o.BActivesessionFinancial
}

// GetBActivesessionFinancialOk returns a tuple with the BActivesessionFinancial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionFinancialOk() (*bool, bool) {
	if o == nil || IsNil(o.BActivesessionFinancial) {
		return nil, false
	}
	return o.BActivesessionFinancial, true
}

// HasBActivesessionFinancial returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasBActivesessionFinancial() bool {
	if o != nil && !IsNil(o.BActivesessionFinancial) {
		return true
	}

	return false
}

// SetBActivesessionFinancial gets a reference to the given bool and assigns it to the BActivesessionFinancial field.
func (o *ActivesessionResponse) SetBActivesessionFinancial(v bool) {
	o.BActivesessionFinancial = &v
}

// GetBActivesessionRealestatecompleted returns the BActivesessionRealestatecompleted field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetBActivesessionRealestatecompleted() bool {
	if o == nil || IsNil(o.BActivesessionRealestatecompleted) {
		var ret bool
		return ret
	}
	return *o.BActivesessionRealestatecompleted
}

// GetBActivesessionRealestatecompletedOk returns a tuple with the BActivesessionRealestatecompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionRealestatecompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.BActivesessionRealestatecompleted) {
		return nil, false
	}
	return o.BActivesessionRealestatecompleted, true
}

// HasBActivesessionRealestatecompleted returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasBActivesessionRealestatecompleted() bool {
	if o != nil && !IsNil(o.BActivesessionRealestatecompleted) {
		return true
	}

	return false
}

// SetBActivesessionRealestatecompleted gets a reference to the given bool and assigns it to the BActivesessionRealestatecompleted field.
func (o *ActivesessionResponse) SetBActivesessionRealestatecompleted(v bool) {
	o.BActivesessionRealestatecompleted = &v
}

// GetEActivesessionEzsign returns the EActivesessionEzsign field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetEActivesessionEzsign() FieldEActivesessionEzsign {
	if o == nil || IsNil(o.EActivesessionEzsign) {
		var ret FieldEActivesessionEzsign
		return ret
	}
	return *o.EActivesessionEzsign
}

// GetEActivesessionEzsignOk returns a tuple with the EActivesessionEzsign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionEzsignOk() (*FieldEActivesessionEzsign, bool) {
	if o == nil || IsNil(o.EActivesessionEzsign) {
		return nil, false
	}
	return o.EActivesessionEzsign, true
}

// HasEActivesessionEzsign returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasEActivesessionEzsign() bool {
	if o != nil && !IsNil(o.EActivesessionEzsign) {
		return true
	}

	return false
}

// SetEActivesessionEzsign gets a reference to the given FieldEActivesessionEzsign and assigns it to the EActivesessionEzsign field.
func (o *ActivesessionResponse) SetEActivesessionEzsign(v FieldEActivesessionEzsign) {
	o.EActivesessionEzsign = &v
}

// GetEActivesessionEzsignaccess returns the EActivesessionEzsignaccess field value
func (o *ActivesessionResponse) GetEActivesessionEzsignaccess() FieldEActivesessionEzsignaccess {
	if o == nil {
		var ret FieldEActivesessionEzsignaccess
		return ret
	}

	return o.EActivesessionEzsignaccess
}

// GetEActivesessionEzsignaccessOk returns a tuple with the EActivesessionEzsignaccess field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionEzsignaccessOk() (*FieldEActivesessionEzsignaccess, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionEzsignaccess, true
}

// SetEActivesessionEzsignaccess sets field value
func (o *ActivesessionResponse) SetEActivesessionEzsignaccess(v FieldEActivesessionEzsignaccess) {
	o.EActivesessionEzsignaccess = v
}

// GetEActivesessionEzsignprepaid returns the EActivesessionEzsignprepaid field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetEActivesessionEzsignprepaid() FieldEActivesessionEzsignprepaid {
	if o == nil || IsNil(o.EActivesessionEzsignprepaid) {
		var ret FieldEActivesessionEzsignprepaid
		return ret
	}
	return *o.EActivesessionEzsignprepaid
}

// GetEActivesessionEzsignprepaidOk returns a tuple with the EActivesessionEzsignprepaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionEzsignprepaidOk() (*FieldEActivesessionEzsignprepaid, bool) {
	if o == nil || IsNil(o.EActivesessionEzsignprepaid) {
		return nil, false
	}
	return o.EActivesessionEzsignprepaid, true
}

// HasEActivesessionEzsignprepaid returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasEActivesessionEzsignprepaid() bool {
	if o != nil && !IsNil(o.EActivesessionEzsignprepaid) {
		return true
	}

	return false
}

// SetEActivesessionEzsignprepaid gets a reference to the given FieldEActivesessionEzsignprepaid and assigns it to the EActivesessionEzsignprepaid field.
func (o *ActivesessionResponse) SetEActivesessionEzsignprepaid(v FieldEActivesessionEzsignprepaid) {
	o.EActivesessionEzsignprepaid = &v
}

// GetEActivesessionRealestateinprogress returns the EActivesessionRealestateinprogress field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetEActivesessionRealestateinprogress() FieldEActivesessionRealestateinprogress {
	if o == nil || IsNil(o.EActivesessionRealestateinprogress) {
		var ret FieldEActivesessionRealestateinprogress
		return ret
	}
	return *o.EActivesessionRealestateinprogress
}

// GetEActivesessionRealestateinprogressOk returns a tuple with the EActivesessionRealestateinprogress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionRealestateinprogressOk() (*FieldEActivesessionRealestateinprogress, bool) {
	if o == nil || IsNil(o.EActivesessionRealestateinprogress) {
		return nil, false
	}
	return o.EActivesessionRealestateinprogress, true
}

// HasEActivesessionRealestateinprogress returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasEActivesessionRealestateinprogress() bool {
	if o != nil && !IsNil(o.EActivesessionRealestateinprogress) {
		return true
	}

	return false
}

// SetEActivesessionRealestateinprogress gets a reference to the given FieldEActivesessionRealestateinprogress and assigns it to the EActivesessionRealestateinprogress field.
func (o *ActivesessionResponse) SetEActivesessionRealestateinprogress(v FieldEActivesessionRealestateinprogress) {
	o.EActivesessionRealestateinprogress = &v
}

// GetPksCustomerCode returns the PksCustomerCode field value
func (o *ActivesessionResponse) GetPksCustomerCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PksCustomerCode
}

// GetPksCustomerCodeOk returns a tuple with the PksCustomerCode field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetPksCustomerCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PksCustomerCode, true
}

// SetPksCustomerCode sets field value
func (o *ActivesessionResponse) SetPksCustomerCode(v string) {
	o.PksCustomerCode = v
}

// GetFkiSystemconfigurationtypeID returns the FkiSystemconfigurationtypeID field value
func (o *ActivesessionResponse) GetFkiSystemconfigurationtypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiSystemconfigurationtypeID
}

// GetFkiSystemconfigurationtypeIDOk returns a tuple with the FkiSystemconfigurationtypeID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetFkiSystemconfigurationtypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiSystemconfigurationtypeID, true
}

// SetFkiSystemconfigurationtypeID sets field value
func (o *ActivesessionResponse) SetFkiSystemconfigurationtypeID(v int32) {
	o.FkiSystemconfigurationtypeID = v
}

// GetFkiSignatureID returns the FkiSignatureID field value if set, zero value otherwise.
func (o *ActivesessionResponse) GetFkiSignatureID() int32 {
	if o == nil || IsNil(o.FkiSignatureID) {
		var ret int32
		return ret
	}
	return *o.FkiSignatureID
}

// GetFkiSignatureIDOk returns a tuple with the FkiSignatureID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetFkiSignatureIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiSignatureID) {
		return nil, false
	}
	return o.FkiSignatureID, true
}

// HasFkiSignatureID returns a boolean if a field has been set.
func (o *ActivesessionResponse) HasFkiSignatureID() bool {
	if o != nil && !IsNil(o.FkiSignatureID) {
		return true
	}

	return false
}

// SetFkiSignatureID gets a reference to the given int32 and assigns it to the FkiSignatureID field.
func (o *ActivesessionResponse) SetFkiSignatureID(v int32) {
	o.FkiSignatureID = &v
}

func (o ActivesessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivesessionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eActivesessionUsertype"] = o.EActivesessionUsertype
	toSerialize["eActivesessionOrigin"] = o.EActivesessionOrigin
	toSerialize["eActivesessionWeekdaystart"] = o.EActivesessionWeekdaystart
	toSerialize["fkiLanguageID"] = o.FkiLanguageID
	toSerialize["sCompanyNameX"] = o.SCompanyNameX
	toSerialize["sDepartmentNameX"] = o.SDepartmentNameX
	toSerialize["bActivesessionDebug"] = o.BActivesessionDebug
	toSerialize["bActivesessionIssuperadmin"] = o.BActivesessionIssuperadmin
	if !IsNil(o.BActivesessionAttachment) {
		toSerialize["bActivesessionAttachment"] = o.BActivesessionAttachment
	}
	if !IsNil(o.BActivesessionCanafe) {
		toSerialize["bActivesessionCanafe"] = o.BActivesessionCanafe
	}
	if !IsNil(o.BActivesessionFinancial) {
		toSerialize["bActivesessionFinancial"] = o.BActivesessionFinancial
	}
	if !IsNil(o.BActivesessionRealestatecompleted) {
		toSerialize["bActivesessionRealestatecompleted"] = o.BActivesessionRealestatecompleted
	}
	if !IsNil(o.EActivesessionEzsign) {
		toSerialize["eActivesessionEzsign"] = o.EActivesessionEzsign
	}
	toSerialize["eActivesessionEzsignaccess"] = o.EActivesessionEzsignaccess
	if !IsNil(o.EActivesessionEzsignprepaid) {
		toSerialize["eActivesessionEzsignprepaid"] = o.EActivesessionEzsignprepaid
	}
	if !IsNil(o.EActivesessionRealestateinprogress) {
		toSerialize["eActivesessionRealestateinprogress"] = o.EActivesessionRealestateinprogress
	}
	toSerialize["pksCustomerCode"] = o.PksCustomerCode
	toSerialize["fkiSystemconfigurationtypeID"] = o.FkiSystemconfigurationtypeID
	if !IsNil(o.FkiSignatureID) {
		toSerialize["fkiSignatureID"] = o.FkiSignatureID
	}
	return toSerialize, nil
}

func (o *ActivesessionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eActivesessionUsertype",
		"eActivesessionOrigin",
		"eActivesessionWeekdaystart",
		"fkiLanguageID",
		"sCompanyNameX",
		"sDepartmentNameX",
		"bActivesessionDebug",
		"bActivesessionIssuperadmin",
		"eActivesessionEzsignaccess",
		"pksCustomerCode",
		"fkiSystemconfigurationtypeID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivesessionResponse := _ActivesessionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivesessionResponse)

	if err != nil {
		return err
	}

	*o = ActivesessionResponse(varActivesessionResponse)

	return err
}

type NullableActivesessionResponse struct {
	value *ActivesessionResponse
	isSet bool
}

func (v NullableActivesessionResponse) Get() *ActivesessionResponse {
	return v.value
}

func (v *NullableActivesessionResponse) Set(val *ActivesessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActivesessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActivesessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivesessionResponse(val *ActivesessionResponse) *NullableActivesessionResponse {
	return &NullableActivesessionResponse{value: val, isSet: true}
}

func (v NullableActivesessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivesessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


