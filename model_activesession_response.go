/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.4
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// ActivesessionResponse An Activesession Object
type ActivesessionResponse struct {
	EActivesessionSessiontype FieldEActivesessionSessiontype `json:"eActivesessionSessiontype"`
	EActivesessionWeekdaystart FieldEActivesessionWeekdaystart `json:"eActivesessionWeekdaystart"`
	// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
	FkiLanguageID int32 `json:"fkiLanguageID"`
	// The Name of the Company in the language of the requester
	SCompanyNameX string `json:"sCompanyNameX"`
	// The Name of the Department in the language of the requester
	SDepartmentNameX string `json:"sDepartmentNameX"`
	// Whether the active session is in debug or not
	BActivesessionDebug bool `json:"bActivesessionDebug"`
	// The customer code assigned to your account
	PksCustomerCode string `json:"pksCustomerCode"`
}

// NewActivesessionResponse instantiates a new ActivesessionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivesessionResponse(eActivesessionSessiontype FieldEActivesessionSessiontype, eActivesessionWeekdaystart FieldEActivesessionWeekdaystart, fkiLanguageID int32, sCompanyNameX string, sDepartmentNameX string, bActivesessionDebug bool, pksCustomerCode string) *ActivesessionResponse {
	this := ActivesessionResponse{}
	this.EActivesessionSessiontype = eActivesessionSessiontype
	this.EActivesessionWeekdaystart = eActivesessionWeekdaystart
	this.FkiLanguageID = fkiLanguageID
	this.SCompanyNameX = sCompanyNameX
	this.SDepartmentNameX = sDepartmentNameX
	this.BActivesessionDebug = bActivesessionDebug
	this.PksCustomerCode = pksCustomerCode
	return &this
}

// NewActivesessionResponseWithDefaults instantiates a new ActivesessionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivesessionResponseWithDefaults() *ActivesessionResponse {
	this := ActivesessionResponse{}
	return &this
}

// GetEActivesessionSessiontype returns the EActivesessionSessiontype field value
func (o *ActivesessionResponse) GetEActivesessionSessiontype() FieldEActivesessionSessiontype {
	if o == nil {
		var ret FieldEActivesessionSessiontype
		return ret
	}

	return o.EActivesessionSessiontype
}

// GetEActivesessionSessiontypeOk returns a tuple with the EActivesessionSessiontype field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionSessiontypeOk() (*FieldEActivesessionSessiontype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionSessiontype, true
}

// SetEActivesessionSessiontype sets field value
func (o *ActivesessionResponse) SetEActivesessionSessiontype(v FieldEActivesessionSessiontype) {
	o.EActivesessionSessiontype = v
}

// GetEActivesessionWeekdaystart returns the EActivesessionWeekdaystart field value
func (o *ActivesessionResponse) GetEActivesessionWeekdaystart() FieldEActivesessionWeekdaystart {
	if o == nil {
		var ret FieldEActivesessionWeekdaystart
		return ret
	}

	return o.EActivesessionWeekdaystart
}

// GetEActivesessionWeekdaystartOk returns a tuple with the EActivesessionWeekdaystart field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetEActivesessionWeekdaystartOk() (*FieldEActivesessionWeekdaystart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionWeekdaystart, true
}

// SetEActivesessionWeekdaystart sets field value
func (o *ActivesessionResponse) SetEActivesessionWeekdaystart(v FieldEActivesessionWeekdaystart) {
	o.EActivesessionWeekdaystart = v
}

// GetFkiLanguageID returns the FkiLanguageID field value
func (o *ActivesessionResponse) GetFkiLanguageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiLanguageID
}

// GetFkiLanguageIDOk returns a tuple with the FkiLanguageID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetFkiLanguageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiLanguageID, true
}

// SetFkiLanguageID sets field value
func (o *ActivesessionResponse) SetFkiLanguageID(v int32) {
	o.FkiLanguageID = v
}

// GetSCompanyNameX returns the SCompanyNameX field value
func (o *ActivesessionResponse) GetSCompanyNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCompanyNameX
}

// GetSCompanyNameXOk returns a tuple with the SCompanyNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetSCompanyNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCompanyNameX, true
}

// SetSCompanyNameX sets field value
func (o *ActivesessionResponse) SetSCompanyNameX(v string) {
	o.SCompanyNameX = v
}

// GetSDepartmentNameX returns the SDepartmentNameX field value
func (o *ActivesessionResponse) GetSDepartmentNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDepartmentNameX
}

// GetSDepartmentNameXOk returns a tuple with the SDepartmentNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetSDepartmentNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDepartmentNameX, true
}

// SetSDepartmentNameX sets field value
func (o *ActivesessionResponse) SetSDepartmentNameX(v string) {
	o.SDepartmentNameX = v
}

// GetBActivesessionDebug returns the BActivesessionDebug field value
func (o *ActivesessionResponse) GetBActivesessionDebug() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BActivesessionDebug
}

// GetBActivesessionDebugOk returns a tuple with the BActivesessionDebug field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetBActivesessionDebugOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BActivesessionDebug, true
}

// SetBActivesessionDebug sets field value
func (o *ActivesessionResponse) SetBActivesessionDebug(v bool) {
	o.BActivesessionDebug = v
}

// GetPksCustomerCode returns the PksCustomerCode field value
func (o *ActivesessionResponse) GetPksCustomerCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PksCustomerCode
}

// GetPksCustomerCodeOk returns a tuple with the PksCustomerCode field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponse) GetPksCustomerCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PksCustomerCode, true
}

// SetPksCustomerCode sets field value
func (o *ActivesessionResponse) SetPksCustomerCode(v string) {
	o.PksCustomerCode = v
}

func (o ActivesessionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["eActivesessionSessiontype"] = o.EActivesessionSessiontype
	}
	if true {
		toSerialize["eActivesessionWeekdaystart"] = o.EActivesessionWeekdaystart
	}
	if true {
		toSerialize["fkiLanguageID"] = o.FkiLanguageID
	}
	if true {
		toSerialize["sCompanyNameX"] = o.SCompanyNameX
	}
	if true {
		toSerialize["sDepartmentNameX"] = o.SDepartmentNameX
	}
	if true {
		toSerialize["bActivesessionDebug"] = o.BActivesessionDebug
	}
	if true {
		toSerialize["pksCustomerCode"] = o.PksCustomerCode
	}
	return json.Marshal(toSerialize)
}

type NullableActivesessionResponse struct {
	value *ActivesessionResponse
	isSet bool
}

func (v NullableActivesessionResponse) Get() *ActivesessionResponse {
	return v.value
}

func (v *NullableActivesessionResponse) Set(val *ActivesessionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableActivesessionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableActivesessionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivesessionResponse(val *ActivesessionResponse) *NullableActivesessionResponse {
	return &NullableActivesessionResponse{value: val, isSet: true}
}

func (v NullableActivesessionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivesessionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


