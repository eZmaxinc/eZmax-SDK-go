/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldENotificationpreferenceStatus The display status for the Notificationtest.
type FieldENotificationpreferenceStatus string

// List of Field-eNotificationpreferenceStatus
const (
	SHOW FieldENotificationpreferenceStatus = "Show"
	HIDE FieldENotificationpreferenceStatus = "Hide"
	PIN FieldENotificationpreferenceStatus = "Pin"
)

// All allowed values of FieldENotificationpreferenceStatus enum
var AllowedFieldENotificationpreferenceStatusEnumValues = []FieldENotificationpreferenceStatus{
	"Show",
	"Hide",
	"Pin",
}

func (v *FieldENotificationpreferenceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldENotificationpreferenceStatus(value)
	for _, existing := range AllowedFieldENotificationpreferenceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldENotificationpreferenceStatus", value)
}

// NewFieldENotificationpreferenceStatusFromValue returns a pointer to a valid FieldENotificationpreferenceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldENotificationpreferenceStatusFromValue(v string) (*FieldENotificationpreferenceStatus, error) {
	ev := FieldENotificationpreferenceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldENotificationpreferenceStatus: valid values are %v", v, AllowedFieldENotificationpreferenceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldENotificationpreferenceStatus) IsValid() bool {
	for _, existing := range AllowedFieldENotificationpreferenceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eNotificationpreferenceStatus value
func (v FieldENotificationpreferenceStatus) Ptr() *FieldENotificationpreferenceStatus {
	return &v
}

type NullableFieldENotificationpreferenceStatus struct {
	value *FieldENotificationpreferenceStatus
	isSet bool
}

func (v NullableFieldENotificationpreferenceStatus) Get() *FieldENotificationpreferenceStatus {
	return v.value
}

func (v *NullableFieldENotificationpreferenceStatus) Set(val *FieldENotificationpreferenceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldENotificationpreferenceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldENotificationpreferenceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldENotificationpreferenceStatus(val *FieldENotificationpreferenceStatus) *NullableFieldENotificationpreferenceStatus {
	return &NullableFieldENotificationpreferenceStatus{value: val, isSet: true}
}

func (v NullableFieldENotificationpreferenceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldENotificationpreferenceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

