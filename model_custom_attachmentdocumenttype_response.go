/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomAttachmentdocumenttypeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAttachmentdocumenttypeResponse{}

// CustomAttachmentdocumenttypeResponse An Attachmentdocumenttype
type CustomAttachmentdocumenttypeResponse struct {
	EAttachmentDocumenttype FieldEAttachmentDocumenttype `json:"eAttachmentDocumenttype"`
	AObjAttachment []CustomAttachmentResponse `json:"a_objAttachment"`
}

type _CustomAttachmentdocumenttypeResponse CustomAttachmentdocumenttypeResponse

// NewCustomAttachmentdocumenttypeResponse instantiates a new CustomAttachmentdocumenttypeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAttachmentdocumenttypeResponse(eAttachmentDocumenttype FieldEAttachmentDocumenttype, aObjAttachment []CustomAttachmentResponse) *CustomAttachmentdocumenttypeResponse {
	this := CustomAttachmentdocumenttypeResponse{}
	this.EAttachmentDocumenttype = eAttachmentDocumenttype
	this.AObjAttachment = aObjAttachment
	return &this
}

// NewCustomAttachmentdocumenttypeResponseWithDefaults instantiates a new CustomAttachmentdocumenttypeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAttachmentdocumenttypeResponseWithDefaults() *CustomAttachmentdocumenttypeResponse {
	this := CustomAttachmentdocumenttypeResponse{}
	return &this
}

// GetEAttachmentDocumenttype returns the EAttachmentDocumenttype field value
func (o *CustomAttachmentdocumenttypeResponse) GetEAttachmentDocumenttype() FieldEAttachmentDocumenttype {
	if o == nil {
		var ret FieldEAttachmentDocumenttype
		return ret
	}

	return o.EAttachmentDocumenttype
}

// GetEAttachmentDocumenttypeOk returns a tuple with the EAttachmentDocumenttype field value
// and a boolean to check if the value has been set.
func (o *CustomAttachmentdocumenttypeResponse) GetEAttachmentDocumenttypeOk() (*FieldEAttachmentDocumenttype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EAttachmentDocumenttype, true
}

// SetEAttachmentDocumenttype sets field value
func (o *CustomAttachmentdocumenttypeResponse) SetEAttachmentDocumenttype(v FieldEAttachmentDocumenttype) {
	o.EAttachmentDocumenttype = v
}

// GetAObjAttachment returns the AObjAttachment field value
func (o *CustomAttachmentdocumenttypeResponse) GetAObjAttachment() []CustomAttachmentResponse {
	if o == nil {
		var ret []CustomAttachmentResponse
		return ret
	}

	return o.AObjAttachment
}

// GetAObjAttachmentOk returns a tuple with the AObjAttachment field value
// and a boolean to check if the value has been set.
func (o *CustomAttachmentdocumenttypeResponse) GetAObjAttachmentOk() ([]CustomAttachmentResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjAttachment, true
}

// SetAObjAttachment sets field value
func (o *CustomAttachmentdocumenttypeResponse) SetAObjAttachment(v []CustomAttachmentResponse) {
	o.AObjAttachment = v
}

func (o CustomAttachmentdocumenttypeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAttachmentdocumenttypeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eAttachmentDocumenttype"] = o.EAttachmentDocumenttype
	toSerialize["a_objAttachment"] = o.AObjAttachment
	return toSerialize, nil
}

func (o *CustomAttachmentdocumenttypeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eAttachmentDocumenttype",
		"a_objAttachment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomAttachmentdocumenttypeResponse := _CustomAttachmentdocumenttypeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomAttachmentdocumenttypeResponse)

	if err != nil {
		return err
	}

	*o = CustomAttachmentdocumenttypeResponse(varCustomAttachmentdocumenttypeResponse)

	return err
}

type NullableCustomAttachmentdocumenttypeResponse struct {
	value *CustomAttachmentdocumenttypeResponse
	isSet bool
}

func (v NullableCustomAttachmentdocumenttypeResponse) Get() *CustomAttachmentdocumenttypeResponse {
	return v.value
}

func (v *NullableCustomAttachmentdocumenttypeResponse) Set(val *CustomAttachmentdocumenttypeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAttachmentdocumenttypeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAttachmentdocumenttypeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAttachmentdocumenttypeResponse(val *CustomAttachmentdocumenttypeResponse) *NullableCustomAttachmentdocumenttypeResponse {
	return &NullableCustomAttachmentdocumenttypeResponse{value: val, isSet: true}
}

func (v NullableCustomAttachmentdocumenttypeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAttachmentdocumenttypeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


