/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the CommonResponseFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonResponseFilter{}

// CommonResponseFilter Definition of Filters for getList
type CommonResponseFilter struct {
	// List of filters that can be used in *sFilter* (Automatic types)
	AAutoType *map[string]string `json:"a_AutoType,omitempty"`
	// List of computed filters that can be used in *sFilter* (Automatic types)
	AAutoTypeHaving *map[string]string `json:"a_AutoTypeHaving,omitempty"`
	// List of filters that can be used in *sFilter* (Enum types)
	AEnum *map[string]map[string]string `json:"a_Enum,omitempty"`
}

// NewCommonResponseFilter instantiates a new CommonResponseFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonResponseFilter() *CommonResponseFilter {
	this := CommonResponseFilter{}
	return &this
}

// NewCommonResponseFilterWithDefaults instantiates a new CommonResponseFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonResponseFilterWithDefaults() *CommonResponseFilter {
	this := CommonResponseFilter{}
	return &this
}

// GetAAutoType returns the AAutoType field value if set, zero value otherwise.
func (o *CommonResponseFilter) GetAAutoType() map[string]string {
	if o == nil || IsNil(o.AAutoType) {
		var ret map[string]string
		return ret
	}
	return *o.AAutoType
}

// GetAAutoTypeOk returns a tuple with the AAutoType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResponseFilter) GetAAutoTypeOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AAutoType) {
		return nil, false
	}
	return o.AAutoType, true
}

// HasAAutoType returns a boolean if a field has been set.
func (o *CommonResponseFilter) HasAAutoType() bool {
	if o != nil && !IsNil(o.AAutoType) {
		return true
	}

	return false
}

// SetAAutoType gets a reference to the given map[string]string and assigns it to the AAutoType field.
func (o *CommonResponseFilter) SetAAutoType(v map[string]string) {
	o.AAutoType = &v
}

// GetAAutoTypeHaving returns the AAutoTypeHaving field value if set, zero value otherwise.
func (o *CommonResponseFilter) GetAAutoTypeHaving() map[string]string {
	if o == nil || IsNil(o.AAutoTypeHaving) {
		var ret map[string]string
		return ret
	}
	return *o.AAutoTypeHaving
}

// GetAAutoTypeHavingOk returns a tuple with the AAutoTypeHaving field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResponseFilter) GetAAutoTypeHavingOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AAutoTypeHaving) {
		return nil, false
	}
	return o.AAutoTypeHaving, true
}

// HasAAutoTypeHaving returns a boolean if a field has been set.
func (o *CommonResponseFilter) HasAAutoTypeHaving() bool {
	if o != nil && !IsNil(o.AAutoTypeHaving) {
		return true
	}

	return false
}

// SetAAutoTypeHaving gets a reference to the given map[string]string and assigns it to the AAutoTypeHaving field.
func (o *CommonResponseFilter) SetAAutoTypeHaving(v map[string]string) {
	o.AAutoTypeHaving = &v
}

// GetAEnum returns the AEnum field value if set, zero value otherwise.
func (o *CommonResponseFilter) GetAEnum() map[string]map[string]string {
	if o == nil || IsNil(o.AEnum) {
		var ret map[string]map[string]string
		return ret
	}
	return *o.AEnum
}

// GetAEnumOk returns a tuple with the AEnum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResponseFilter) GetAEnumOk() (*map[string]map[string]string, bool) {
	if o == nil || IsNil(o.AEnum) {
		return nil, false
	}
	return o.AEnum, true
}

// HasAEnum returns a boolean if a field has been set.
func (o *CommonResponseFilter) HasAEnum() bool {
	if o != nil && !IsNil(o.AEnum) {
		return true
	}

	return false
}

// SetAEnum gets a reference to the given map[string]map[string]string and assigns it to the AEnum field.
func (o *CommonResponseFilter) SetAEnum(v map[string]map[string]string) {
	o.AEnum = &v
}

func (o CommonResponseFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonResponseFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AAutoType) {
		toSerialize["a_AutoType"] = o.AAutoType
	}
	if !IsNil(o.AAutoTypeHaving) {
		toSerialize["a_AutoTypeHaving"] = o.AAutoTypeHaving
	}
	if !IsNil(o.AEnum) {
		toSerialize["a_Enum"] = o.AEnum
	}
	return toSerialize, nil
}

type NullableCommonResponseFilter struct {
	value *CommonResponseFilter
	isSet bool
}

func (v NullableCommonResponseFilter) Get() *CommonResponseFilter {
	return v.value
}

func (v *NullableCommonResponseFilter) Set(val *CommonResponseFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonResponseFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonResponseFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonResponseFilter(val *CommonResponseFilter) *NullableCommonResponseFilter {
	return &NullableCommonResponseFilter{value: val, isSet: true}
}

func (v NullableCommonResponseFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonResponseFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


