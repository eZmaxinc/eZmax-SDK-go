/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignannotationRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignannotationRequestCompound{}

// EzsignannotationRequestCompound A Ezsignannotation Object and children
type EzsignannotationRequestCompound struct {
	// The unique ID of the Ezsignannotation
	PkiEzsignannotationID *int32 `json:"pkiEzsignannotationID,omitempty"`
	// The unique ID of the Ezsigndocument
	FkiEzsigndocumentID int32 `json:"fkiEzsigndocumentID"`
	EEzsignannotationHorizontalalignment *EnumHorizontalalignment `json:"eEzsignannotationHorizontalalignment,omitempty"`
	EEzsignannotationVerticalalignment *EnumVerticalalignment `json:"eEzsignannotationVerticalalignment,omitempty"`
	EEzsignannotationType FieldEEzsignannotationType `json:"eEzsignannotationType"`
	// The X coordinate (Horizontal) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
	IEzsignannotationX int32 `json:"iEzsignannotationX"`
	// The Y coordinate (Vertical) where to put the Ezsignannotation on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignannotation 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
	IEzsignannotationY int32 `json:"iEzsignannotationY"`
	// The Width of the Ezsignannotation.  Width is calculated at 100dpi (dot per inch). So for example, if you want to have the width of the Ezsignannotation to be 3 inches, you would use \"300\" for the Width.
	IEzsignannotationWidth *int32 `json:"iEzsignannotationWidth,omitempty"`
	// The Height of the Ezsignannotation.  Height is calculated at 100dpi (dot per inch). So for example, if you want to have the height of the Ezsignannotation to be 2 inches, you would use \"200\" for the Height.  This can only be set if eEzsignannotationType is **StrikethroughBlock** or **Text**
	IEzsignannotationHeight *int32 `json:"iEzsignannotationHeight,omitempty"`
	// The Text of the Ezsignannotation
	SEzsignannotationText *string `json:"sEzsignannotationText,omitempty"`
	// The page number in the Ezsigndocument
	IEzsignpagePagenumber int32 `json:"iEzsignpagePagenumber"`
	ObjTextstylestatic *TextstylestaticRequestCompound `json:"objTextstylestatic,omitempty"`
}

type _EzsignannotationRequestCompound EzsignannotationRequestCompound

// NewEzsignannotationRequestCompound instantiates a new EzsignannotationRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignannotationRequestCompound(fkiEzsigndocumentID int32, eEzsignannotationType FieldEEzsignannotationType, iEzsignannotationX int32, iEzsignannotationY int32, iEzsignpagePagenumber int32) *EzsignannotationRequestCompound {
	this := EzsignannotationRequestCompound{}
	this.FkiEzsigndocumentID = fkiEzsigndocumentID
	this.EEzsignannotationType = eEzsignannotationType
	this.IEzsignannotationX = iEzsignannotationX
	this.IEzsignannotationY = iEzsignannotationY
	this.IEzsignpagePagenumber = iEzsignpagePagenumber
	return &this
}

// NewEzsignannotationRequestCompoundWithDefaults instantiates a new EzsignannotationRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignannotationRequestCompoundWithDefaults() *EzsignannotationRequestCompound {
	this := EzsignannotationRequestCompound{}
	return &this
}

// GetPkiEzsignannotationID returns the PkiEzsignannotationID field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetPkiEzsignannotationID() int32 {
	if o == nil || IsNil(o.PkiEzsignannotationID) {
		var ret int32
		return ret
	}
	return *o.PkiEzsignannotationID
}

// GetPkiEzsignannotationIDOk returns a tuple with the PkiEzsignannotationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetPkiEzsignannotationIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiEzsignannotationID) {
		return nil, false
	}
	return o.PkiEzsignannotationID, true
}

// HasPkiEzsignannotationID returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasPkiEzsignannotationID() bool {
	if o != nil && !IsNil(o.PkiEzsignannotationID) {
		return true
	}

	return false
}

// SetPkiEzsignannotationID gets a reference to the given int32 and assigns it to the PkiEzsignannotationID field.
func (o *EzsignannotationRequestCompound) SetPkiEzsignannotationID(v int32) {
	o.PkiEzsignannotationID = &v
}

// GetFkiEzsigndocumentID returns the FkiEzsigndocumentID field value
func (o *EzsignannotationRequestCompound) GetFkiEzsigndocumentID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzsigndocumentID
}

// GetFkiEzsigndocumentIDOk returns a tuple with the FkiEzsigndocumentID field value
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetFkiEzsigndocumentIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzsigndocumentID, true
}

// SetFkiEzsigndocumentID sets field value
func (o *EzsignannotationRequestCompound) SetFkiEzsigndocumentID(v int32) {
	o.FkiEzsigndocumentID = v
}

// GetEEzsignannotationHorizontalalignment returns the EEzsignannotationHorizontalalignment field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetEEzsignannotationHorizontalalignment() EnumHorizontalalignment {
	if o == nil || IsNil(o.EEzsignannotationHorizontalalignment) {
		var ret EnumHorizontalalignment
		return ret
	}
	return *o.EEzsignannotationHorizontalalignment
}

// GetEEzsignannotationHorizontalalignmentOk returns a tuple with the EEzsignannotationHorizontalalignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetEEzsignannotationHorizontalalignmentOk() (*EnumHorizontalalignment, bool) {
	if o == nil || IsNil(o.EEzsignannotationHorizontalalignment) {
		return nil, false
	}
	return o.EEzsignannotationHorizontalalignment, true
}

// HasEEzsignannotationHorizontalalignment returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasEEzsignannotationHorizontalalignment() bool {
	if o != nil && !IsNil(o.EEzsignannotationHorizontalalignment) {
		return true
	}

	return false
}

// SetEEzsignannotationHorizontalalignment gets a reference to the given EnumHorizontalalignment and assigns it to the EEzsignannotationHorizontalalignment field.
func (o *EzsignannotationRequestCompound) SetEEzsignannotationHorizontalalignment(v EnumHorizontalalignment) {
	o.EEzsignannotationHorizontalalignment = &v
}

// GetEEzsignannotationVerticalalignment returns the EEzsignannotationVerticalalignment field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetEEzsignannotationVerticalalignment() EnumVerticalalignment {
	if o == nil || IsNil(o.EEzsignannotationVerticalalignment) {
		var ret EnumVerticalalignment
		return ret
	}
	return *o.EEzsignannotationVerticalalignment
}

// GetEEzsignannotationVerticalalignmentOk returns a tuple with the EEzsignannotationVerticalalignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetEEzsignannotationVerticalalignmentOk() (*EnumVerticalalignment, bool) {
	if o == nil || IsNil(o.EEzsignannotationVerticalalignment) {
		return nil, false
	}
	return o.EEzsignannotationVerticalalignment, true
}

// HasEEzsignannotationVerticalalignment returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasEEzsignannotationVerticalalignment() bool {
	if o != nil && !IsNil(o.EEzsignannotationVerticalalignment) {
		return true
	}

	return false
}

// SetEEzsignannotationVerticalalignment gets a reference to the given EnumVerticalalignment and assigns it to the EEzsignannotationVerticalalignment field.
func (o *EzsignannotationRequestCompound) SetEEzsignannotationVerticalalignment(v EnumVerticalalignment) {
	o.EEzsignannotationVerticalalignment = &v
}

// GetEEzsignannotationType returns the EEzsignannotationType field value
func (o *EzsignannotationRequestCompound) GetEEzsignannotationType() FieldEEzsignannotationType {
	if o == nil {
		var ret FieldEEzsignannotationType
		return ret
	}

	return o.EEzsignannotationType
}

// GetEEzsignannotationTypeOk returns a tuple with the EEzsignannotationType field value
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetEEzsignannotationTypeOk() (*FieldEEzsignannotationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EEzsignannotationType, true
}

// SetEEzsignannotationType sets field value
func (o *EzsignannotationRequestCompound) SetEEzsignannotationType(v FieldEEzsignannotationType) {
	o.EEzsignannotationType = v
}

// GetIEzsignannotationX returns the IEzsignannotationX field value
func (o *EzsignannotationRequestCompound) GetIEzsignannotationX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignannotationX
}

// GetIEzsignannotationXOk returns a tuple with the IEzsignannotationX field value
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignannotationX, true
}

// SetIEzsignannotationX sets field value
func (o *EzsignannotationRequestCompound) SetIEzsignannotationX(v int32) {
	o.IEzsignannotationX = v
}

// GetIEzsignannotationY returns the IEzsignannotationY field value
func (o *EzsignannotationRequestCompound) GetIEzsignannotationY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignannotationY
}

// GetIEzsignannotationYOk returns a tuple with the IEzsignannotationY field value
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignannotationY, true
}

// SetIEzsignannotationY sets field value
func (o *EzsignannotationRequestCompound) SetIEzsignannotationY(v int32) {
	o.IEzsignannotationY = v
}

// GetIEzsignannotationWidth returns the IEzsignannotationWidth field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationWidth() int32 {
	if o == nil || IsNil(o.IEzsignannotationWidth) {
		var ret int32
		return ret
	}
	return *o.IEzsignannotationWidth
}

// GetIEzsignannotationWidthOk returns a tuple with the IEzsignannotationWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignannotationWidth) {
		return nil, false
	}
	return o.IEzsignannotationWidth, true
}

// HasIEzsignannotationWidth returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasIEzsignannotationWidth() bool {
	if o != nil && !IsNil(o.IEzsignannotationWidth) {
		return true
	}

	return false
}

// SetIEzsignannotationWidth gets a reference to the given int32 and assigns it to the IEzsignannotationWidth field.
func (o *EzsignannotationRequestCompound) SetIEzsignannotationWidth(v int32) {
	o.IEzsignannotationWidth = &v
}

// GetIEzsignannotationHeight returns the IEzsignannotationHeight field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationHeight() int32 {
	if o == nil || IsNil(o.IEzsignannotationHeight) {
		var ret int32
		return ret
	}
	return *o.IEzsignannotationHeight
}

// GetIEzsignannotationHeightOk returns a tuple with the IEzsignannotationHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetIEzsignannotationHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignannotationHeight) {
		return nil, false
	}
	return o.IEzsignannotationHeight, true
}

// HasIEzsignannotationHeight returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasIEzsignannotationHeight() bool {
	if o != nil && !IsNil(o.IEzsignannotationHeight) {
		return true
	}

	return false
}

// SetIEzsignannotationHeight gets a reference to the given int32 and assigns it to the IEzsignannotationHeight field.
func (o *EzsignannotationRequestCompound) SetIEzsignannotationHeight(v int32) {
	o.IEzsignannotationHeight = &v
}

// GetSEzsignannotationText returns the SEzsignannotationText field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetSEzsignannotationText() string {
	if o == nil || IsNil(o.SEzsignannotationText) {
		var ret string
		return ret
	}
	return *o.SEzsignannotationText
}

// GetSEzsignannotationTextOk returns a tuple with the SEzsignannotationText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetSEzsignannotationTextOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignannotationText) {
		return nil, false
	}
	return o.SEzsignannotationText, true
}

// HasSEzsignannotationText returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasSEzsignannotationText() bool {
	if o != nil && !IsNil(o.SEzsignannotationText) {
		return true
	}

	return false
}

// SetSEzsignannotationText gets a reference to the given string and assigns it to the SEzsignannotationText field.
func (o *EzsignannotationRequestCompound) SetSEzsignannotationText(v string) {
	o.SEzsignannotationText = &v
}

// GetIEzsignpagePagenumber returns the IEzsignpagePagenumber field value
func (o *EzsignannotationRequestCompound) GetIEzsignpagePagenumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignpagePagenumber
}

// GetIEzsignpagePagenumberOk returns a tuple with the IEzsignpagePagenumber field value
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetIEzsignpagePagenumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignpagePagenumber, true
}

// SetIEzsignpagePagenumber sets field value
func (o *EzsignannotationRequestCompound) SetIEzsignpagePagenumber(v int32) {
	o.IEzsignpagePagenumber = v
}

// GetObjTextstylestatic returns the ObjTextstylestatic field value if set, zero value otherwise.
func (o *EzsignannotationRequestCompound) GetObjTextstylestatic() TextstylestaticRequestCompound {
	if o == nil || IsNil(o.ObjTextstylestatic) {
		var ret TextstylestaticRequestCompound
		return ret
	}
	return *o.ObjTextstylestatic
}

// GetObjTextstylestaticOk returns a tuple with the ObjTextstylestatic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignannotationRequestCompound) GetObjTextstylestaticOk() (*TextstylestaticRequestCompound, bool) {
	if o == nil || IsNil(o.ObjTextstylestatic) {
		return nil, false
	}
	return o.ObjTextstylestatic, true
}

// HasObjTextstylestatic returns a boolean if a field has been set.
func (o *EzsignannotationRequestCompound) HasObjTextstylestatic() bool {
	if o != nil && !IsNil(o.ObjTextstylestatic) {
		return true
	}

	return false
}

// SetObjTextstylestatic gets a reference to the given TextstylestaticRequestCompound and assigns it to the ObjTextstylestatic field.
func (o *EzsignannotationRequestCompound) SetObjTextstylestatic(v TextstylestaticRequestCompound) {
	o.ObjTextstylestatic = &v
}

func (o EzsignannotationRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignannotationRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiEzsignannotationID) {
		toSerialize["pkiEzsignannotationID"] = o.PkiEzsignannotationID
	}
	toSerialize["fkiEzsigndocumentID"] = o.FkiEzsigndocumentID
	if !IsNil(o.EEzsignannotationHorizontalalignment) {
		toSerialize["eEzsignannotationHorizontalalignment"] = o.EEzsignannotationHorizontalalignment
	}
	if !IsNil(o.EEzsignannotationVerticalalignment) {
		toSerialize["eEzsignannotationVerticalalignment"] = o.EEzsignannotationVerticalalignment
	}
	toSerialize["eEzsignannotationType"] = o.EEzsignannotationType
	toSerialize["iEzsignannotationX"] = o.IEzsignannotationX
	toSerialize["iEzsignannotationY"] = o.IEzsignannotationY
	if !IsNil(o.IEzsignannotationWidth) {
		toSerialize["iEzsignannotationWidth"] = o.IEzsignannotationWidth
	}
	if !IsNil(o.IEzsignannotationHeight) {
		toSerialize["iEzsignannotationHeight"] = o.IEzsignannotationHeight
	}
	if !IsNil(o.SEzsignannotationText) {
		toSerialize["sEzsignannotationText"] = o.SEzsignannotationText
	}
	toSerialize["iEzsignpagePagenumber"] = o.IEzsignpagePagenumber
	if !IsNil(o.ObjTextstylestatic) {
		toSerialize["objTextstylestatic"] = o.ObjTextstylestatic
	}
	return toSerialize, nil
}

func (o *EzsignannotationRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiEzsigndocumentID",
		"eEzsignannotationType",
		"iEzsignannotationX",
		"iEzsignannotationY",
		"iEzsignpagePagenumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignannotationRequestCompound := _EzsignannotationRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignannotationRequestCompound)

	if err != nil {
		return err
	}

	*o = EzsignannotationRequestCompound(varEzsignannotationRequestCompound)

	return err
}

type NullableEzsignannotationRequestCompound struct {
	value *EzsignannotationRequestCompound
	isSet bool
}

func (v NullableEzsignannotationRequestCompound) Get() *EzsignannotationRequestCompound {
	return v.value
}

func (v *NullableEzsignannotationRequestCompound) Set(val *EzsignannotationRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignannotationRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignannotationRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignannotationRequestCompound(val *EzsignannotationRequestCompound) *NullableEzsignannotationRequestCompound {
	return &NullableEzsignannotationRequestCompound{value: val, isSet: true}
}

func (v NullableEzsignannotationRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignannotationRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


