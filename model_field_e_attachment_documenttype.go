/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEAttachmentDocumenttype The documenttype of the Attachment
type FieldEAttachmentDocumenttype string

// List of Field-eAttachmentDocumenttype
const (
	ADJUSTMENT FieldEAttachmentDocumenttype = "Adjustment"
	AGENT FieldEAttachmentDocumenttype = "Agent"
	BANKACCOUNT FieldEAttachmentDocumenttype = "Bankaccount"
	BROKER FieldEAttachmentDocumenttype = "Broker"
	BUYERCONTRACT FieldEAttachmentDocumenttype = "Buyercontract"
	COMMISSIONADVANCE FieldEAttachmentDocumenttype = "Commissionadvance"
	COMMUNICATION FieldEAttachmentDocumenttype = "Communication"
	CUSTOMER FieldEAttachmentDocumenttype = "Customer"
	CUSTOMERTEMPLATE FieldEAttachmentDocumenttype = "Customertemplate"
	DEPOSIT FieldEAttachmentDocumenttype = "Deposit"
	DEPOSITTRANSITCHEQUE FieldEAttachmentDocumenttype = "Deposittransitcheque"
	DISCLOSURE FieldEAttachmentDocumenttype = "Disclosure"
	ELECTRONICFUNDSTRANSFER FieldEAttachmentDocumenttype = "Electronicfundstransfer"
	EMPLOYEE FieldEAttachmentDocumenttype = "Employee"
	EXTERNALBROKER FieldEAttachmentDocumenttype = "Externalbroker"
	EZCOMADVANCESERVER FieldEAttachmentDocumenttype = "Ezcomadvanceserver"
	EZCOMCOMPANY FieldEAttachmentDocumenttype = "Ezcomcompany"
	EZSIGNDOCUMENT FieldEAttachmentDocumenttype = "Ezsigndocument"
	EZSIGNDOCUMENT_PROOF FieldEAttachmentDocumenttype = "EzsigndocumentProof"
	EZSIGNDOCUMENT_PROOFDOCUMENT FieldEAttachmentDocumenttype = "EzsigndocumentProofdocument"
	EZSIGNDOCUMENTGROUP FieldEAttachmentDocumenttype = "Ezsigndocumentgroup"
	EZSIGNDOCUMENTGROUP_PROOF FieldEAttachmentDocumenttype = "EzsigndocumentgroupProof"
	EZSIGNDOCUMENTGROUP_PROOFDOCUMENT FieldEAttachmentDocumenttype = "EzsigndocumentgroupProofdocument"
	EZSIGNDOCUMENT_ATTACHMENT FieldEAttachmentDocumenttype = "EzsigndocumentAttachment"
	FOLDER FieldEAttachmentDocumenttype = "Folder"
	FRANCHISEAGENCE FieldEAttachmentDocumenttype = "Franchiseagence"
	FRANCHISEBROKER FieldEAttachmentDocumenttype = "Franchisebroker"
	FRANCHISECOMPLAINT FieldEAttachmentDocumenttype = "Franchisecomplaint"
	FRANCHISEFRANCHISE FieldEAttachmentDocumenttype = "Franchisefranchise"
	FRANCHISEOFFICE FieldEAttachmentDocumenttype = "Franchiseoffice"
	GHACQCONTRACT FieldEAttachmentDocumenttype = "Ghacqcontract"
	INSCRIPTION FieldEAttachmentDocumenttype = "Inscription"
	INSCRIPTIONNOTAUTHENTICATED FieldEAttachmentDocumenttype = "Inscriptionnotauthenticated"
	INSCRIPTIONTEMP FieldEAttachmentDocumenttype = "Inscriptiontemp"
	INVOICE FieldEAttachmentDocumenttype = "Invoice"
	LEAD FieldEAttachmentDocumenttype = "Lead"
	MARKETINGFOLLOW FieldEAttachmentDocumenttype = "Marketingfollow"
	MARKETINGPROGRAM FieldEAttachmentDocumenttype = "Marketingprogram"
	NOTARY FieldEAttachmentDocumenttype = "Notary"
	OFFICETAXREPORT FieldEAttachmentDocumenttype = "Officetaxreport"
	OTHERINCOME FieldEAttachmentDocumenttype = "Otherincome"
	PAYMENTPREPARATION FieldEAttachmentDocumenttype = "Paymentpreparation"
	PURCHASE FieldEAttachmentDocumenttype = "Purchase"
	RECONCILIATION FieldEAttachmentDocumenttype = "Reconciliation"
	REJECTEDOFFERTOPURCHASE FieldEAttachmentDocumenttype = "Rejectedoffertopurchase"
	SALARY FieldEAttachmentDocumenttype = "Salary"
	SUPPLIER FieldEAttachmentDocumenttype = "Supplier"
	TEMPLATE FieldEAttachmentDocumenttype = "Template"
	TRANQCONTRACT FieldEAttachmentDocumenttype = "Tranqcontract"
)

// All allowed values of FieldEAttachmentDocumenttype enum
var AllowedFieldEAttachmentDocumenttypeEnumValues = []FieldEAttachmentDocumenttype{
	"Adjustment",
	"Agent",
	"Bankaccount",
	"Broker",
	"Buyercontract",
	"Commissionadvance",
	"Communication",
	"Customer",
	"Customertemplate",
	"Deposit",
	"Deposittransitcheque",
	"Disclosure",
	"Electronicfundstransfer",
	"Employee",
	"Externalbroker",
	"Ezcomadvanceserver",
	"Ezcomcompany",
	"Ezsigndocument",
	"EzsigndocumentProof",
	"EzsigndocumentProofdocument",
	"Ezsigndocumentgroup",
	"EzsigndocumentgroupProof",
	"EzsigndocumentgroupProofdocument",
	"EzsigndocumentAttachment",
	"Folder",
	"Franchiseagence",
	"Franchisebroker",
	"Franchisecomplaint",
	"Franchisefranchise",
	"Franchiseoffice",
	"Ghacqcontract",
	"Inscription",
	"Inscriptionnotauthenticated",
	"Inscriptiontemp",
	"Invoice",
	"Lead",
	"Marketingfollow",
	"Marketingprogram",
	"Notary",
	"Officetaxreport",
	"Otherincome",
	"Paymentpreparation",
	"Purchase",
	"Reconciliation",
	"Rejectedoffertopurchase",
	"Salary",
	"Supplier",
	"Template",
	"Tranqcontract",
}

func (v *FieldEAttachmentDocumenttype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEAttachmentDocumenttype(value)
	for _, existing := range AllowedFieldEAttachmentDocumenttypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEAttachmentDocumenttype", value)
}

// NewFieldEAttachmentDocumenttypeFromValue returns a pointer to a valid FieldEAttachmentDocumenttype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEAttachmentDocumenttypeFromValue(v string) (*FieldEAttachmentDocumenttype, error) {
	ev := FieldEAttachmentDocumenttype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEAttachmentDocumenttype: valid values are %v", v, AllowedFieldEAttachmentDocumenttypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEAttachmentDocumenttype) IsValid() bool {
	for _, existing := range AllowedFieldEAttachmentDocumenttypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eAttachmentDocumenttype value
func (v FieldEAttachmentDocumenttype) Ptr() *FieldEAttachmentDocumenttype {
	return &v
}

type NullableFieldEAttachmentDocumenttype struct {
	value *FieldEAttachmentDocumenttype
	isSet bool
}

func (v NullableFieldEAttachmentDocumenttype) Get() *FieldEAttachmentDocumenttype {
	return v.value
}

func (v *NullableFieldEAttachmentDocumenttype) Set(val *FieldEAttachmentDocumenttype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEAttachmentDocumenttype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEAttachmentDocumenttype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEAttachmentDocumenttype(val *FieldEAttachmentDocumenttype) *NullableFieldEAttachmentDocumenttype {
	return &NullableFieldEAttachmentDocumenttype{value: val, isSet: true}
}

func (v NullableFieldEAttachmentDocumenttype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEAttachmentDocumenttype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

