/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TextstylestaticRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextstylestaticRequest{}

// TextstylestaticRequest A Textstylestatic Object
type TextstylestaticRequest struct {
	// The unique ID of the Font
	FkiFontID int32 `json:"fkiFontID"`
	// Whether the Textstylestatic is Bold or not
	BTextstylestaticBold bool `json:"bTextstylestaticBold"`
	// Whether the Textstylestatic is Underline or not
	BTextstylestaticUnderline bool `json:"bTextstylestaticUnderline"`
	// Whether the Textstylestatic is Italic or not
	BTextstylestaticItalic bool `json:"bTextstylestaticItalic"`
	// Whether the Textstylestatic is Strikethrough or not
	BTextstylestaticStrikethrough bool `json:"bTextstylestaticStrikethrough"`
	// The int32 representation of the Fontcolor. For example, RGB color #39435B would be 3752795
	ITextstylestaticFontcolor int32 `json:"iTextstylestaticFontcolor"`
	// The Size for the Font of the Textstylestatic
	ITextstylestaticSize int32 `json:"iTextstylestaticSize"`
}

type _TextstylestaticRequest TextstylestaticRequest

// NewTextstylestaticRequest instantiates a new TextstylestaticRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextstylestaticRequest(fkiFontID int32, bTextstylestaticBold bool, bTextstylestaticUnderline bool, bTextstylestaticItalic bool, bTextstylestaticStrikethrough bool, iTextstylestaticFontcolor int32, iTextstylestaticSize int32) *TextstylestaticRequest {
	this := TextstylestaticRequest{}
	this.FkiFontID = fkiFontID
	this.BTextstylestaticBold = bTextstylestaticBold
	this.BTextstylestaticUnderline = bTextstylestaticUnderline
	this.BTextstylestaticItalic = bTextstylestaticItalic
	this.BTextstylestaticStrikethrough = bTextstylestaticStrikethrough
	this.ITextstylestaticFontcolor = iTextstylestaticFontcolor
	this.ITextstylestaticSize = iTextstylestaticSize
	return &this
}

// NewTextstylestaticRequestWithDefaults instantiates a new TextstylestaticRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextstylestaticRequestWithDefaults() *TextstylestaticRequest {
	this := TextstylestaticRequest{}
	return &this
}

// GetFkiFontID returns the FkiFontID field value
func (o *TextstylestaticRequest) GetFkiFontID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiFontID
}

// GetFkiFontIDOk returns a tuple with the FkiFontID field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetFkiFontIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiFontID, true
}

// SetFkiFontID sets field value
func (o *TextstylestaticRequest) SetFkiFontID(v int32) {
	o.FkiFontID = v
}

// GetBTextstylestaticBold returns the BTextstylestaticBold field value
func (o *TextstylestaticRequest) GetBTextstylestaticBold() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BTextstylestaticBold
}

// GetBTextstylestaticBoldOk returns a tuple with the BTextstylestaticBold field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetBTextstylestaticBoldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BTextstylestaticBold, true
}

// SetBTextstylestaticBold sets field value
func (o *TextstylestaticRequest) SetBTextstylestaticBold(v bool) {
	o.BTextstylestaticBold = v
}

// GetBTextstylestaticUnderline returns the BTextstylestaticUnderline field value
func (o *TextstylestaticRequest) GetBTextstylestaticUnderline() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BTextstylestaticUnderline
}

// GetBTextstylestaticUnderlineOk returns a tuple with the BTextstylestaticUnderline field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetBTextstylestaticUnderlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BTextstylestaticUnderline, true
}

// SetBTextstylestaticUnderline sets field value
func (o *TextstylestaticRequest) SetBTextstylestaticUnderline(v bool) {
	o.BTextstylestaticUnderline = v
}

// GetBTextstylestaticItalic returns the BTextstylestaticItalic field value
func (o *TextstylestaticRequest) GetBTextstylestaticItalic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BTextstylestaticItalic
}

// GetBTextstylestaticItalicOk returns a tuple with the BTextstylestaticItalic field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetBTextstylestaticItalicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BTextstylestaticItalic, true
}

// SetBTextstylestaticItalic sets field value
func (o *TextstylestaticRequest) SetBTextstylestaticItalic(v bool) {
	o.BTextstylestaticItalic = v
}

// GetBTextstylestaticStrikethrough returns the BTextstylestaticStrikethrough field value
func (o *TextstylestaticRequest) GetBTextstylestaticStrikethrough() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BTextstylestaticStrikethrough
}

// GetBTextstylestaticStrikethroughOk returns a tuple with the BTextstylestaticStrikethrough field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetBTextstylestaticStrikethroughOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BTextstylestaticStrikethrough, true
}

// SetBTextstylestaticStrikethrough sets field value
func (o *TextstylestaticRequest) SetBTextstylestaticStrikethrough(v bool) {
	o.BTextstylestaticStrikethrough = v
}

// GetITextstylestaticFontcolor returns the ITextstylestaticFontcolor field value
func (o *TextstylestaticRequest) GetITextstylestaticFontcolor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ITextstylestaticFontcolor
}

// GetITextstylestaticFontcolorOk returns a tuple with the ITextstylestaticFontcolor field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetITextstylestaticFontcolorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ITextstylestaticFontcolor, true
}

// SetITextstylestaticFontcolor sets field value
func (o *TextstylestaticRequest) SetITextstylestaticFontcolor(v int32) {
	o.ITextstylestaticFontcolor = v
}

// GetITextstylestaticSize returns the ITextstylestaticSize field value
func (o *TextstylestaticRequest) GetITextstylestaticSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ITextstylestaticSize
}

// GetITextstylestaticSizeOk returns a tuple with the ITextstylestaticSize field value
// and a boolean to check if the value has been set.
func (o *TextstylestaticRequest) GetITextstylestaticSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ITextstylestaticSize, true
}

// SetITextstylestaticSize sets field value
func (o *TextstylestaticRequest) SetITextstylestaticSize(v int32) {
	o.ITextstylestaticSize = v
}

func (o TextstylestaticRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextstylestaticRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fkiFontID"] = o.FkiFontID
	toSerialize["bTextstylestaticBold"] = o.BTextstylestaticBold
	toSerialize["bTextstylestaticUnderline"] = o.BTextstylestaticUnderline
	toSerialize["bTextstylestaticItalic"] = o.BTextstylestaticItalic
	toSerialize["bTextstylestaticStrikethrough"] = o.BTextstylestaticStrikethrough
	toSerialize["iTextstylestaticFontcolor"] = o.ITextstylestaticFontcolor
	toSerialize["iTextstylestaticSize"] = o.ITextstylestaticSize
	return toSerialize, nil
}

func (o *TextstylestaticRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiFontID",
		"bTextstylestaticBold",
		"bTextstylestaticUnderline",
		"bTextstylestaticItalic",
		"bTextstylestaticStrikethrough",
		"iTextstylestaticFontcolor",
		"iTextstylestaticSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTextstylestaticRequest := _TextstylestaticRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTextstylestaticRequest)

	if err != nil {
		return err
	}

	*o = TextstylestaticRequest(varTextstylestaticRequest)

	return err
}

type NullableTextstylestaticRequest struct {
	value *TextstylestaticRequest
	isSet bool
}

func (v NullableTextstylestaticRequest) Get() *TextstylestaticRequest {
	return v.value
}

func (v *NullableTextstylestaticRequest) Set(val *TextstylestaticRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTextstylestaticRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTextstylestaticRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextstylestaticRequest(val *TextstylestaticRequest) *NullableTextstylestaticRequest {
	return &NullableTextstylestaticRequest{value: val, isSet: true}
}

func (v NullableTextstylestaticRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextstylestaticRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


