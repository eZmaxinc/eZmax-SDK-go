/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonFile{}

// CommonFile Object representing a file used in a request or response context 
type CommonFile struct {
	// The name of the file
	SFileName string `json:"sFileName"`
	// The URL used to reach the File
	SFileUrl *string `json:"sFileUrl,omitempty"`
	// The Base64 encoded binary content of the File
	SFileBase64 *string `json:"sFileBase64,omitempty"`
	// The source of the File
	EFileSource string `json:"eFileSource"`
}

type _CommonFile CommonFile

// NewCommonFile instantiates a new CommonFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonFile(sFileName string, eFileSource string) *CommonFile {
	this := CommonFile{}
	this.SFileName = sFileName
	this.EFileSource = eFileSource
	return &this
}

// NewCommonFileWithDefaults instantiates a new CommonFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonFileWithDefaults() *CommonFile {
	this := CommonFile{}
	return &this
}

// GetSFileName returns the SFileName field value
func (o *CommonFile) GetSFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SFileName
}

// GetSFileNameOk returns a tuple with the SFileName field value
// and a boolean to check if the value has been set.
func (o *CommonFile) GetSFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SFileName, true
}

// SetSFileName sets field value
func (o *CommonFile) SetSFileName(v string) {
	o.SFileName = v
}

// GetSFileUrl returns the SFileUrl field value if set, zero value otherwise.
func (o *CommonFile) GetSFileUrl() string {
	if o == nil || IsNil(o.SFileUrl) {
		var ret string
		return ret
	}
	return *o.SFileUrl
}

// GetSFileUrlOk returns a tuple with the SFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonFile) GetSFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SFileUrl) {
		return nil, false
	}
	return o.SFileUrl, true
}

// HasSFileUrl returns a boolean if a field has been set.
func (o *CommonFile) HasSFileUrl() bool {
	if o != nil && !IsNil(o.SFileUrl) {
		return true
	}

	return false
}

// SetSFileUrl gets a reference to the given string and assigns it to the SFileUrl field.
func (o *CommonFile) SetSFileUrl(v string) {
	o.SFileUrl = &v
}

// GetSFileBase64 returns the SFileBase64 field value if set, zero value otherwise.
func (o *CommonFile) GetSFileBase64() string {
	if o == nil || IsNil(o.SFileBase64) {
		var ret string
		return ret
	}
	return *o.SFileBase64
}

// GetSFileBase64Ok returns a tuple with the SFileBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonFile) GetSFileBase64Ok() (*string, bool) {
	if o == nil || IsNil(o.SFileBase64) {
		return nil, false
	}
	return o.SFileBase64, true
}

// HasSFileBase64 returns a boolean if a field has been set.
func (o *CommonFile) HasSFileBase64() bool {
	if o != nil && !IsNil(o.SFileBase64) {
		return true
	}

	return false
}

// SetSFileBase64 gets a reference to the given string and assigns it to the SFileBase64 field.
func (o *CommonFile) SetSFileBase64(v string) {
	o.SFileBase64 = &v
}

// GetEFileSource returns the EFileSource field value
func (o *CommonFile) GetEFileSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EFileSource
}

// GetEFileSourceOk returns a tuple with the EFileSource field value
// and a boolean to check if the value has been set.
func (o *CommonFile) GetEFileSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EFileSource, true
}

// SetEFileSource sets field value
func (o *CommonFile) SetEFileSource(v string) {
	o.EFileSource = v
}

func (o CommonFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sFileName"] = o.SFileName
	if !IsNil(o.SFileUrl) {
		toSerialize["sFileUrl"] = o.SFileUrl
	}
	if !IsNil(o.SFileBase64) {
		toSerialize["sFileBase64"] = o.SFileBase64
	}
	toSerialize["eFileSource"] = o.EFileSource
	return toSerialize, nil
}

func (o *CommonFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sFileName",
		"eFileSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonFile := _CommonFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonFile)

	if err != nil {
		return err
	}

	*o = CommonFile(varCommonFile)

	return err
}

type NullableCommonFile struct {
	value *CommonFile
	isSet bool
}

func (v NullableCommonFile) Get() *CommonFile {
	return v.value
}

func (v *NullableCommonFile) Set(val *CommonFile) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonFile) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonFile(val *CommonFile) *NullableCommonFile {
	return &NullableCommonFile{value: val, isSet: true}
}

func (v NullableCommonFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


