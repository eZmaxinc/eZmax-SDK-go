/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsigntemplatepackageGetAutocompleteV2ResponseMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsigntemplatepackageGetAutocompleteV2ResponseMPayload{}

// EzsigntemplatepackageGetAutocompleteV2ResponseMPayload Payload for POST /2/object/ezsigntemplatepackage/getAutocomplete
type EzsigntemplatepackageGetAutocompleteV2ResponseMPayload struct {
	// An array of Ezsigntemplatepackage autocomplete element response.
	AObjEzsigntemplatepackage []EzsigntemplatepackageAutocompleteElementResponse `json:"a_objEzsigntemplatepackage"`
}

type _EzsigntemplatepackageGetAutocompleteV2ResponseMPayload EzsigntemplatepackageGetAutocompleteV2ResponseMPayload

// NewEzsigntemplatepackageGetAutocompleteV2ResponseMPayload instantiates a new EzsigntemplatepackageGetAutocompleteV2ResponseMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigntemplatepackageGetAutocompleteV2ResponseMPayload(aObjEzsigntemplatepackage []EzsigntemplatepackageAutocompleteElementResponse) *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload {
	this := EzsigntemplatepackageGetAutocompleteV2ResponseMPayload{}
	this.AObjEzsigntemplatepackage = aObjEzsigntemplatepackage
	return &this
}

// NewEzsigntemplatepackageGetAutocompleteV2ResponseMPayloadWithDefaults instantiates a new EzsigntemplatepackageGetAutocompleteV2ResponseMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigntemplatepackageGetAutocompleteV2ResponseMPayloadWithDefaults() *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload {
	this := EzsigntemplatepackageGetAutocompleteV2ResponseMPayload{}
	return &this
}

// GetAObjEzsigntemplatepackage returns the AObjEzsigntemplatepackage field value
func (o *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) GetAObjEzsigntemplatepackage() []EzsigntemplatepackageAutocompleteElementResponse {
	if o == nil {
		var ret []EzsigntemplatepackageAutocompleteElementResponse
		return ret
	}

	return o.AObjEzsigntemplatepackage
}

// GetAObjEzsigntemplatepackageOk returns a tuple with the AObjEzsigntemplatepackage field value
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) GetAObjEzsigntemplatepackageOk() ([]EzsigntemplatepackageAutocompleteElementResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjEzsigntemplatepackage, true
}

// SetAObjEzsigntemplatepackage sets field value
func (o *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) SetAObjEzsigntemplatepackage(v []EzsigntemplatepackageAutocompleteElementResponse) {
	o.AObjEzsigntemplatepackage = v
}

func (o EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["a_objEzsigntemplatepackage"] = o.AObjEzsigntemplatepackage
	return toSerialize, nil
}

func (o *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"a_objEzsigntemplatepackage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsigntemplatepackageGetAutocompleteV2ResponseMPayload := _EzsigntemplatepackageGetAutocompleteV2ResponseMPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsigntemplatepackageGetAutocompleteV2ResponseMPayload)

	if err != nil {
		return err
	}

	*o = EzsigntemplatepackageGetAutocompleteV2ResponseMPayload(varEzsigntemplatepackageGetAutocompleteV2ResponseMPayload)

	return err
}

type NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload struct {
	value *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload
	isSet bool
}

func (v NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) Get() *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload {
	return v.value
}

func (v *NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) Set(val *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload(val *EzsigntemplatepackageGetAutocompleteV2ResponseMPayload) *NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload {
	return &NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload{value: val, isSet: true}
}

func (v NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigntemplatepackageGetAutocompleteV2ResponseMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


