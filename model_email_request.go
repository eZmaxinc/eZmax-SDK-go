/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailRequest{}

// EmailRequest An Email Object
type EmailRequest struct {
	// The unique ID of the Email
	PkiEmailID *int32 `json:"pkiEmailID,omitempty"`
	// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
	FkiEmailtypeID int32 `json:"fkiEmailtypeID"`
	// The email address.
	SEmailAddress string `json:"sEmailAddress"`
}

type _EmailRequest EmailRequest

// NewEmailRequest instantiates a new EmailRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailRequest(fkiEmailtypeID int32, sEmailAddress string) *EmailRequest {
	this := EmailRequest{}
	this.FkiEmailtypeID = fkiEmailtypeID
	this.SEmailAddress = sEmailAddress
	return &this
}

// NewEmailRequestWithDefaults instantiates a new EmailRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailRequestWithDefaults() *EmailRequest {
	this := EmailRequest{}
	return &this
}

// GetPkiEmailID returns the PkiEmailID field value if set, zero value otherwise.
func (o *EmailRequest) GetPkiEmailID() int32 {
	if o == nil || IsNil(o.PkiEmailID) {
		var ret int32
		return ret
	}
	return *o.PkiEmailID
}

// GetPkiEmailIDOk returns a tuple with the PkiEmailID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetPkiEmailIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiEmailID) {
		return nil, false
	}
	return o.PkiEmailID, true
}

// HasPkiEmailID returns a boolean if a field has been set.
func (o *EmailRequest) HasPkiEmailID() bool {
	if o != nil && !IsNil(o.PkiEmailID) {
		return true
	}

	return false
}

// SetPkiEmailID gets a reference to the given int32 and assigns it to the PkiEmailID field.
func (o *EmailRequest) SetPkiEmailID(v int32) {
	o.PkiEmailID = &v
}

// GetFkiEmailtypeID returns the FkiEmailtypeID field value
func (o *EmailRequest) GetFkiEmailtypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEmailtypeID
}

// GetFkiEmailtypeIDOk returns a tuple with the FkiEmailtypeID field value
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetFkiEmailtypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEmailtypeID, true
}

// SetFkiEmailtypeID sets field value
func (o *EmailRequest) SetFkiEmailtypeID(v int32) {
	o.FkiEmailtypeID = v
}

// GetSEmailAddress returns the SEmailAddress field value
func (o *EmailRequest) GetSEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEmailAddress
}

// GetSEmailAddressOk returns a tuple with the SEmailAddress field value
// and a boolean to check if the value has been set.
func (o *EmailRequest) GetSEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEmailAddress, true
}

// SetSEmailAddress sets field value
func (o *EmailRequest) SetSEmailAddress(v string) {
	o.SEmailAddress = v
}

func (o EmailRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiEmailID) {
		toSerialize["pkiEmailID"] = o.PkiEmailID
	}
	toSerialize["fkiEmailtypeID"] = o.FkiEmailtypeID
	toSerialize["sEmailAddress"] = o.SEmailAddress
	return toSerialize, nil
}

func (o *EmailRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiEmailtypeID",
		"sEmailAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailRequest := _EmailRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailRequest)

	if err != nil {
		return err
	}

	*o = EmailRequest(varEmailRequest)

	return err
}

type NullableEmailRequest struct {
	value *EmailRequest
	isSet bool
}

func (v NullableEmailRequest) Get() *EmailRequest {
	return v.value
}

func (v *NullableEmailRequest) Set(val *EmailRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailRequest(val *EmailRequest) *NullableEmailRequest {
	return &NullableEmailRequest{value: val, isSet: true}
}

func (v NullableEmailRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


