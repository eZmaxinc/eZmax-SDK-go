/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.4
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// ActivesessionResponseCompoundUser An Activesession->User Object and children to create a complete structure
type ActivesessionResponseCompoundUser struct {
	// The unique ID of the User
	PkiUserID int32 `json:"pkiUserID"`
	// The url of the picture used as avatar
	SAvatarUrl string `json:"sAvatarUrl"`
	// The First name of the user
	SUserFirstname string `json:"sUserFirstname"`
	// The Last name of the user
	SUserLastname string `json:"sUserLastname"`
	// The email address.
	SEmailAddress string `json:"sEmailAddress"`
}

// NewActivesessionResponseCompoundUser instantiates a new ActivesessionResponseCompoundUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivesessionResponseCompoundUser(pkiUserID int32, sAvatarUrl string, sUserFirstname string, sUserLastname string, sEmailAddress string) *ActivesessionResponseCompoundUser {
	this := ActivesessionResponseCompoundUser{}
	this.PkiUserID = pkiUserID
	this.SAvatarUrl = sAvatarUrl
	this.SUserFirstname = sUserFirstname
	this.SUserLastname = sUserLastname
	this.SEmailAddress = sEmailAddress
	return &this
}

// NewActivesessionResponseCompoundUserWithDefaults instantiates a new ActivesessionResponseCompoundUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivesessionResponseCompoundUserWithDefaults() *ActivesessionResponseCompoundUser {
	this := ActivesessionResponseCompoundUser{}
	return &this
}

// GetPkiUserID returns the PkiUserID field value
func (o *ActivesessionResponseCompoundUser) GetPkiUserID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiUserID
}

// GetPkiUserIDOk returns a tuple with the PkiUserID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponseCompoundUser) GetPkiUserIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiUserID, true
}

// SetPkiUserID sets field value
func (o *ActivesessionResponseCompoundUser) SetPkiUserID(v int32) {
	o.PkiUserID = v
}

// GetSAvatarUrl returns the SAvatarUrl field value
func (o *ActivesessionResponseCompoundUser) GetSAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SAvatarUrl
}

// GetSAvatarUrlOk returns a tuple with the SAvatarUrl field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponseCompoundUser) GetSAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SAvatarUrl, true
}

// SetSAvatarUrl sets field value
func (o *ActivesessionResponseCompoundUser) SetSAvatarUrl(v string) {
	o.SAvatarUrl = v
}

// GetSUserFirstname returns the SUserFirstname field value
func (o *ActivesessionResponseCompoundUser) GetSUserFirstname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserFirstname
}

// GetSUserFirstnameOk returns a tuple with the SUserFirstname field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponseCompoundUser) GetSUserFirstnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserFirstname, true
}

// SetSUserFirstname sets field value
func (o *ActivesessionResponseCompoundUser) SetSUserFirstname(v string) {
	o.SUserFirstname = v
}

// GetSUserLastname returns the SUserLastname field value
func (o *ActivesessionResponseCompoundUser) GetSUserLastname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserLastname
}

// GetSUserLastnameOk returns a tuple with the SUserLastname field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponseCompoundUser) GetSUserLastnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserLastname, true
}

// SetSUserLastname sets field value
func (o *ActivesessionResponseCompoundUser) SetSUserLastname(v string) {
	o.SUserLastname = v
}

// GetSEmailAddress returns the SEmailAddress field value
func (o *ActivesessionResponseCompoundUser) GetSEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEmailAddress
}

// GetSEmailAddressOk returns a tuple with the SEmailAddress field value
// and a boolean to check if the value has been set.
func (o *ActivesessionResponseCompoundUser) GetSEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEmailAddress, true
}

// SetSEmailAddress sets field value
func (o *ActivesessionResponseCompoundUser) SetSEmailAddress(v string) {
	o.SEmailAddress = v
}

func (o ActivesessionResponseCompoundUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pkiUserID"] = o.PkiUserID
	}
	if true {
		toSerialize["sAvatarUrl"] = o.SAvatarUrl
	}
	if true {
		toSerialize["sUserFirstname"] = o.SUserFirstname
	}
	if true {
		toSerialize["sUserLastname"] = o.SUserLastname
	}
	if true {
		toSerialize["sEmailAddress"] = o.SEmailAddress
	}
	return json.Marshal(toSerialize)
}

type NullableActivesessionResponseCompoundUser struct {
	value *ActivesessionResponseCompoundUser
	isSet bool
}

func (v NullableActivesessionResponseCompoundUser) Get() *ActivesessionResponseCompoundUser {
	return v.value
}

func (v *NullableActivesessionResponseCompoundUser) Set(val *ActivesessionResponseCompoundUser) {
	v.value = val
	v.isSet = true
}

func (v NullableActivesessionResponseCompoundUser) IsSet() bool {
	return v.isSet
}

func (v *NullableActivesessionResponseCompoundUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivesessionResponseCompoundUser(val *ActivesessionResponseCompoundUser) *NullableActivesessionResponseCompoundUser {
	return &NullableActivesessionResponseCompoundUser{value: val, isSet: true}
}

func (v NullableActivesessionResponseCompoundUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivesessionResponseCompoundUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


