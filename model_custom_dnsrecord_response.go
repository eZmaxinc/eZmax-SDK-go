/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomDnsrecordResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomDnsrecordResponse{}

// CustomDnsrecordResponse A Custom Dnsrecord Object
type CustomDnsrecordResponse struct {
	// The type of the Dnsrecord
	EDnsrecordType string `json:"eDnsrecordType"`
	// The validation of the Dnsrecord
	EDnsrecordValidation string `json:"eDnsrecordValidation"`
	// The name of the Dnsrecord
	SDnsrecordName string `json:"sDnsrecordName"`
	// The value of the Dnsrecord
	SDnsrecordValue *string `json:"sDnsrecordValue,omitempty"`
	// The expected value of the Dnsrecord
	SDnsrecordExpectedvalue *string `json:"sDnsrecordExpectedvalue,omitempty"`
	// Whether the Dnsrecord must match or not
	BDnsrecordMustMatch bool `json:"bDnsrecordMustMatch"`
}

type _CustomDnsrecordResponse CustomDnsrecordResponse

// NewCustomDnsrecordResponse instantiates a new CustomDnsrecordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDnsrecordResponse(eDnsrecordType string, eDnsrecordValidation string, sDnsrecordName string, bDnsrecordMustMatch bool) *CustomDnsrecordResponse {
	this := CustomDnsrecordResponse{}
	this.EDnsrecordType = eDnsrecordType
	this.EDnsrecordValidation = eDnsrecordValidation
	this.SDnsrecordName = sDnsrecordName
	this.BDnsrecordMustMatch = bDnsrecordMustMatch
	return &this
}

// NewCustomDnsrecordResponseWithDefaults instantiates a new CustomDnsrecordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDnsrecordResponseWithDefaults() *CustomDnsrecordResponse {
	this := CustomDnsrecordResponse{}
	return &this
}

// GetEDnsrecordType returns the EDnsrecordType field value
func (o *CustomDnsrecordResponse) GetEDnsrecordType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EDnsrecordType
}

// GetEDnsrecordTypeOk returns a tuple with the EDnsrecordType field value
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetEDnsrecordTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EDnsrecordType, true
}

// SetEDnsrecordType sets field value
func (o *CustomDnsrecordResponse) SetEDnsrecordType(v string) {
	o.EDnsrecordType = v
}

// GetEDnsrecordValidation returns the EDnsrecordValidation field value
func (o *CustomDnsrecordResponse) GetEDnsrecordValidation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EDnsrecordValidation
}

// GetEDnsrecordValidationOk returns a tuple with the EDnsrecordValidation field value
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetEDnsrecordValidationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EDnsrecordValidation, true
}

// SetEDnsrecordValidation sets field value
func (o *CustomDnsrecordResponse) SetEDnsrecordValidation(v string) {
	o.EDnsrecordValidation = v
}

// GetSDnsrecordName returns the SDnsrecordName field value
func (o *CustomDnsrecordResponse) GetSDnsrecordName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDnsrecordName
}

// GetSDnsrecordNameOk returns a tuple with the SDnsrecordName field value
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetSDnsrecordNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDnsrecordName, true
}

// SetSDnsrecordName sets field value
func (o *CustomDnsrecordResponse) SetSDnsrecordName(v string) {
	o.SDnsrecordName = v
}

// GetSDnsrecordValue returns the SDnsrecordValue field value if set, zero value otherwise.
func (o *CustomDnsrecordResponse) GetSDnsrecordValue() string {
	if o == nil || IsNil(o.SDnsrecordValue) {
		var ret string
		return ret
	}
	return *o.SDnsrecordValue
}

// GetSDnsrecordValueOk returns a tuple with the SDnsrecordValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetSDnsrecordValueOk() (*string, bool) {
	if o == nil || IsNil(o.SDnsrecordValue) {
		return nil, false
	}
	return o.SDnsrecordValue, true
}

// HasSDnsrecordValue returns a boolean if a field has been set.
func (o *CustomDnsrecordResponse) HasSDnsrecordValue() bool {
	if o != nil && !IsNil(o.SDnsrecordValue) {
		return true
	}

	return false
}

// SetSDnsrecordValue gets a reference to the given string and assigns it to the SDnsrecordValue field.
func (o *CustomDnsrecordResponse) SetSDnsrecordValue(v string) {
	o.SDnsrecordValue = &v
}

// GetSDnsrecordExpectedvalue returns the SDnsrecordExpectedvalue field value if set, zero value otherwise.
func (o *CustomDnsrecordResponse) GetSDnsrecordExpectedvalue() string {
	if o == nil || IsNil(o.SDnsrecordExpectedvalue) {
		var ret string
		return ret
	}
	return *o.SDnsrecordExpectedvalue
}

// GetSDnsrecordExpectedvalueOk returns a tuple with the SDnsrecordExpectedvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetSDnsrecordExpectedvalueOk() (*string, bool) {
	if o == nil || IsNil(o.SDnsrecordExpectedvalue) {
		return nil, false
	}
	return o.SDnsrecordExpectedvalue, true
}

// HasSDnsrecordExpectedvalue returns a boolean if a field has been set.
func (o *CustomDnsrecordResponse) HasSDnsrecordExpectedvalue() bool {
	if o != nil && !IsNil(o.SDnsrecordExpectedvalue) {
		return true
	}

	return false
}

// SetSDnsrecordExpectedvalue gets a reference to the given string and assigns it to the SDnsrecordExpectedvalue field.
func (o *CustomDnsrecordResponse) SetSDnsrecordExpectedvalue(v string) {
	o.SDnsrecordExpectedvalue = &v
}

// GetBDnsrecordMustMatch returns the BDnsrecordMustMatch field value
func (o *CustomDnsrecordResponse) GetBDnsrecordMustMatch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BDnsrecordMustMatch
}

// GetBDnsrecordMustMatchOk returns a tuple with the BDnsrecordMustMatch field value
// and a boolean to check if the value has been set.
func (o *CustomDnsrecordResponse) GetBDnsrecordMustMatchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BDnsrecordMustMatch, true
}

// SetBDnsrecordMustMatch sets field value
func (o *CustomDnsrecordResponse) SetBDnsrecordMustMatch(v bool) {
	o.BDnsrecordMustMatch = v
}

func (o CustomDnsrecordResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomDnsrecordResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eDnsrecordType"] = o.EDnsrecordType
	toSerialize["eDnsrecordValidation"] = o.EDnsrecordValidation
	toSerialize["sDnsrecordName"] = o.SDnsrecordName
	if !IsNil(o.SDnsrecordValue) {
		toSerialize["sDnsrecordValue"] = o.SDnsrecordValue
	}
	if !IsNil(o.SDnsrecordExpectedvalue) {
		toSerialize["sDnsrecordExpectedvalue"] = o.SDnsrecordExpectedvalue
	}
	toSerialize["bDnsrecordMustMatch"] = o.BDnsrecordMustMatch
	return toSerialize, nil
}

func (o *CustomDnsrecordResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eDnsrecordType",
		"eDnsrecordValidation",
		"sDnsrecordName",
		"bDnsrecordMustMatch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomDnsrecordResponse := _CustomDnsrecordResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomDnsrecordResponse)

	if err != nil {
		return err
	}

	*o = CustomDnsrecordResponse(varCustomDnsrecordResponse)

	return err
}

type NullableCustomDnsrecordResponse struct {
	value *CustomDnsrecordResponse
	isSet bool
}

func (v NullableCustomDnsrecordResponse) Get() *CustomDnsrecordResponse {
	return v.value
}

func (v *NullableCustomDnsrecordResponse) Set(val *CustomDnsrecordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDnsrecordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDnsrecordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDnsrecordResponse(val *CustomDnsrecordResponse) *NullableCustomDnsrecordResponse {
	return &NullableCustomDnsrecordResponse{value: val, isSet: true}
}

func (v NullableCustomDnsrecordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDnsrecordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


