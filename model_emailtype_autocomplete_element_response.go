/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailtypeAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailtypeAutocompleteElementResponse{}

// EmailtypeAutocompleteElementResponse A Emailtype AutocompleteElement Response
type EmailtypeAutocompleteElementResponse struct {
	// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
	PkiEmailtypeID int32 `json:"pkiEmailtypeID"`
	// The name of the Emailtype in the language of the requester
	SEmailtypeNameX string `json:"sEmailtypeNameX" validate:"regexp=^.{0,15}$"`
	// Whether the Emailtype is active or not
	BEmailtypeIsactive bool `json:"bEmailtypeIsactive"`
}

type _EmailtypeAutocompleteElementResponse EmailtypeAutocompleteElementResponse

// NewEmailtypeAutocompleteElementResponse instantiates a new EmailtypeAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailtypeAutocompleteElementResponse(pkiEmailtypeID int32, sEmailtypeNameX string, bEmailtypeIsactive bool) *EmailtypeAutocompleteElementResponse {
	this := EmailtypeAutocompleteElementResponse{}
	this.PkiEmailtypeID = pkiEmailtypeID
	this.SEmailtypeNameX = sEmailtypeNameX
	this.BEmailtypeIsactive = bEmailtypeIsactive
	return &this
}

// NewEmailtypeAutocompleteElementResponseWithDefaults instantiates a new EmailtypeAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailtypeAutocompleteElementResponseWithDefaults() *EmailtypeAutocompleteElementResponse {
	this := EmailtypeAutocompleteElementResponse{}
	return &this
}

// GetPkiEmailtypeID returns the PkiEmailtypeID field value
func (o *EmailtypeAutocompleteElementResponse) GetPkiEmailtypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEmailtypeID
}

// GetPkiEmailtypeIDOk returns a tuple with the PkiEmailtypeID field value
// and a boolean to check if the value has been set.
func (o *EmailtypeAutocompleteElementResponse) GetPkiEmailtypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEmailtypeID, true
}

// SetPkiEmailtypeID sets field value
func (o *EmailtypeAutocompleteElementResponse) SetPkiEmailtypeID(v int32) {
	o.PkiEmailtypeID = v
}

// GetSEmailtypeNameX returns the SEmailtypeNameX field value
func (o *EmailtypeAutocompleteElementResponse) GetSEmailtypeNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEmailtypeNameX
}

// GetSEmailtypeNameXOk returns a tuple with the SEmailtypeNameX field value
// and a boolean to check if the value has been set.
func (o *EmailtypeAutocompleteElementResponse) GetSEmailtypeNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEmailtypeNameX, true
}

// SetSEmailtypeNameX sets field value
func (o *EmailtypeAutocompleteElementResponse) SetSEmailtypeNameX(v string) {
	o.SEmailtypeNameX = v
}

// GetBEmailtypeIsactive returns the BEmailtypeIsactive field value
func (o *EmailtypeAutocompleteElementResponse) GetBEmailtypeIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BEmailtypeIsactive
}

// GetBEmailtypeIsactiveOk returns a tuple with the BEmailtypeIsactive field value
// and a boolean to check if the value has been set.
func (o *EmailtypeAutocompleteElementResponse) GetBEmailtypeIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BEmailtypeIsactive, true
}

// SetBEmailtypeIsactive sets field value
func (o *EmailtypeAutocompleteElementResponse) SetBEmailtypeIsactive(v bool) {
	o.BEmailtypeIsactive = v
}

func (o EmailtypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailtypeAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEmailtypeID"] = o.PkiEmailtypeID
	toSerialize["sEmailtypeNameX"] = o.SEmailtypeNameX
	toSerialize["bEmailtypeIsactive"] = o.BEmailtypeIsactive
	return toSerialize, nil
}

func (o *EmailtypeAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEmailtypeID",
		"sEmailtypeNameX",
		"bEmailtypeIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailtypeAutocompleteElementResponse := _EmailtypeAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailtypeAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = EmailtypeAutocompleteElementResponse(varEmailtypeAutocompleteElementResponse)

	return err
}

type NullableEmailtypeAutocompleteElementResponse struct {
	value *EmailtypeAutocompleteElementResponse
	isSet bool
}

func (v NullableEmailtypeAutocompleteElementResponse) Get() *EmailtypeAutocompleteElementResponse {
	return v.value
}

func (v *NullableEmailtypeAutocompleteElementResponse) Set(val *EmailtypeAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailtypeAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailtypeAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailtypeAutocompleteElementResponse(val *EmailtypeAutocompleteElementResponse) *NullableEmailtypeAutocompleteElementResponse {
	return &NullableEmailtypeAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableEmailtypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailtypeAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


