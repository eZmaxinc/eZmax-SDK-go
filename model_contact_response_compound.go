/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContactResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContactResponseCompound{}

// ContactResponseCompound A Contact Object
type ContactResponseCompound struct {
	ContactResponse
}

type _ContactResponseCompound ContactResponseCompound

// NewContactResponseCompound instantiates a new ContactResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContactResponseCompound(pkiContactID int32, fkiLanguageID int32, fkiContacttitleID int32, fkiContactinformationsID int32, eContactType FieldEContactType, sContactFirstname string, sContactLastname string, bContactIsactive bool, objContactinformations ContactinformationsResponseCompound) *ContactResponseCompound {
	this := ContactResponseCompound{}
	this.PkiContactID = pkiContactID
	this.FkiLanguageID = fkiLanguageID
	this.FkiContacttitleID = fkiContacttitleID
	this.FkiContactinformationsID = fkiContactinformationsID
	this.EContactType = eContactType
	this.SContactFirstname = sContactFirstname
	this.SContactLastname = sContactLastname
	this.BContactIsactive = bContactIsactive
	this.ObjContactinformations = objContactinformations
	return &this
}

// NewContactResponseCompoundWithDefaults instantiates a new ContactResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContactResponseCompoundWithDefaults() *ContactResponseCompound {
	this := ContactResponseCompound{}
	return &this
}

func (o ContactResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContactResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

func (o *ContactResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiContactID",
		"fkiLanguageID",
		"fkiContacttitleID",
		"fkiContactinformationsID",
		"eContactType",
		"sContactFirstname",
		"sContactLastname",
		"bContactIsactive",
		"objContactinformations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContactResponseCompound := _ContactResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContactResponseCompound)

	if err != nil {
		return err
	}

	*o = ContactResponseCompound(varContactResponseCompound)

	return err
}

type NullableContactResponseCompound struct {
	value *ContactResponseCompound
	isSet bool
}

func (v NullableContactResponseCompound) Get() *ContactResponseCompound {
	return v.value
}

func (v *NullableContactResponseCompound) Set(val *ContactResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableContactResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableContactResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContactResponseCompound(val *ContactResponseCompound) *NullableContactResponseCompound {
	return &NullableContactResponseCompound{value: val, isSet: true}
}

func (v NullableContactResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContactResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


