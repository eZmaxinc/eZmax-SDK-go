/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzsigntemplatesignerAPIService ObjectEzsigntemplatesignerAPI service
type ObjectEzsigntemplatesignerAPIService service

type ApiEzsigntemplatesignerCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatesignerAPIService
	ezsigntemplatesignerCreateObjectV1Request *EzsigntemplatesignerCreateObjectV1Request
}

func (r ApiEzsigntemplatesignerCreateObjectV1Request) EzsigntemplatesignerCreateObjectV1Request(ezsigntemplatesignerCreateObjectV1Request EzsigntemplatesignerCreateObjectV1Request) ApiEzsigntemplatesignerCreateObjectV1Request {
	r.ezsigntemplatesignerCreateObjectV1Request = &ezsigntemplatesignerCreateObjectV1Request
	return r
}

func (r ApiEzsigntemplatesignerCreateObjectV1Request) Execute() (*EzsigntemplatesignerCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatesignerCreateObjectV1Execute(r)
}

/*
EzsigntemplatesignerCreateObjectV1 Create a new Ezsigntemplatesigner

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsigntemplatesignerCreateObjectV1Request
*/
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerCreateObjectV1(ctx context.Context) ApiEzsigntemplatesignerCreateObjectV1Request {
	return ApiEzsigntemplatesignerCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsigntemplatesignerCreateObjectV1Response
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerCreateObjectV1Execute(r ApiEzsigntemplatesignerCreateObjectV1Request) (*EzsigntemplatesignerCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatesignerCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatesignerAPIService.EzsigntemplatesignerCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatesigner"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsigntemplatesignerCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatesignerCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatesignerCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatesignerDeleteObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatesignerAPIService
	pkiEzsigntemplatesignerID int32
}

func (r ApiEzsigntemplatesignerDeleteObjectV1Request) Execute() (*EzsigntemplatesignerDeleteObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatesignerDeleteObjectV1Execute(r)
}

/*
EzsigntemplatesignerDeleteObjectV1 Delete an existing Ezsigntemplatesigner



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatesignerID
 @return ApiEzsigntemplatesignerDeleteObjectV1Request
*/
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerDeleteObjectV1(ctx context.Context, pkiEzsigntemplatesignerID int32) ApiEzsigntemplatesignerDeleteObjectV1Request {
	return ApiEzsigntemplatesignerDeleteObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatesignerID: pkiEzsigntemplatesignerID,
	}
}

// Execute executes the request
//  @return EzsigntemplatesignerDeleteObjectV1Response
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerDeleteObjectV1Execute(r ApiEzsigntemplatesignerDeleteObjectV1Request) (*EzsigntemplatesignerDeleteObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatesignerDeleteObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatesignerAPIService.EzsigntemplatesignerDeleteObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatesignerID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatesignerID, "pkiEzsigntemplatesignerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatesignerID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatesignerID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatesignerEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatesignerAPIService
	pkiEzsigntemplatesignerID int32
	ezsigntemplatesignerEditObjectV1Request *EzsigntemplatesignerEditObjectV1Request
}

func (r ApiEzsigntemplatesignerEditObjectV1Request) EzsigntemplatesignerEditObjectV1Request(ezsigntemplatesignerEditObjectV1Request EzsigntemplatesignerEditObjectV1Request) ApiEzsigntemplatesignerEditObjectV1Request {
	r.ezsigntemplatesignerEditObjectV1Request = &ezsigntemplatesignerEditObjectV1Request
	return r
}

func (r ApiEzsigntemplatesignerEditObjectV1Request) Execute() (*EzsigntemplatesignerEditObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatesignerEditObjectV1Execute(r)
}

/*
EzsigntemplatesignerEditObjectV1 Edit an existing Ezsigntemplatesigner



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatesignerID
 @return ApiEzsigntemplatesignerEditObjectV1Request
*/
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerEditObjectV1(ctx context.Context, pkiEzsigntemplatesignerID int32) ApiEzsigntemplatesignerEditObjectV1Request {
	return ApiEzsigntemplatesignerEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatesignerID: pkiEzsigntemplatesignerID,
	}
}

// Execute executes the request
//  @return EzsigntemplatesignerEditObjectV1Response
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerEditObjectV1Execute(r ApiEzsigntemplatesignerEditObjectV1Request) (*EzsigntemplatesignerEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatesignerEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatesignerAPIService.EzsigntemplatesignerEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatesignerID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatesignerID, "pkiEzsigntemplatesignerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatesignerID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatesignerID must be greater than 0")
	}
	if r.ezsigntemplatesignerEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsigntemplatesignerEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsigntemplatesignerEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsigntemplatesignerGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsigntemplatesignerAPIService
	pkiEzsigntemplatesignerID int32
}

func (r ApiEzsigntemplatesignerGetObjectV2Request) Execute() (*EzsigntemplatesignerGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzsigntemplatesignerGetObjectV2Execute(r)
}

/*
EzsigntemplatesignerGetObjectV2 Retrieve an existing Ezsigntemplatesigner



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsigntemplatesignerID
 @return ApiEzsigntemplatesignerGetObjectV2Request
*/
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerGetObjectV2(ctx context.Context, pkiEzsigntemplatesignerID int32) ApiEzsigntemplatesignerGetObjectV2Request {
	return ApiEzsigntemplatesignerGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsigntemplatesignerID: pkiEzsigntemplatesignerID,
	}
}

// Execute executes the request
//  @return EzsigntemplatesignerGetObjectV2Response
func (a *ObjectEzsigntemplatesignerAPIService) EzsigntemplatesignerGetObjectV2Execute(r ApiEzsigntemplatesignerGetObjectV2Request) (*EzsigntemplatesignerGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsigntemplatesignerGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsigntemplatesignerAPIService.EzsigntemplatesignerGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsigntemplatesigner/{pkiEzsigntemplatesignerID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsigntemplatesignerID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsigntemplatesignerID, "pkiEzsigntemplatesignerID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsigntemplatesignerID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsigntemplatesignerID must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
