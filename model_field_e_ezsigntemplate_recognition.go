/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplateRecognition Indicates whether we use the name or the content to recognize the templates to be automatically applied to documents
type FieldEEzsigntemplateRecognition string

// List of Field-eEzsigntemplateRecognition
const (
	NO FieldEEzsigntemplateRecognition = "No"
	FILENAME FieldEEzsigntemplateRecognition = "Filename"
	CONTENT FieldEEzsigntemplateRecognition = "Content"
)

// All allowed values of FieldEEzsigntemplateRecognition enum
var AllowedFieldEEzsigntemplateRecognitionEnumValues = []FieldEEzsigntemplateRecognition{
	"No",
	"Filename",
	"Content",
}

func (v *FieldEEzsigntemplateRecognition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplateRecognition(value)
	for _, existing := range AllowedFieldEEzsigntemplateRecognitionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplateRecognition", value)
}

// NewFieldEEzsigntemplateRecognitionFromValue returns a pointer to a valid FieldEEzsigntemplateRecognition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplateRecognitionFromValue(v string) (*FieldEEzsigntemplateRecognition, error) {
	ev := FieldEEzsigntemplateRecognition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplateRecognition: valid values are %v", v, AllowedFieldEEzsigntemplateRecognitionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplateRecognition) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplateRecognitionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplateRecognition value
func (v FieldEEzsigntemplateRecognition) Ptr() *FieldEEzsigntemplateRecognition {
	return &v
}

type NullableFieldEEzsigntemplateRecognition struct {
	value *FieldEEzsigntemplateRecognition
	isSet bool
}

func (v NullableFieldEEzsigntemplateRecognition) Get() *FieldEEzsigntemplateRecognition {
	return v.value
}

func (v *NullableFieldEEzsigntemplateRecognition) Set(val *FieldEEzsigntemplateRecognition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplateRecognition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplateRecognition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplateRecognition(val *FieldEEzsigntemplateRecognition) *NullableFieldEEzsigntemplateRecognition {
	return &NullableFieldEEzsigntemplateRecognition{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplateRecognition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplateRecognition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

