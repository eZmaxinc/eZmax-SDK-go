/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload{}

// EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload Payload for POST /1/object/ezsigntemplatepublic/getEzsigntemplatepublicDetails
type EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload struct {
	ObjBranding *CustomBrandingResponse `json:"objBranding,omitempty"`
	// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won't have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
	FkiUserlogintypeID int32 `json:"fkiUserlogintypeID"`
	ASEzsigntemplatesignerDescription []string `json:"a_sEzsigntemplatesignerDescription"`
}

type _EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload

// NewEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload instantiates a new EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload(fkiUserlogintypeID int32, aSEzsigntemplatesignerDescription []string) *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {
	this := EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload{}
	this.FkiUserlogintypeID = fkiUserlogintypeID
	this.ASEzsigntemplatesignerDescription = aSEzsigntemplatesignerDescription
	return &this
}

// NewEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayloadWithDefaults instantiates a new EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayloadWithDefaults() *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {
	this := EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload{}
	return &this
}

// GetObjBranding returns the ObjBranding field value if set, zero value otherwise.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetObjBranding() CustomBrandingResponse {
	if o == nil || IsNil(o.ObjBranding) {
		var ret CustomBrandingResponse
		return ret
	}
	return *o.ObjBranding
}

// GetObjBrandingOk returns a tuple with the ObjBranding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetObjBrandingOk() (*CustomBrandingResponse, bool) {
	if o == nil || IsNil(o.ObjBranding) {
		return nil, false
	}
	return o.ObjBranding, true
}

// HasObjBranding returns a boolean if a field has been set.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) HasObjBranding() bool {
	if o != nil && !IsNil(o.ObjBranding) {
		return true
	}

	return false
}

// SetObjBranding gets a reference to the given CustomBrandingResponse and assigns it to the ObjBranding field.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) SetObjBranding(v CustomBrandingResponse) {
	o.ObjBranding = &v
}

// GetFkiUserlogintypeID returns the FkiUserlogintypeID field value
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetFkiUserlogintypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiUserlogintypeID
}

// GetFkiUserlogintypeIDOk returns a tuple with the FkiUserlogintypeID field value
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetFkiUserlogintypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiUserlogintypeID, true
}

// SetFkiUserlogintypeID sets field value
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) SetFkiUserlogintypeID(v int32) {
	o.FkiUserlogintypeID = v
}

// GetASEzsigntemplatesignerDescription returns the ASEzsigntemplatesignerDescription field value
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetASEzsigntemplatesignerDescription() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ASEzsigntemplatesignerDescription
}

// GetASEzsigntemplatesignerDescriptionOk returns a tuple with the ASEzsigntemplatesignerDescription field value
// and a boolean to check if the value has been set.
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) GetASEzsigntemplatesignerDescriptionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ASEzsigntemplatesignerDescription, true
}

// SetASEzsigntemplatesignerDescription sets field value
func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) SetASEzsigntemplatesignerDescription(v []string) {
	o.ASEzsigntemplatesignerDescription = v
}

func (o EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjBranding) {
		toSerialize["objBranding"] = o.ObjBranding
	}
	toSerialize["fkiUserlogintypeID"] = o.FkiUserlogintypeID
	toSerialize["a_sEzsigntemplatesignerDescription"] = o.ASEzsigntemplatesignerDescription
	return toSerialize, nil
}

func (o *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiUserlogintypeID",
		"a_sEzsigntemplatesignerDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload := _EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload)

	if err != nil {
		return err
	}

	*o = EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload(varEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload)

	return err
}

type NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload struct {
	value *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload
	isSet bool
}

func (v NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) Get() *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {
	return v.value
}

func (v *NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) Set(val *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload(val *EzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) *NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload {
	return &NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload{value: val, isSet: true}
}

func (v NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsigntemplatepublicGetEzsigntemplatepublicDetailsV1ResponseMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


