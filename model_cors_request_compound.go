/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CorsRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CorsRequestCompound{}

// CorsRequestCompound A Cors Object and children
type CorsRequestCompound struct {
	// The unique ID of the Cors
	PkiCorsID *int32 `json:"pkiCorsID,omitempty"`
	// The unique ID of the Apikey
	FkiApikeyID int32 `json:"fkiApikeyID"`
	// The entryurl of the Cors
	SCorsEntryurl string `json:"sCorsEntryurl"`
}

type _CorsRequestCompound CorsRequestCompound

// NewCorsRequestCompound instantiates a new CorsRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCorsRequestCompound(fkiApikeyID int32, sCorsEntryurl string) *CorsRequestCompound {
	this := CorsRequestCompound{}
	this.FkiApikeyID = fkiApikeyID
	this.SCorsEntryurl = sCorsEntryurl
	return &this
}

// NewCorsRequestCompoundWithDefaults instantiates a new CorsRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCorsRequestCompoundWithDefaults() *CorsRequestCompound {
	this := CorsRequestCompound{}
	return &this
}

// GetPkiCorsID returns the PkiCorsID field value if set, zero value otherwise.
func (o *CorsRequestCompound) GetPkiCorsID() int32 {
	if o == nil || IsNil(o.PkiCorsID) {
		var ret int32
		return ret
	}
	return *o.PkiCorsID
}

// GetPkiCorsIDOk returns a tuple with the PkiCorsID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CorsRequestCompound) GetPkiCorsIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiCorsID) {
		return nil, false
	}
	return o.PkiCorsID, true
}

// HasPkiCorsID returns a boolean if a field has been set.
func (o *CorsRequestCompound) HasPkiCorsID() bool {
	if o != nil && !IsNil(o.PkiCorsID) {
		return true
	}

	return false
}

// SetPkiCorsID gets a reference to the given int32 and assigns it to the PkiCorsID field.
func (o *CorsRequestCompound) SetPkiCorsID(v int32) {
	o.PkiCorsID = &v
}

// GetFkiApikeyID returns the FkiApikeyID field value
func (o *CorsRequestCompound) GetFkiApikeyID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiApikeyID
}

// GetFkiApikeyIDOk returns a tuple with the FkiApikeyID field value
// and a boolean to check if the value has been set.
func (o *CorsRequestCompound) GetFkiApikeyIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiApikeyID, true
}

// SetFkiApikeyID sets field value
func (o *CorsRequestCompound) SetFkiApikeyID(v int32) {
	o.FkiApikeyID = v
}

// GetSCorsEntryurl returns the SCorsEntryurl field value
func (o *CorsRequestCompound) GetSCorsEntryurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCorsEntryurl
}

// GetSCorsEntryurlOk returns a tuple with the SCorsEntryurl field value
// and a boolean to check if the value has been set.
func (o *CorsRequestCompound) GetSCorsEntryurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCorsEntryurl, true
}

// SetSCorsEntryurl sets field value
func (o *CorsRequestCompound) SetSCorsEntryurl(v string) {
	o.SCorsEntryurl = v
}

func (o CorsRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CorsRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiCorsID) {
		toSerialize["pkiCorsID"] = o.PkiCorsID
	}
	toSerialize["fkiApikeyID"] = o.FkiApikeyID
	toSerialize["sCorsEntryurl"] = o.SCorsEntryurl
	return toSerialize, nil
}

func (o *CorsRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fkiApikeyID",
		"sCorsEntryurl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCorsRequestCompound := _CorsRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCorsRequestCompound)

	if err != nil {
		return err
	}

	*o = CorsRequestCompound(varCorsRequestCompound)

	return err
}

type NullableCorsRequestCompound struct {
	value *CorsRequestCompound
	isSet bool
}

func (v NullableCorsRequestCompound) Get() *CorsRequestCompound {
	return v.value
}

func (v *NullableCorsRequestCompound) Set(val *CorsRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableCorsRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableCorsRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCorsRequestCompound(val *CorsRequestCompound) *NullableCorsRequestCompound {
	return &NullableCorsRequestCompound{value: val, isSet: true}
}

func (v NullableCorsRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCorsRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


