/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhoneResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhoneResponseCompound{}

// PhoneResponseCompound A Phone Object and children to create a complete structure
type PhoneResponseCompound struct {
	PhoneResponse
	// Indicate the phone number is an international phone number.
	BPhoneInternational *bool `json:"bPhoneInternational,omitempty"`
}

type _PhoneResponseCompound PhoneResponseCompound

// NewPhoneResponseCompound instantiates a new PhoneResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhoneResponseCompound(pkiPhoneID int32, fkiPhonetypeID int32) *PhoneResponseCompound {
	this := PhoneResponseCompound{}
	this.PkiPhoneID = pkiPhoneID
	this.FkiPhonetypeID = fkiPhonetypeID
	return &this
}

// NewPhoneResponseCompoundWithDefaults instantiates a new PhoneResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhoneResponseCompoundWithDefaults() *PhoneResponseCompound {
	this := PhoneResponseCompound{}
	return &this
}

// GetBPhoneInternational returns the BPhoneInternational field value if set, zero value otherwise.
func (o *PhoneResponseCompound) GetBPhoneInternational() bool {
	if o == nil || IsNil(o.BPhoneInternational) {
		var ret bool
		return ret
	}
	return *o.BPhoneInternational
}

// GetBPhoneInternationalOk returns a tuple with the BPhoneInternational field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhoneResponseCompound) GetBPhoneInternationalOk() (*bool, bool) {
	if o == nil || IsNil(o.BPhoneInternational) {
		return nil, false
	}
	return o.BPhoneInternational, true
}

// HasBPhoneInternational returns a boolean if a field has been set.
func (o *PhoneResponseCompound) HasBPhoneInternational() bool {
	if o != nil && !IsNil(o.BPhoneInternational) {
		return true
	}

	return false
}

// SetBPhoneInternational gets a reference to the given bool and assigns it to the BPhoneInternational field.
func (o *PhoneResponseCompound) SetBPhoneInternational(v bool) {
	o.BPhoneInternational = &v
}

func (o PhoneResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhoneResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BPhoneInternational) {
		toSerialize["bPhoneInternational"] = o.BPhoneInternational
	}
	return toSerialize, nil
}

func (o *PhoneResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiPhoneID",
		"fkiPhonetypeID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhoneResponseCompound := _PhoneResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhoneResponseCompound)

	if err != nil {
		return err
	}

	*o = PhoneResponseCompound(varPhoneResponseCompound)

	return err
}

type NullablePhoneResponseCompound struct {
	value *PhoneResponseCompound
	isSet bool
}

func (v NullablePhoneResponseCompound) Get() *PhoneResponseCompound {
	return v.value
}

func (v *NullablePhoneResponseCompound) Set(val *PhoneResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoneResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoneResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoneResponseCompound(val *PhoneResponseCompound) *NullablePhoneResponseCompound {
	return &NullablePhoneResponseCompound{value: val, isSet: true}
}

func (v NullablePhoneResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoneResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


