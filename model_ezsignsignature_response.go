/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignsignatureResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignsignatureResponse{}

// EzsignsignatureResponse An Ezsignsignature Object
type EzsignsignatureResponse struct {
	// The unique ID of the Ezsignsignature
	PkiEzsignsignatureID int32 `json:"pkiEzsignsignatureID"`
	// The unique ID of the Ezsigndocument
	FkiEzsigndocumentID int32 `json:"fkiEzsigndocumentID"`
	// The unique ID of the Ezsignfoldersignerassociation
	FkiEzsignfoldersignerassociationID int32 `json:"fkiEzsignfoldersignerassociationID"`
	// The unique ID of the Ezsignsigningreason
	FkiEzsignsigningreasonID *int32 `json:"fkiEzsignsigningreasonID,omitempty"`
	// The unique ID of the Font
	FkiFontID *int32 `json:"fkiFontID,omitempty"`
	// The description of the Ezsignsigningreason in the language of the requester
	SEzsignsigningreasonDescriptionX *string `json:"sEzsignsigningreasonDescriptionX,omitempty" validate:"regexp=^.{0,50}$"`
	// The page number in the Ezsigndocument
	IEzsignpagePagenumber int32 `json:"iEzsignpagePagenumber"`
	// The X coordinate (Horizontal) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 2 inches from the left border of the page, you would use \"200\" for the X coordinate.
	IEzsignsignatureX int32 `json:"iEzsignsignatureX"`
	// The Y coordinate (Vertical) where to put the Ezsignsignature on the page.  Coordinate is calculated at 100dpi (dot per inch). So for example, if you want to put the Ezsignsignature 3 inches from the top border of the page, you would use \"300\" for the Y coordinate.
	IEzsignsignatureY int32 `json:"iEzsignsignatureY"`
	// The height of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have an height of 2 inches, you would use \"200\" for the iEzsignsignatureHeight.
	IEzsignsignatureHeight *int32 `json:"iEzsignsignatureHeight,omitempty"`
	// The width of the Ezsignsignature.  Size is calculated at 100dpi (dot per inch). So for example, if you want the Ezsignsignature to have a width of 2 inches, you would use \"200\" for the iEzsignsignatureWidth.
	IEzsignsignatureWidth *int32 `json:"iEzsignsignatureWidth,omitempty"`
	// The step when the Ezsignsigner will be invited to sign
	IEzsignsignatureStep int32 `json:"iEzsignsignatureStep"`
	// The step when the Ezsignsigner will be invited to sign
	IEzsignsignatureStepadjusted *int32 `json:"iEzsignsignatureStepadjusted,omitempty"`
	EEzsignsignatureType FieldEEzsignsignatureType `json:"eEzsignsignatureType"`
	// A tooltip that will be presented to Ezsignsigner about the Ezsignsignature
	TEzsignsignatureTooltip *string `json:"tEzsignsignatureTooltip,omitempty"`
	EEzsignsignatureTooltipposition *FieldEEzsignsignatureTooltipposition `json:"eEzsignsignatureTooltipposition,omitempty"`
	EEzsignsignatureFont *FieldEEzsignsignatureFont `json:"eEzsignsignatureFont,omitempty"`
	// The step when the Ezsignsigner will be invited to validate the Ezsignsignature of eEzsignsignatureType Attachments
	IEzsignsignatureValidationstep *int32 `json:"iEzsignsignatureValidationstep,omitempty"`
	// The description attached to the attachment name added in Ezsignsignature of eEzsignsignatureType Attachments
	SEzsignsignatureAttachmentdescription *string `json:"sEzsignsignatureAttachmentdescription,omitempty"`
	EEzsignsignatureAttachmentnamesource *FieldEEzsignsignatureAttachmentnamesource `json:"eEzsignsignatureAttachmentnamesource,omitempty"`
	EEzsignsignatureConsultationtrigger *FieldEEzsignsignatureConsultationtrigger `json:"eEzsignsignatureConsultationtrigger,omitempty"`
	// Whether the Ezsignsignature must be handwritten or not when eEzsignsignatureType = Signature.
	BEzsignsignatureHandwritten *bool `json:"bEzsignsignatureHandwritten,omitempty"`
	// Whether the Ezsignsignature must include a reason or not when eEzsignsignatureType = Signature.
	BEzsignsignatureReason *bool `json:"bEzsignsignatureReason,omitempty"`
	// Whether the Ezsignsignature is required or not. This field is relevant only with Ezsignsignature with eEzsignsignatureType = Attachments, Text or Textarea.
	BEzsignsignatureRequired *bool `json:"bEzsignsignatureRequired,omitempty"`
	// The unique ID of the Ezsignfoldersignerassociation
	FkiEzsignfoldersignerassociationIDValidation *int32 `json:"fkiEzsignfoldersignerassociationIDValidation,omitempty"`
	// The date the Ezsignsignature was signed
	DtEzsignsignatureDate *string `json:"dtEzsignsignatureDate,omitempty" validate:"regexp=^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) ([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$"`
	// The count of Ezsignsignatureattachment
	IEzsignsignatureattachmentCount *int32 `json:"iEzsignsignatureattachmentCount,omitempty"`
	// The value entered while signing Ezsignsignature of eEzsignsignatureType **City**, **FieldText** and **FieldTextarea**
	SEzsignsignatureDescription *string `json:"sEzsignsignatureDescription,omitempty"`
	// The maximum length for the value in the Ezsignsignature  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea**
	IEzsignsignatureMaxlength *int32 `json:"iEzsignsignatureMaxlength,omitempty"`
	EEzsignsignatureTextvalidation *EnumTextvalidation `json:"eEzsignsignatureTextvalidation,omitempty"`
	// Description of validation rule. Show by signatory.
	SEzsignsignatureTextvalidationcustommessage *string `json:"sEzsignsignatureTextvalidationcustommessage,omitempty"`
	EEzsignsignatureDependencyrequirement *FieldEEzsignsignatureDependencyrequirement `json:"eEzsignsignatureDependencyrequirement,omitempty"`
	// The default value for the Ezsignsignature  You can use the codes below and they will be replaced at signature time.    | Code | Description | Example | | ------------------------- | ------------ | ------------ | | {sUserFirstname} | The first name of the contact | John | | {sUserLastname} | The last name of the contact | Doe | | {sUserJobtitle} | The job title | Sales Representative | | {sCompany} | Company name | eZmax Solutions Inc. | | {sEmailAddress} | The email address | email@example.com | | {sPhoneE164} | A phone number in E.164 Format | +15149901516 | | {sPhoneE164Cell} | A phone number in E.164 Format | +15149901516 |
	SEzsignsignatureDefaultvalue *string `json:"sEzsignsignatureDefaultvalue,omitempty"`
	// A regular expression to indicate what values are acceptable for the Ezsignsignature.  This can only be set if eEzsignsignatureType is **FieldText** or **FieldTextarea** and eEzsignsignatureTextvalidation is **Custom**
	SEzsignsignatureRegexp *string `json:"sEzsignsignatureRegexp,omitempty" validate:"regexp=^\\\\^.*\\\\$$|^$"`
	ObjContactName CustomContactNameResponse `json:"objContactName"`
	ObjContactNameDelegation *CustomContactNameResponse `json:"objContactNameDelegation,omitempty"`
	ObjSignature *SignatureResponseCompound `json:"objSignature,omitempty"`
}

type _EzsignsignatureResponse EzsignsignatureResponse

// NewEzsignsignatureResponse instantiates a new EzsignsignatureResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignsignatureResponse(pkiEzsignsignatureID int32, fkiEzsigndocumentID int32, fkiEzsignfoldersignerassociationID int32, iEzsignpagePagenumber int32, iEzsignsignatureX int32, iEzsignsignatureY int32, iEzsignsignatureStep int32, eEzsignsignatureType FieldEEzsignsignatureType, objContactName CustomContactNameResponse) *EzsignsignatureResponse {
	this := EzsignsignatureResponse{}
	this.PkiEzsignsignatureID = pkiEzsignsignatureID
	this.FkiEzsigndocumentID = fkiEzsigndocumentID
	this.FkiEzsignfoldersignerassociationID = fkiEzsignfoldersignerassociationID
	this.IEzsignpagePagenumber = iEzsignpagePagenumber
	this.IEzsignsignatureX = iEzsignsignatureX
	this.IEzsignsignatureY = iEzsignsignatureY
	this.IEzsignsignatureStep = iEzsignsignatureStep
	this.EEzsignsignatureType = eEzsignsignatureType
	this.ObjContactName = objContactName
	return &this
}

// NewEzsignsignatureResponseWithDefaults instantiates a new EzsignsignatureResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignsignatureResponseWithDefaults() *EzsignsignatureResponse {
	this := EzsignsignatureResponse{}
	return &this
}

// GetPkiEzsignsignatureID returns the PkiEzsignsignatureID field value
func (o *EzsignsignatureResponse) GetPkiEzsignsignatureID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEzsignsignatureID
}

// GetPkiEzsignsignatureIDOk returns a tuple with the PkiEzsignsignatureID field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetPkiEzsignsignatureIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEzsignsignatureID, true
}

// SetPkiEzsignsignatureID sets field value
func (o *EzsignsignatureResponse) SetPkiEzsignsignatureID(v int32) {
	o.PkiEzsignsignatureID = v
}

// GetFkiEzsigndocumentID returns the FkiEzsigndocumentID field value
func (o *EzsignsignatureResponse) GetFkiEzsigndocumentID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzsigndocumentID
}

// GetFkiEzsigndocumentIDOk returns a tuple with the FkiEzsigndocumentID field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetFkiEzsigndocumentIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzsigndocumentID, true
}

// SetFkiEzsigndocumentID sets field value
func (o *EzsignsignatureResponse) SetFkiEzsigndocumentID(v int32) {
	o.FkiEzsigndocumentID = v
}

// GetFkiEzsignfoldersignerassociationID returns the FkiEzsignfoldersignerassociationID field value
func (o *EzsignsignatureResponse) GetFkiEzsignfoldersignerassociationID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEzsignfoldersignerassociationID
}

// GetFkiEzsignfoldersignerassociationIDOk returns a tuple with the FkiEzsignfoldersignerassociationID field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetFkiEzsignfoldersignerassociationIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEzsignfoldersignerassociationID, true
}

// SetFkiEzsignfoldersignerassociationID sets field value
func (o *EzsignsignatureResponse) SetFkiEzsignfoldersignerassociationID(v int32) {
	o.FkiEzsignfoldersignerassociationID = v
}

// GetFkiEzsignsigningreasonID returns the FkiEzsignsigningreasonID field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetFkiEzsignsigningreasonID() int32 {
	if o == nil || IsNil(o.FkiEzsignsigningreasonID) {
		var ret int32
		return ret
	}
	return *o.FkiEzsignsigningreasonID
}

// GetFkiEzsignsigningreasonIDOk returns a tuple with the FkiEzsignsigningreasonID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetFkiEzsignsigningreasonIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiEzsignsigningreasonID) {
		return nil, false
	}
	return o.FkiEzsignsigningreasonID, true
}

// HasFkiEzsignsigningreasonID returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasFkiEzsignsigningreasonID() bool {
	if o != nil && !IsNil(o.FkiEzsignsigningreasonID) {
		return true
	}

	return false
}

// SetFkiEzsignsigningreasonID gets a reference to the given int32 and assigns it to the FkiEzsignsigningreasonID field.
func (o *EzsignsignatureResponse) SetFkiEzsignsigningreasonID(v int32) {
	o.FkiEzsignsigningreasonID = &v
}

// GetFkiFontID returns the FkiFontID field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetFkiFontID() int32 {
	if o == nil || IsNil(o.FkiFontID) {
		var ret int32
		return ret
	}
	return *o.FkiFontID
}

// GetFkiFontIDOk returns a tuple with the FkiFontID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetFkiFontIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiFontID) {
		return nil, false
	}
	return o.FkiFontID, true
}

// HasFkiFontID returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasFkiFontID() bool {
	if o != nil && !IsNil(o.FkiFontID) {
		return true
	}

	return false
}

// SetFkiFontID gets a reference to the given int32 and assigns it to the FkiFontID field.
func (o *EzsignsignatureResponse) SetFkiFontID(v int32) {
	o.FkiFontID = &v
}

// GetSEzsignsigningreasonDescriptionX returns the SEzsignsigningreasonDescriptionX field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsigningreasonDescriptionX() string {
	if o == nil || IsNil(o.SEzsignsigningreasonDescriptionX) {
		var ret string
		return ret
	}
	return *o.SEzsignsigningreasonDescriptionX
}

// GetSEzsignsigningreasonDescriptionXOk returns a tuple with the SEzsignsigningreasonDescriptionX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsigningreasonDescriptionXOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsigningreasonDescriptionX) {
		return nil, false
	}
	return o.SEzsignsigningreasonDescriptionX, true
}

// HasSEzsignsigningreasonDescriptionX returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsigningreasonDescriptionX() bool {
	if o != nil && !IsNil(o.SEzsignsigningreasonDescriptionX) {
		return true
	}

	return false
}

// SetSEzsignsigningreasonDescriptionX gets a reference to the given string and assigns it to the SEzsignsigningreasonDescriptionX field.
func (o *EzsignsignatureResponse) SetSEzsignsigningreasonDescriptionX(v string) {
	o.SEzsignsigningreasonDescriptionX = &v
}

// GetIEzsignpagePagenumber returns the IEzsignpagePagenumber field value
func (o *EzsignsignatureResponse) GetIEzsignpagePagenumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignpagePagenumber
}

// GetIEzsignpagePagenumberOk returns a tuple with the IEzsignpagePagenumber field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignpagePagenumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignpagePagenumber, true
}

// SetIEzsignpagePagenumber sets field value
func (o *EzsignsignatureResponse) SetIEzsignpagePagenumber(v int32) {
	o.IEzsignpagePagenumber = v
}

// GetIEzsignsignatureX returns the IEzsignsignatureX field value
func (o *EzsignsignatureResponse) GetIEzsignsignatureX() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignsignatureX
}

// GetIEzsignsignatureXOk returns a tuple with the IEzsignsignatureX field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureXOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignsignatureX, true
}

// SetIEzsignsignatureX sets field value
func (o *EzsignsignatureResponse) SetIEzsignsignatureX(v int32) {
	o.IEzsignsignatureX = v
}

// GetIEzsignsignatureY returns the IEzsignsignatureY field value
func (o *EzsignsignatureResponse) GetIEzsignsignatureY() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignsignatureY
}

// GetIEzsignsignatureYOk returns a tuple with the IEzsignsignatureY field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureYOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignsignatureY, true
}

// SetIEzsignsignatureY sets field value
func (o *EzsignsignatureResponse) SetIEzsignsignatureY(v int32) {
	o.IEzsignsignatureY = v
}

// GetIEzsignsignatureHeight returns the IEzsignsignatureHeight field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureHeight() int32 {
	if o == nil || IsNil(o.IEzsignsignatureHeight) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureHeight
}

// GetIEzsignsignatureHeightOk returns a tuple with the IEzsignsignatureHeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureHeight) {
		return nil, false
	}
	return o.IEzsignsignatureHeight, true
}

// HasIEzsignsignatureHeight returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureHeight() bool {
	if o != nil && !IsNil(o.IEzsignsignatureHeight) {
		return true
	}

	return false
}

// SetIEzsignsignatureHeight gets a reference to the given int32 and assigns it to the IEzsignsignatureHeight field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureHeight(v int32) {
	o.IEzsignsignatureHeight = &v
}

// GetIEzsignsignatureWidth returns the IEzsignsignatureWidth field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureWidth() int32 {
	if o == nil || IsNil(o.IEzsignsignatureWidth) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureWidth
}

// GetIEzsignsignatureWidthOk returns a tuple with the IEzsignsignatureWidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureWidth) {
		return nil, false
	}
	return o.IEzsignsignatureWidth, true
}

// HasIEzsignsignatureWidth returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureWidth() bool {
	if o != nil && !IsNil(o.IEzsignsignatureWidth) {
		return true
	}

	return false
}

// SetIEzsignsignatureWidth gets a reference to the given int32 and assigns it to the IEzsignsignatureWidth field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureWidth(v int32) {
	o.IEzsignsignatureWidth = &v
}

// GetIEzsignsignatureStep returns the IEzsignsignatureStep field value
func (o *EzsignsignatureResponse) GetIEzsignsignatureStep() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IEzsignsignatureStep
}

// GetIEzsignsignatureStepOk returns a tuple with the IEzsignsignatureStep field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureStepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IEzsignsignatureStep, true
}

// SetIEzsignsignatureStep sets field value
func (o *EzsignsignatureResponse) SetIEzsignsignatureStep(v int32) {
	o.IEzsignsignatureStep = v
}

// GetIEzsignsignatureStepadjusted returns the IEzsignsignatureStepadjusted field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureStepadjusted() int32 {
	if o == nil || IsNil(o.IEzsignsignatureStepadjusted) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureStepadjusted
}

// GetIEzsignsignatureStepadjustedOk returns a tuple with the IEzsignsignatureStepadjusted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureStepadjustedOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureStepadjusted) {
		return nil, false
	}
	return o.IEzsignsignatureStepadjusted, true
}

// HasIEzsignsignatureStepadjusted returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureStepadjusted() bool {
	if o != nil && !IsNil(o.IEzsignsignatureStepadjusted) {
		return true
	}

	return false
}

// SetIEzsignsignatureStepadjusted gets a reference to the given int32 and assigns it to the IEzsignsignatureStepadjusted field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureStepadjusted(v int32) {
	o.IEzsignsignatureStepadjusted = &v
}

// GetEEzsignsignatureType returns the EEzsignsignatureType field value
func (o *EzsignsignatureResponse) GetEEzsignsignatureType() FieldEEzsignsignatureType {
	if o == nil {
		var ret FieldEEzsignsignatureType
		return ret
	}

	return o.EEzsignsignatureType
}

// GetEEzsignsignatureTypeOk returns a tuple with the EEzsignsignatureType field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureTypeOk() (*FieldEEzsignsignatureType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EEzsignsignatureType, true
}

// SetEEzsignsignatureType sets field value
func (o *EzsignsignatureResponse) SetEEzsignsignatureType(v FieldEEzsignsignatureType) {
	o.EEzsignsignatureType = v
}

// GetTEzsignsignatureTooltip returns the TEzsignsignatureTooltip field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetTEzsignsignatureTooltip() string {
	if o == nil || IsNil(o.TEzsignsignatureTooltip) {
		var ret string
		return ret
	}
	return *o.TEzsignsignatureTooltip
}

// GetTEzsignsignatureTooltipOk returns a tuple with the TEzsignsignatureTooltip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetTEzsignsignatureTooltipOk() (*string, bool) {
	if o == nil || IsNil(o.TEzsignsignatureTooltip) {
		return nil, false
	}
	return o.TEzsignsignatureTooltip, true
}

// HasTEzsignsignatureTooltip returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasTEzsignsignatureTooltip() bool {
	if o != nil && !IsNil(o.TEzsignsignatureTooltip) {
		return true
	}

	return false
}

// SetTEzsignsignatureTooltip gets a reference to the given string and assigns it to the TEzsignsignatureTooltip field.
func (o *EzsignsignatureResponse) SetTEzsignsignatureTooltip(v string) {
	o.TEzsignsignatureTooltip = &v
}

// GetEEzsignsignatureTooltipposition returns the EEzsignsignatureTooltipposition field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureTooltipposition() FieldEEzsignsignatureTooltipposition {
	if o == nil || IsNil(o.EEzsignsignatureTooltipposition) {
		var ret FieldEEzsignsignatureTooltipposition
		return ret
	}
	return *o.EEzsignsignatureTooltipposition
}

// GetEEzsignsignatureTooltippositionOk returns a tuple with the EEzsignsignatureTooltipposition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureTooltippositionOk() (*FieldEEzsignsignatureTooltipposition, bool) {
	if o == nil || IsNil(o.EEzsignsignatureTooltipposition) {
		return nil, false
	}
	return o.EEzsignsignatureTooltipposition, true
}

// HasEEzsignsignatureTooltipposition returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureTooltipposition() bool {
	if o != nil && !IsNil(o.EEzsignsignatureTooltipposition) {
		return true
	}

	return false
}

// SetEEzsignsignatureTooltipposition gets a reference to the given FieldEEzsignsignatureTooltipposition and assigns it to the EEzsignsignatureTooltipposition field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureTooltipposition(v FieldEEzsignsignatureTooltipposition) {
	o.EEzsignsignatureTooltipposition = &v
}

// GetEEzsignsignatureFont returns the EEzsignsignatureFont field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureFont() FieldEEzsignsignatureFont {
	if o == nil || IsNil(o.EEzsignsignatureFont) {
		var ret FieldEEzsignsignatureFont
		return ret
	}
	return *o.EEzsignsignatureFont
}

// GetEEzsignsignatureFontOk returns a tuple with the EEzsignsignatureFont field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureFontOk() (*FieldEEzsignsignatureFont, bool) {
	if o == nil || IsNil(o.EEzsignsignatureFont) {
		return nil, false
	}
	return o.EEzsignsignatureFont, true
}

// HasEEzsignsignatureFont returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureFont() bool {
	if o != nil && !IsNil(o.EEzsignsignatureFont) {
		return true
	}

	return false
}

// SetEEzsignsignatureFont gets a reference to the given FieldEEzsignsignatureFont and assigns it to the EEzsignsignatureFont field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureFont(v FieldEEzsignsignatureFont) {
	o.EEzsignsignatureFont = &v
}

// GetIEzsignsignatureValidationstep returns the IEzsignsignatureValidationstep field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureValidationstep() int32 {
	if o == nil || IsNil(o.IEzsignsignatureValidationstep) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureValidationstep
}

// GetIEzsignsignatureValidationstepOk returns a tuple with the IEzsignsignatureValidationstep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureValidationstepOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureValidationstep) {
		return nil, false
	}
	return o.IEzsignsignatureValidationstep, true
}

// HasIEzsignsignatureValidationstep returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureValidationstep() bool {
	if o != nil && !IsNil(o.IEzsignsignatureValidationstep) {
		return true
	}

	return false
}

// SetIEzsignsignatureValidationstep gets a reference to the given int32 and assigns it to the IEzsignsignatureValidationstep field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureValidationstep(v int32) {
	o.IEzsignsignatureValidationstep = &v
}

// GetSEzsignsignatureAttachmentdescription returns the SEzsignsignatureAttachmentdescription field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsignatureAttachmentdescription() string {
	if o == nil || IsNil(o.SEzsignsignatureAttachmentdescription) {
		var ret string
		return ret
	}
	return *o.SEzsignsignatureAttachmentdescription
}

// GetSEzsignsignatureAttachmentdescriptionOk returns a tuple with the SEzsignsignatureAttachmentdescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsignatureAttachmentdescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsignatureAttachmentdescription) {
		return nil, false
	}
	return o.SEzsignsignatureAttachmentdescription, true
}

// HasSEzsignsignatureAttachmentdescription returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsignatureAttachmentdescription() bool {
	if o != nil && !IsNil(o.SEzsignsignatureAttachmentdescription) {
		return true
	}

	return false
}

// SetSEzsignsignatureAttachmentdescription gets a reference to the given string and assigns it to the SEzsignsignatureAttachmentdescription field.
func (o *EzsignsignatureResponse) SetSEzsignsignatureAttachmentdescription(v string) {
	o.SEzsignsignatureAttachmentdescription = &v
}

// GetEEzsignsignatureAttachmentnamesource returns the EEzsignsignatureAttachmentnamesource field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureAttachmentnamesource() FieldEEzsignsignatureAttachmentnamesource {
	if o == nil || IsNil(o.EEzsignsignatureAttachmentnamesource) {
		var ret FieldEEzsignsignatureAttachmentnamesource
		return ret
	}
	return *o.EEzsignsignatureAttachmentnamesource
}

// GetEEzsignsignatureAttachmentnamesourceOk returns a tuple with the EEzsignsignatureAttachmentnamesource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureAttachmentnamesourceOk() (*FieldEEzsignsignatureAttachmentnamesource, bool) {
	if o == nil || IsNil(o.EEzsignsignatureAttachmentnamesource) {
		return nil, false
	}
	return o.EEzsignsignatureAttachmentnamesource, true
}

// HasEEzsignsignatureAttachmentnamesource returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureAttachmentnamesource() bool {
	if o != nil && !IsNil(o.EEzsignsignatureAttachmentnamesource) {
		return true
	}

	return false
}

// SetEEzsignsignatureAttachmentnamesource gets a reference to the given FieldEEzsignsignatureAttachmentnamesource and assigns it to the EEzsignsignatureAttachmentnamesource field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureAttachmentnamesource(v FieldEEzsignsignatureAttachmentnamesource) {
	o.EEzsignsignatureAttachmentnamesource = &v
}

// GetEEzsignsignatureConsultationtrigger returns the EEzsignsignatureConsultationtrigger field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureConsultationtrigger() FieldEEzsignsignatureConsultationtrigger {
	if o == nil || IsNil(o.EEzsignsignatureConsultationtrigger) {
		var ret FieldEEzsignsignatureConsultationtrigger
		return ret
	}
	return *o.EEzsignsignatureConsultationtrigger
}

// GetEEzsignsignatureConsultationtriggerOk returns a tuple with the EEzsignsignatureConsultationtrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureConsultationtriggerOk() (*FieldEEzsignsignatureConsultationtrigger, bool) {
	if o == nil || IsNil(o.EEzsignsignatureConsultationtrigger) {
		return nil, false
	}
	return o.EEzsignsignatureConsultationtrigger, true
}

// HasEEzsignsignatureConsultationtrigger returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureConsultationtrigger() bool {
	if o != nil && !IsNil(o.EEzsignsignatureConsultationtrigger) {
		return true
	}

	return false
}

// SetEEzsignsignatureConsultationtrigger gets a reference to the given FieldEEzsignsignatureConsultationtrigger and assigns it to the EEzsignsignatureConsultationtrigger field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureConsultationtrigger(v FieldEEzsignsignatureConsultationtrigger) {
	o.EEzsignsignatureConsultationtrigger = &v
}

// GetBEzsignsignatureHandwritten returns the BEzsignsignatureHandwritten field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetBEzsignsignatureHandwritten() bool {
	if o == nil || IsNil(o.BEzsignsignatureHandwritten) {
		var ret bool
		return ret
	}
	return *o.BEzsignsignatureHandwritten
}

// GetBEzsignsignatureHandwrittenOk returns a tuple with the BEzsignsignatureHandwritten field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetBEzsignsignatureHandwrittenOk() (*bool, bool) {
	if o == nil || IsNil(o.BEzsignsignatureHandwritten) {
		return nil, false
	}
	return o.BEzsignsignatureHandwritten, true
}

// HasBEzsignsignatureHandwritten returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasBEzsignsignatureHandwritten() bool {
	if o != nil && !IsNil(o.BEzsignsignatureHandwritten) {
		return true
	}

	return false
}

// SetBEzsignsignatureHandwritten gets a reference to the given bool and assigns it to the BEzsignsignatureHandwritten field.
func (o *EzsignsignatureResponse) SetBEzsignsignatureHandwritten(v bool) {
	o.BEzsignsignatureHandwritten = &v
}

// GetBEzsignsignatureReason returns the BEzsignsignatureReason field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetBEzsignsignatureReason() bool {
	if o == nil || IsNil(o.BEzsignsignatureReason) {
		var ret bool
		return ret
	}
	return *o.BEzsignsignatureReason
}

// GetBEzsignsignatureReasonOk returns a tuple with the BEzsignsignatureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetBEzsignsignatureReasonOk() (*bool, bool) {
	if o == nil || IsNil(o.BEzsignsignatureReason) {
		return nil, false
	}
	return o.BEzsignsignatureReason, true
}

// HasBEzsignsignatureReason returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasBEzsignsignatureReason() bool {
	if o != nil && !IsNil(o.BEzsignsignatureReason) {
		return true
	}

	return false
}

// SetBEzsignsignatureReason gets a reference to the given bool and assigns it to the BEzsignsignatureReason field.
func (o *EzsignsignatureResponse) SetBEzsignsignatureReason(v bool) {
	o.BEzsignsignatureReason = &v
}

// GetBEzsignsignatureRequired returns the BEzsignsignatureRequired field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetBEzsignsignatureRequired() bool {
	if o == nil || IsNil(o.BEzsignsignatureRequired) {
		var ret bool
		return ret
	}
	return *o.BEzsignsignatureRequired
}

// GetBEzsignsignatureRequiredOk returns a tuple with the BEzsignsignatureRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetBEzsignsignatureRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.BEzsignsignatureRequired) {
		return nil, false
	}
	return o.BEzsignsignatureRequired, true
}

// HasBEzsignsignatureRequired returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasBEzsignsignatureRequired() bool {
	if o != nil && !IsNil(o.BEzsignsignatureRequired) {
		return true
	}

	return false
}

// SetBEzsignsignatureRequired gets a reference to the given bool and assigns it to the BEzsignsignatureRequired field.
func (o *EzsignsignatureResponse) SetBEzsignsignatureRequired(v bool) {
	o.BEzsignsignatureRequired = &v
}

// GetFkiEzsignfoldersignerassociationIDValidation returns the FkiEzsignfoldersignerassociationIDValidation field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetFkiEzsignfoldersignerassociationIDValidation() int32 {
	if o == nil || IsNil(o.FkiEzsignfoldersignerassociationIDValidation) {
		var ret int32
		return ret
	}
	return *o.FkiEzsignfoldersignerassociationIDValidation
}

// GetFkiEzsignfoldersignerassociationIDValidationOk returns a tuple with the FkiEzsignfoldersignerassociationIDValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetFkiEzsignfoldersignerassociationIDValidationOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiEzsignfoldersignerassociationIDValidation) {
		return nil, false
	}
	return o.FkiEzsignfoldersignerassociationIDValidation, true
}

// HasFkiEzsignfoldersignerassociationIDValidation returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasFkiEzsignfoldersignerassociationIDValidation() bool {
	if o != nil && !IsNil(o.FkiEzsignfoldersignerassociationIDValidation) {
		return true
	}

	return false
}

// SetFkiEzsignfoldersignerassociationIDValidation gets a reference to the given int32 and assigns it to the FkiEzsignfoldersignerassociationIDValidation field.
func (o *EzsignsignatureResponse) SetFkiEzsignfoldersignerassociationIDValidation(v int32) {
	o.FkiEzsignfoldersignerassociationIDValidation = &v
}

// GetDtEzsignsignatureDate returns the DtEzsignsignatureDate field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetDtEzsignsignatureDate() string {
	if o == nil || IsNil(o.DtEzsignsignatureDate) {
		var ret string
		return ret
	}
	return *o.DtEzsignsignatureDate
}

// GetDtEzsignsignatureDateOk returns a tuple with the DtEzsignsignatureDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetDtEzsignsignatureDateOk() (*string, bool) {
	if o == nil || IsNil(o.DtEzsignsignatureDate) {
		return nil, false
	}
	return o.DtEzsignsignatureDate, true
}

// HasDtEzsignsignatureDate returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasDtEzsignsignatureDate() bool {
	if o != nil && !IsNil(o.DtEzsignsignatureDate) {
		return true
	}

	return false
}

// SetDtEzsignsignatureDate gets a reference to the given string and assigns it to the DtEzsignsignatureDate field.
func (o *EzsignsignatureResponse) SetDtEzsignsignatureDate(v string) {
	o.DtEzsignsignatureDate = &v
}

// GetIEzsignsignatureattachmentCount returns the IEzsignsignatureattachmentCount field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureattachmentCount() int32 {
	if o == nil || IsNil(o.IEzsignsignatureattachmentCount) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureattachmentCount
}

// GetIEzsignsignatureattachmentCountOk returns a tuple with the IEzsignsignatureattachmentCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureattachmentCountOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureattachmentCount) {
		return nil, false
	}
	return o.IEzsignsignatureattachmentCount, true
}

// HasIEzsignsignatureattachmentCount returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureattachmentCount() bool {
	if o != nil && !IsNil(o.IEzsignsignatureattachmentCount) {
		return true
	}

	return false
}

// SetIEzsignsignatureattachmentCount gets a reference to the given int32 and assigns it to the IEzsignsignatureattachmentCount field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureattachmentCount(v int32) {
	o.IEzsignsignatureattachmentCount = &v
}

// GetSEzsignsignatureDescription returns the SEzsignsignatureDescription field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsignatureDescription() string {
	if o == nil || IsNil(o.SEzsignsignatureDescription) {
		var ret string
		return ret
	}
	return *o.SEzsignsignatureDescription
}

// GetSEzsignsignatureDescriptionOk returns a tuple with the SEzsignsignatureDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsignatureDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsignatureDescription) {
		return nil, false
	}
	return o.SEzsignsignatureDescription, true
}

// HasSEzsignsignatureDescription returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsignatureDescription() bool {
	if o != nil && !IsNil(o.SEzsignsignatureDescription) {
		return true
	}

	return false
}

// SetSEzsignsignatureDescription gets a reference to the given string and assigns it to the SEzsignsignatureDescription field.
func (o *EzsignsignatureResponse) SetSEzsignsignatureDescription(v string) {
	o.SEzsignsignatureDescription = &v
}

// GetIEzsignsignatureMaxlength returns the IEzsignsignatureMaxlength field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetIEzsignsignatureMaxlength() int32 {
	if o == nil || IsNil(o.IEzsignsignatureMaxlength) {
		var ret int32
		return ret
	}
	return *o.IEzsignsignatureMaxlength
}

// GetIEzsignsignatureMaxlengthOk returns a tuple with the IEzsignsignatureMaxlength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetIEzsignsignatureMaxlengthOk() (*int32, bool) {
	if o == nil || IsNil(o.IEzsignsignatureMaxlength) {
		return nil, false
	}
	return o.IEzsignsignatureMaxlength, true
}

// HasIEzsignsignatureMaxlength returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasIEzsignsignatureMaxlength() bool {
	if o != nil && !IsNil(o.IEzsignsignatureMaxlength) {
		return true
	}

	return false
}

// SetIEzsignsignatureMaxlength gets a reference to the given int32 and assigns it to the IEzsignsignatureMaxlength field.
func (o *EzsignsignatureResponse) SetIEzsignsignatureMaxlength(v int32) {
	o.IEzsignsignatureMaxlength = &v
}

// GetEEzsignsignatureTextvalidation returns the EEzsignsignatureTextvalidation field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureTextvalidation() EnumTextvalidation {
	if o == nil || IsNil(o.EEzsignsignatureTextvalidation) {
		var ret EnumTextvalidation
		return ret
	}
	return *o.EEzsignsignatureTextvalidation
}

// GetEEzsignsignatureTextvalidationOk returns a tuple with the EEzsignsignatureTextvalidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureTextvalidationOk() (*EnumTextvalidation, bool) {
	if o == nil || IsNil(o.EEzsignsignatureTextvalidation) {
		return nil, false
	}
	return o.EEzsignsignatureTextvalidation, true
}

// HasEEzsignsignatureTextvalidation returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureTextvalidation() bool {
	if o != nil && !IsNil(o.EEzsignsignatureTextvalidation) {
		return true
	}

	return false
}

// SetEEzsignsignatureTextvalidation gets a reference to the given EnumTextvalidation and assigns it to the EEzsignsignatureTextvalidation field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureTextvalidation(v EnumTextvalidation) {
	o.EEzsignsignatureTextvalidation = &v
}

// GetSEzsignsignatureTextvalidationcustommessage returns the SEzsignsignatureTextvalidationcustommessage field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsignatureTextvalidationcustommessage() string {
	if o == nil || IsNil(o.SEzsignsignatureTextvalidationcustommessage) {
		var ret string
		return ret
	}
	return *o.SEzsignsignatureTextvalidationcustommessage
}

// GetSEzsignsignatureTextvalidationcustommessageOk returns a tuple with the SEzsignsignatureTextvalidationcustommessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsignatureTextvalidationcustommessageOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsignatureTextvalidationcustommessage) {
		return nil, false
	}
	return o.SEzsignsignatureTextvalidationcustommessage, true
}

// HasSEzsignsignatureTextvalidationcustommessage returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsignatureTextvalidationcustommessage() bool {
	if o != nil && !IsNil(o.SEzsignsignatureTextvalidationcustommessage) {
		return true
	}

	return false
}

// SetSEzsignsignatureTextvalidationcustommessage gets a reference to the given string and assigns it to the SEzsignsignatureTextvalidationcustommessage field.
func (o *EzsignsignatureResponse) SetSEzsignsignatureTextvalidationcustommessage(v string) {
	o.SEzsignsignatureTextvalidationcustommessage = &v
}

// GetEEzsignsignatureDependencyrequirement returns the EEzsignsignatureDependencyrequirement field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetEEzsignsignatureDependencyrequirement() FieldEEzsignsignatureDependencyrequirement {
	if o == nil || IsNil(o.EEzsignsignatureDependencyrequirement) {
		var ret FieldEEzsignsignatureDependencyrequirement
		return ret
	}
	return *o.EEzsignsignatureDependencyrequirement
}

// GetEEzsignsignatureDependencyrequirementOk returns a tuple with the EEzsignsignatureDependencyrequirement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetEEzsignsignatureDependencyrequirementOk() (*FieldEEzsignsignatureDependencyrequirement, bool) {
	if o == nil || IsNil(o.EEzsignsignatureDependencyrequirement) {
		return nil, false
	}
	return o.EEzsignsignatureDependencyrequirement, true
}

// HasEEzsignsignatureDependencyrequirement returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasEEzsignsignatureDependencyrequirement() bool {
	if o != nil && !IsNil(o.EEzsignsignatureDependencyrequirement) {
		return true
	}

	return false
}

// SetEEzsignsignatureDependencyrequirement gets a reference to the given FieldEEzsignsignatureDependencyrequirement and assigns it to the EEzsignsignatureDependencyrequirement field.
func (o *EzsignsignatureResponse) SetEEzsignsignatureDependencyrequirement(v FieldEEzsignsignatureDependencyrequirement) {
	o.EEzsignsignatureDependencyrequirement = &v
}

// GetSEzsignsignatureDefaultvalue returns the SEzsignsignatureDefaultvalue field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsignatureDefaultvalue() string {
	if o == nil || IsNil(o.SEzsignsignatureDefaultvalue) {
		var ret string
		return ret
	}
	return *o.SEzsignsignatureDefaultvalue
}

// GetSEzsignsignatureDefaultvalueOk returns a tuple with the SEzsignsignatureDefaultvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsignatureDefaultvalueOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsignatureDefaultvalue) {
		return nil, false
	}
	return o.SEzsignsignatureDefaultvalue, true
}

// HasSEzsignsignatureDefaultvalue returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsignatureDefaultvalue() bool {
	if o != nil && !IsNil(o.SEzsignsignatureDefaultvalue) {
		return true
	}

	return false
}

// SetSEzsignsignatureDefaultvalue gets a reference to the given string and assigns it to the SEzsignsignatureDefaultvalue field.
func (o *EzsignsignatureResponse) SetSEzsignsignatureDefaultvalue(v string) {
	o.SEzsignsignatureDefaultvalue = &v
}

// GetSEzsignsignatureRegexp returns the SEzsignsignatureRegexp field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetSEzsignsignatureRegexp() string {
	if o == nil || IsNil(o.SEzsignsignatureRegexp) {
		var ret string
		return ret
	}
	return *o.SEzsignsignatureRegexp
}

// GetSEzsignsignatureRegexpOk returns a tuple with the SEzsignsignatureRegexp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetSEzsignsignatureRegexpOk() (*string, bool) {
	if o == nil || IsNil(o.SEzsignsignatureRegexp) {
		return nil, false
	}
	return o.SEzsignsignatureRegexp, true
}

// HasSEzsignsignatureRegexp returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasSEzsignsignatureRegexp() bool {
	if o != nil && !IsNil(o.SEzsignsignatureRegexp) {
		return true
	}

	return false
}

// SetSEzsignsignatureRegexp gets a reference to the given string and assigns it to the SEzsignsignatureRegexp field.
func (o *EzsignsignatureResponse) SetSEzsignsignatureRegexp(v string) {
	o.SEzsignsignatureRegexp = &v
}

// GetObjContactName returns the ObjContactName field value
func (o *EzsignsignatureResponse) GetObjContactName() CustomContactNameResponse {
	if o == nil {
		var ret CustomContactNameResponse
		return ret
	}

	return o.ObjContactName
}

// GetObjContactNameOk returns a tuple with the ObjContactName field value
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetObjContactNameOk() (*CustomContactNameResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjContactName, true
}

// SetObjContactName sets field value
func (o *EzsignsignatureResponse) SetObjContactName(v CustomContactNameResponse) {
	o.ObjContactName = v
}

// GetObjContactNameDelegation returns the ObjContactNameDelegation field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetObjContactNameDelegation() CustomContactNameResponse {
	if o == nil || IsNil(o.ObjContactNameDelegation) {
		var ret CustomContactNameResponse
		return ret
	}
	return *o.ObjContactNameDelegation
}

// GetObjContactNameDelegationOk returns a tuple with the ObjContactNameDelegation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetObjContactNameDelegationOk() (*CustomContactNameResponse, bool) {
	if o == nil || IsNil(o.ObjContactNameDelegation) {
		return nil, false
	}
	return o.ObjContactNameDelegation, true
}

// HasObjContactNameDelegation returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasObjContactNameDelegation() bool {
	if o != nil && !IsNil(o.ObjContactNameDelegation) {
		return true
	}

	return false
}

// SetObjContactNameDelegation gets a reference to the given CustomContactNameResponse and assigns it to the ObjContactNameDelegation field.
func (o *EzsignsignatureResponse) SetObjContactNameDelegation(v CustomContactNameResponse) {
	o.ObjContactNameDelegation = &v
}

// GetObjSignature returns the ObjSignature field value if set, zero value otherwise.
func (o *EzsignsignatureResponse) GetObjSignature() SignatureResponseCompound {
	if o == nil || IsNil(o.ObjSignature) {
		var ret SignatureResponseCompound
		return ret
	}
	return *o.ObjSignature
}

// GetObjSignatureOk returns a tuple with the ObjSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsignatureResponse) GetObjSignatureOk() (*SignatureResponseCompound, bool) {
	if o == nil || IsNil(o.ObjSignature) {
		return nil, false
	}
	return o.ObjSignature, true
}

// HasObjSignature returns a boolean if a field has been set.
func (o *EzsignsignatureResponse) HasObjSignature() bool {
	if o != nil && !IsNil(o.ObjSignature) {
		return true
	}

	return false
}

// SetObjSignature gets a reference to the given SignatureResponseCompound and assigns it to the ObjSignature field.
func (o *EzsignsignatureResponse) SetObjSignature(v SignatureResponseCompound) {
	o.ObjSignature = &v
}

func (o EzsignsignatureResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignsignatureResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEzsignsignatureID"] = o.PkiEzsignsignatureID
	toSerialize["fkiEzsigndocumentID"] = o.FkiEzsigndocumentID
	toSerialize["fkiEzsignfoldersignerassociationID"] = o.FkiEzsignfoldersignerassociationID
	if !IsNil(o.FkiEzsignsigningreasonID) {
		toSerialize["fkiEzsignsigningreasonID"] = o.FkiEzsignsigningreasonID
	}
	if !IsNil(o.FkiFontID) {
		toSerialize["fkiFontID"] = o.FkiFontID
	}
	if !IsNil(o.SEzsignsigningreasonDescriptionX) {
		toSerialize["sEzsignsigningreasonDescriptionX"] = o.SEzsignsigningreasonDescriptionX
	}
	toSerialize["iEzsignpagePagenumber"] = o.IEzsignpagePagenumber
	toSerialize["iEzsignsignatureX"] = o.IEzsignsignatureX
	toSerialize["iEzsignsignatureY"] = o.IEzsignsignatureY
	if !IsNil(o.IEzsignsignatureHeight) {
		toSerialize["iEzsignsignatureHeight"] = o.IEzsignsignatureHeight
	}
	if !IsNil(o.IEzsignsignatureWidth) {
		toSerialize["iEzsignsignatureWidth"] = o.IEzsignsignatureWidth
	}
	toSerialize["iEzsignsignatureStep"] = o.IEzsignsignatureStep
	if !IsNil(o.IEzsignsignatureStepadjusted) {
		toSerialize["iEzsignsignatureStepadjusted"] = o.IEzsignsignatureStepadjusted
	}
	toSerialize["eEzsignsignatureType"] = o.EEzsignsignatureType
	if !IsNil(o.TEzsignsignatureTooltip) {
		toSerialize["tEzsignsignatureTooltip"] = o.TEzsignsignatureTooltip
	}
	if !IsNil(o.EEzsignsignatureTooltipposition) {
		toSerialize["eEzsignsignatureTooltipposition"] = o.EEzsignsignatureTooltipposition
	}
	if !IsNil(o.EEzsignsignatureFont) {
		toSerialize["eEzsignsignatureFont"] = o.EEzsignsignatureFont
	}
	if !IsNil(o.IEzsignsignatureValidationstep) {
		toSerialize["iEzsignsignatureValidationstep"] = o.IEzsignsignatureValidationstep
	}
	if !IsNil(o.SEzsignsignatureAttachmentdescription) {
		toSerialize["sEzsignsignatureAttachmentdescription"] = o.SEzsignsignatureAttachmentdescription
	}
	if !IsNil(o.EEzsignsignatureAttachmentnamesource) {
		toSerialize["eEzsignsignatureAttachmentnamesource"] = o.EEzsignsignatureAttachmentnamesource
	}
	if !IsNil(o.EEzsignsignatureConsultationtrigger) {
		toSerialize["eEzsignsignatureConsultationtrigger"] = o.EEzsignsignatureConsultationtrigger
	}
	if !IsNil(o.BEzsignsignatureHandwritten) {
		toSerialize["bEzsignsignatureHandwritten"] = o.BEzsignsignatureHandwritten
	}
	if !IsNil(o.BEzsignsignatureReason) {
		toSerialize["bEzsignsignatureReason"] = o.BEzsignsignatureReason
	}
	if !IsNil(o.BEzsignsignatureRequired) {
		toSerialize["bEzsignsignatureRequired"] = o.BEzsignsignatureRequired
	}
	if !IsNil(o.FkiEzsignfoldersignerassociationIDValidation) {
		toSerialize["fkiEzsignfoldersignerassociationIDValidation"] = o.FkiEzsignfoldersignerassociationIDValidation
	}
	if !IsNil(o.DtEzsignsignatureDate) {
		toSerialize["dtEzsignsignatureDate"] = o.DtEzsignsignatureDate
	}
	if !IsNil(o.IEzsignsignatureattachmentCount) {
		toSerialize["iEzsignsignatureattachmentCount"] = o.IEzsignsignatureattachmentCount
	}
	if !IsNil(o.SEzsignsignatureDescription) {
		toSerialize["sEzsignsignatureDescription"] = o.SEzsignsignatureDescription
	}
	if !IsNil(o.IEzsignsignatureMaxlength) {
		toSerialize["iEzsignsignatureMaxlength"] = o.IEzsignsignatureMaxlength
	}
	if !IsNil(o.EEzsignsignatureTextvalidation) {
		toSerialize["eEzsignsignatureTextvalidation"] = o.EEzsignsignatureTextvalidation
	}
	if !IsNil(o.SEzsignsignatureTextvalidationcustommessage) {
		toSerialize["sEzsignsignatureTextvalidationcustommessage"] = o.SEzsignsignatureTextvalidationcustommessage
	}
	if !IsNil(o.EEzsignsignatureDependencyrequirement) {
		toSerialize["eEzsignsignatureDependencyrequirement"] = o.EEzsignsignatureDependencyrequirement
	}
	if !IsNil(o.SEzsignsignatureDefaultvalue) {
		toSerialize["sEzsignsignatureDefaultvalue"] = o.SEzsignsignatureDefaultvalue
	}
	if !IsNil(o.SEzsignsignatureRegexp) {
		toSerialize["sEzsignsignatureRegexp"] = o.SEzsignsignatureRegexp
	}
	toSerialize["objContactName"] = o.ObjContactName
	if !IsNil(o.ObjContactNameDelegation) {
		toSerialize["objContactNameDelegation"] = o.ObjContactNameDelegation
	}
	if !IsNil(o.ObjSignature) {
		toSerialize["objSignature"] = o.ObjSignature
	}
	return toSerialize, nil
}

func (o *EzsignsignatureResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEzsignsignatureID",
		"fkiEzsigndocumentID",
		"fkiEzsignfoldersignerassociationID",
		"iEzsignpagePagenumber",
		"iEzsignsignatureX",
		"iEzsignsignatureY",
		"iEzsignsignatureStep",
		"eEzsignsignatureType",
		"objContactName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignsignatureResponse := _EzsignsignatureResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignsignatureResponse)

	if err != nil {
		return err
	}

	*o = EzsignsignatureResponse(varEzsignsignatureResponse)

	return err
}

type NullableEzsignsignatureResponse struct {
	value *EzsignsignatureResponse
	isSet bool
}

func (v NullableEzsignsignatureResponse) Get() *EzsignsignatureResponse {
	return v.value
}

func (v *NullableEzsignsignatureResponse) Set(val *EzsignsignatureResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignsignatureResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignsignatureResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignsignatureResponse(val *EzsignsignatureResponse) *NullableEzsignsignatureResponse {
	return &NullableEzsignsignatureResponse{value: val, isSet: true}
}

func (v NullableEzsignsignatureResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignsignatureResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


