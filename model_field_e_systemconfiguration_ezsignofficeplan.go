/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldESystemconfigurationEzsignofficeplan Plan choose of this company for eZsign if Ezsign is paid by the company
type FieldESystemconfigurationEzsignofficeplan string

// List of Field-eSystemconfigurationEzsignofficeplan
const (
	STANDARD FieldESystemconfigurationEzsignofficeplan = "Standard"
	PRO FieldESystemconfigurationEzsignofficeplan = "Pro"
)

// All allowed values of FieldESystemconfigurationEzsignofficeplan enum
var AllowedFieldESystemconfigurationEzsignofficeplanEnumValues = []FieldESystemconfigurationEzsignofficeplan{
	"Standard",
	"Pro",
}

func (v *FieldESystemconfigurationEzsignofficeplan) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldESystemconfigurationEzsignofficeplan(value)
	for _, existing := range AllowedFieldESystemconfigurationEzsignofficeplanEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldESystemconfigurationEzsignofficeplan", value)
}

// NewFieldESystemconfigurationEzsignofficeplanFromValue returns a pointer to a valid FieldESystemconfigurationEzsignofficeplan
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldESystemconfigurationEzsignofficeplanFromValue(v string) (*FieldESystemconfigurationEzsignofficeplan, error) {
	ev := FieldESystemconfigurationEzsignofficeplan(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldESystemconfigurationEzsignofficeplan: valid values are %v", v, AllowedFieldESystemconfigurationEzsignofficeplanEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldESystemconfigurationEzsignofficeplan) IsValid() bool {
	for _, existing := range AllowedFieldESystemconfigurationEzsignofficeplanEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eSystemconfigurationEzsignofficeplan value
func (v FieldESystemconfigurationEzsignofficeplan) Ptr() *FieldESystemconfigurationEzsignofficeplan {
	return &v
}

type NullableFieldESystemconfigurationEzsignofficeplan struct {
	value *FieldESystemconfigurationEzsignofficeplan
	isSet bool
}

func (v NullableFieldESystemconfigurationEzsignofficeplan) Get() *FieldESystemconfigurationEzsignofficeplan {
	return v.value
}

func (v *NullableFieldESystemconfigurationEzsignofficeplan) Set(val *FieldESystemconfigurationEzsignofficeplan) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldESystemconfigurationEzsignofficeplan) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldESystemconfigurationEzsignofficeplan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldESystemconfigurationEzsignofficeplan(val *FieldESystemconfigurationEzsignofficeplan) *NullableFieldESystemconfigurationEzsignofficeplan {
	return &NullableFieldESystemconfigurationEzsignofficeplan{value: val, isSet: true}
}

func (v NullableFieldESystemconfigurationEzsignofficeplan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldESystemconfigurationEzsignofficeplan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

