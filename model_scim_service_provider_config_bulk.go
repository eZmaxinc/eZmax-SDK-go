/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScimServiceProviderConfigBulk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimServiceProviderConfigBulk{}

// ScimServiceProviderConfigBulk A complex type that specifies bulk configuration options.
type ScimServiceProviderConfigBulk struct {
	// A Boolean value specifying whether or not the operation is supported.
	Supported bool `json:"supported"`
	// An integer value specifying the maximum number of operations.
	MaxOperations int32 `json:"maxOperations"`
	// An integer value specifying the maximum payload size in bytes.
	MaxPayloadSize int32 `json:"maxPayloadSize"`
}

type _ScimServiceProviderConfigBulk ScimServiceProviderConfigBulk

// NewScimServiceProviderConfigBulk instantiates a new ScimServiceProviderConfigBulk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimServiceProviderConfigBulk(supported bool, maxOperations int32, maxPayloadSize int32) *ScimServiceProviderConfigBulk {
	this := ScimServiceProviderConfigBulk{}
	this.Supported = supported
	this.MaxOperations = maxOperations
	this.MaxPayloadSize = maxPayloadSize
	return &this
}

// NewScimServiceProviderConfigBulkWithDefaults instantiates a new ScimServiceProviderConfigBulk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimServiceProviderConfigBulkWithDefaults() *ScimServiceProviderConfigBulk {
	this := ScimServiceProviderConfigBulk{}
	return &this
}

// GetSupported returns the Supported field value
func (o *ScimServiceProviderConfigBulk) GetSupported() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Supported
}

// GetSupportedOk returns a tuple with the Supported field value
// and a boolean to check if the value has been set.
func (o *ScimServiceProviderConfigBulk) GetSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Supported, true
}

// SetSupported sets field value
func (o *ScimServiceProviderConfigBulk) SetSupported(v bool) {
	o.Supported = v
}

// GetMaxOperations returns the MaxOperations field value
func (o *ScimServiceProviderConfigBulk) GetMaxOperations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxOperations
}

// GetMaxOperationsOk returns a tuple with the MaxOperations field value
// and a boolean to check if the value has been set.
func (o *ScimServiceProviderConfigBulk) GetMaxOperationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxOperations, true
}

// SetMaxOperations sets field value
func (o *ScimServiceProviderConfigBulk) SetMaxOperations(v int32) {
	o.MaxOperations = v
}

// GetMaxPayloadSize returns the MaxPayloadSize field value
func (o *ScimServiceProviderConfigBulk) GetMaxPayloadSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxPayloadSize
}

// GetMaxPayloadSizeOk returns a tuple with the MaxPayloadSize field value
// and a boolean to check if the value has been set.
func (o *ScimServiceProviderConfigBulk) GetMaxPayloadSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPayloadSize, true
}

// SetMaxPayloadSize sets field value
func (o *ScimServiceProviderConfigBulk) SetMaxPayloadSize(v int32) {
	o.MaxPayloadSize = v
}

func (o ScimServiceProviderConfigBulk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimServiceProviderConfigBulk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["supported"] = o.Supported
	toSerialize["maxOperations"] = o.MaxOperations
	toSerialize["maxPayloadSize"] = o.MaxPayloadSize
	return toSerialize, nil
}

func (o *ScimServiceProviderConfigBulk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"supported",
		"maxOperations",
		"maxPayloadSize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScimServiceProviderConfigBulk := _ScimServiceProviderConfigBulk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScimServiceProviderConfigBulk)

	if err != nil {
		return err
	}

	*o = ScimServiceProviderConfigBulk(varScimServiceProviderConfigBulk)

	return err
}

type NullableScimServiceProviderConfigBulk struct {
	value *ScimServiceProviderConfigBulk
	isSet bool
}

func (v NullableScimServiceProviderConfigBulk) Get() *ScimServiceProviderConfigBulk {
	return v.value
}

func (v *NullableScimServiceProviderConfigBulk) Set(val *ScimServiceProviderConfigBulk) {
	v.value = val
	v.isSet = true
}

func (v NullableScimServiceProviderConfigBulk) IsSet() bool {
	return v.isSet
}

func (v *NullableScimServiceProviderConfigBulk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimServiceProviderConfigBulk(val *ScimServiceProviderConfigBulk) *NullableScimServiceProviderConfigBulk {
	return &NullableScimServiceProviderConfigBulk{value: val, isSet: true}
}

func (v NullableScimServiceProviderConfigBulk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimServiceProviderConfigBulk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


