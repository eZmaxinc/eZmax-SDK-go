/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignfoldertypePdfarequirement The PDF/a requirement of the Ezsignfolder type.  * **None** is for not enforcing the PDF/a * **Declared** is to check the value declared by the document * **Verified** is to verify the document to see the compliance. May takes more time processing the document
type FieldEEzsignfoldertypePdfarequirement string

// List of Field-eEzsignfoldertypePdfarequirement
const (
	NONE FieldEEzsignfoldertypePdfarequirement = "None"
	DECLARED FieldEEzsignfoldertypePdfarequirement = "Declared"
	VERIFIED FieldEEzsignfoldertypePdfarequirement = "Verified"
)

// All allowed values of FieldEEzsignfoldertypePdfarequirement enum
var AllowedFieldEEzsignfoldertypePdfarequirementEnumValues = []FieldEEzsignfoldertypePdfarequirement{
	"None",
	"Declared",
	"Verified",
}

func (v *FieldEEzsignfoldertypePdfarequirement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignfoldertypePdfarequirement(value)
	for _, existing := range AllowedFieldEEzsignfoldertypePdfarequirementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignfoldertypePdfarequirement", value)
}

// NewFieldEEzsignfoldertypePdfarequirementFromValue returns a pointer to a valid FieldEEzsignfoldertypePdfarequirement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignfoldertypePdfarequirementFromValue(v string) (*FieldEEzsignfoldertypePdfarequirement, error) {
	ev := FieldEEzsignfoldertypePdfarequirement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignfoldertypePdfarequirement: valid values are %v", v, AllowedFieldEEzsignfoldertypePdfarequirementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignfoldertypePdfarequirement) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignfoldertypePdfarequirementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignfoldertypePdfarequirement value
func (v FieldEEzsignfoldertypePdfarequirement) Ptr() *FieldEEzsignfoldertypePdfarequirement {
	return &v
}

type NullableFieldEEzsignfoldertypePdfarequirement struct {
	value *FieldEEzsignfoldertypePdfarequirement
	isSet bool
}

func (v NullableFieldEEzsignfoldertypePdfarequirement) Get() *FieldEEzsignfoldertypePdfarequirement {
	return v.value
}

func (v *NullableFieldEEzsignfoldertypePdfarequirement) Set(val *FieldEEzsignfoldertypePdfarequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignfoldertypePdfarequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignfoldertypePdfarequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignfoldertypePdfarequirement(val *FieldEEzsignfoldertypePdfarequirement) *NullableFieldEEzsignfoldertypePdfarequirement {
	return &NullableFieldEEzsignfoldertypePdfarequirement{value: val, isSet: true}
}

func (v NullableFieldEEzsignfoldertypePdfarequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignfoldertypePdfarequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

