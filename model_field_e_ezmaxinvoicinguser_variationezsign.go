/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzmaxinvoicinguserVariationezsign The variation type for eZsign
type FieldEEzmaxinvoicinguserVariationezsign string

// List of Field-eEzmaxinvoicinguserVariationezsign
const (
	CHARGE FieldEEzmaxinvoicinguserVariationezsign = "Charge"
	REFUND FieldEEzmaxinvoicinguserVariationezsign = "Refund"
	SAME FieldEEzmaxinvoicinguserVariationezsign = "Same"
)

// All allowed values of FieldEEzmaxinvoicinguserVariationezsign enum
var AllowedFieldEEzmaxinvoicinguserVariationezsignEnumValues = []FieldEEzmaxinvoicinguserVariationezsign{
	"Charge",
	"Refund",
	"Same",
}

func (v *FieldEEzmaxinvoicinguserVariationezsign) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzmaxinvoicinguserVariationezsign(value)
	for _, existing := range AllowedFieldEEzmaxinvoicinguserVariationezsignEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzmaxinvoicinguserVariationezsign", value)
}

// NewFieldEEzmaxinvoicinguserVariationezsignFromValue returns a pointer to a valid FieldEEzmaxinvoicinguserVariationezsign
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzmaxinvoicinguserVariationezsignFromValue(v string) (*FieldEEzmaxinvoicinguserVariationezsign, error) {
	ev := FieldEEzmaxinvoicinguserVariationezsign(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzmaxinvoicinguserVariationezsign: valid values are %v", v, AllowedFieldEEzmaxinvoicinguserVariationezsignEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzmaxinvoicinguserVariationezsign) IsValid() bool {
	for _, existing := range AllowedFieldEEzmaxinvoicinguserVariationezsignEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzmaxinvoicinguserVariationezsign value
func (v FieldEEzmaxinvoicinguserVariationezsign) Ptr() *FieldEEzmaxinvoicinguserVariationezsign {
	return &v
}

type NullableFieldEEzmaxinvoicinguserVariationezsign struct {
	value *FieldEEzmaxinvoicinguserVariationezsign
	isSet bool
}

func (v NullableFieldEEzmaxinvoicinguserVariationezsign) Get() *FieldEEzmaxinvoicinguserVariationezsign {
	return v.value
}

func (v *NullableFieldEEzmaxinvoicinguserVariationezsign) Set(val *FieldEEzmaxinvoicinguserVariationezsign) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzmaxinvoicinguserVariationezsign) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzmaxinvoicinguserVariationezsign) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzmaxinvoicinguserVariationezsign(val *FieldEEzmaxinvoicinguserVariationezsign) *NullableFieldEEzmaxinvoicinguserVariationezsign {
	return &NullableFieldEEzmaxinvoicinguserVariationezsign{value: val, isSet: true}
}

func (v NullableFieldEEzmaxinvoicinguserVariationezsign) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzmaxinvoicinguserVariationezsign) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

