/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// EnumReportdataType Type of data in column
type EnumReportdataType string

// List of Enum-ReportdataType
const (
	DATE EnumReportdataType = "Date"
	MONEY EnumReportdataType = "Money"
	NUMBER EnumReportdataType = "Number"
	PERCENTAGE EnumReportdataType = "Percentage"
	PERIOD EnumReportdataType = "Period"
	STRING EnumReportdataType = "String"
)

// All allowed values of EnumReportdataType enum
var AllowedEnumReportdataTypeEnumValues = []EnumReportdataType{
	"Date",
	"Money",
	"Number",
	"Percentage",
	"Period",
	"String",
}

func (v *EnumReportdataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumReportdataType(value)
	for _, existing := range AllowedEnumReportdataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumReportdataType", value)
}

// NewEnumReportdataTypeFromValue returns a pointer to a valid EnumReportdataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumReportdataTypeFromValue(v string) (*EnumReportdataType, error) {
	ev := EnumReportdataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumReportdataType: valid values are %v", v, AllowedEnumReportdataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumReportdataType) IsValid() bool {
	for _, existing := range AllowedEnumReportdataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum-ReportdataType value
func (v EnumReportdataType) Ptr() *EnumReportdataType {
	return &v
}

type NullableEnumReportdataType struct {
	value *EnumReportdataType
	isSet bool
}

func (v NullableEnumReportdataType) Get() *EnumReportdataType {
	return v.value
}

func (v *NullableEnumReportdataType) Set(val *EnumReportdataType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumReportdataType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumReportdataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumReportdataType(val *EnumReportdataType) *NullableEnumReportdataType {
	return &NullableEnumReportdataType{value: val, isSet: true}
}

func (v NullableEnumReportdataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumReportdataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

