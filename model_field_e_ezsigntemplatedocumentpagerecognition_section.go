/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatedocumentpagerecognitionSection The section of the Ezsigntemplatedocumentpagerecognition
type FieldEEzsigntemplatedocumentpagerecognitionSection string

// List of Field-eEzsigntemplatedocumentpagerecognitionSection
const (
	FIRST_LINE FieldEEzsigntemplatedocumentpagerecognitionSection = "FirstLine"
	LAST_LINE FieldEEzsigntemplatedocumentpagerecognitionSection = "LastLine"
	PAGE FieldEEzsigntemplatedocumentpagerecognitionSection = "Page"
	REGION FieldEEzsigntemplatedocumentpagerecognitionSection = "Region"
)

// All allowed values of FieldEEzsigntemplatedocumentpagerecognitionSection enum
var AllowedFieldEEzsigntemplatedocumentpagerecognitionSectionEnumValues = []FieldEEzsigntemplatedocumentpagerecognitionSection{
	"FirstLine",
	"LastLine",
	"Page",
	"Region",
}

func (v *FieldEEzsigntemplatedocumentpagerecognitionSection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatedocumentpagerecognitionSection(value)
	for _, existing := range AllowedFieldEEzsigntemplatedocumentpagerecognitionSectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatedocumentpagerecognitionSection", value)
}

// NewFieldEEzsigntemplatedocumentpagerecognitionSectionFromValue returns a pointer to a valid FieldEEzsigntemplatedocumentpagerecognitionSection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatedocumentpagerecognitionSectionFromValue(v string) (*FieldEEzsigntemplatedocumentpagerecognitionSection, error) {
	ev := FieldEEzsigntemplatedocumentpagerecognitionSection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatedocumentpagerecognitionSection: valid values are %v", v, AllowedFieldEEzsigntemplatedocumentpagerecognitionSectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatedocumentpagerecognitionSection) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatedocumentpagerecognitionSectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatedocumentpagerecognitionSection value
func (v FieldEEzsigntemplatedocumentpagerecognitionSection) Ptr() *FieldEEzsigntemplatedocumentpagerecognitionSection {
	return &v
}

type NullableFieldEEzsigntemplatedocumentpagerecognitionSection struct {
	value *FieldEEzsigntemplatedocumentpagerecognitionSection
	isSet bool
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionSection) Get() *FieldEEzsigntemplatedocumentpagerecognitionSection {
	return v.value
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionSection) Set(val *FieldEEzsigntemplatedocumentpagerecognitionSection) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionSection) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionSection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatedocumentpagerecognitionSection(val *FieldEEzsigntemplatedocumentpagerecognitionSection) *NullableFieldEEzsigntemplatedocumentpagerecognitionSection {
	return &NullableFieldEEzsigntemplatedocumentpagerecognitionSection{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatedocumentpagerecognitionSection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatedocumentpagerecognitionSection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

