/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatesignatureTooltipposition The location of the tooltip relative to the Ezsigntemplatesignature's location.
type FieldEEzsigntemplatesignatureTooltipposition string

// List of Field-eEzsigntemplatesignatureTooltipposition
const (
	TOP_LEFT FieldEEzsigntemplatesignatureTooltipposition = "TopLeft"
	TOP_CENTER FieldEEzsigntemplatesignatureTooltipposition = "TopCenter"
	TOP_RIGHT FieldEEzsigntemplatesignatureTooltipposition = "TopRight"
	MIDDLE_LEFT FieldEEzsigntemplatesignatureTooltipposition = "MiddleLeft"
	MIDDLE_RIGHT FieldEEzsigntemplatesignatureTooltipposition = "MiddleRight"
	BOTTOM_LEFT FieldEEzsigntemplatesignatureTooltipposition = "BottomLeft"
	BOTTOM_CENTER FieldEEzsigntemplatesignatureTooltipposition = "BottomCenter"
	BOTTOM_RIGHT FieldEEzsigntemplatesignatureTooltipposition = "BottomRight"
)

// All allowed values of FieldEEzsigntemplatesignatureTooltipposition enum
var AllowedFieldEEzsigntemplatesignatureTooltippositionEnumValues = []FieldEEzsigntemplatesignatureTooltipposition{
	"TopLeft",
	"TopCenter",
	"TopRight",
	"MiddleLeft",
	"MiddleRight",
	"BottomLeft",
	"BottomCenter",
	"BottomRight",
}

func (v *FieldEEzsigntemplatesignatureTooltipposition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatesignatureTooltipposition(value)
	for _, existing := range AllowedFieldEEzsigntemplatesignatureTooltippositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatesignatureTooltipposition", value)
}

// NewFieldEEzsigntemplatesignatureTooltippositionFromValue returns a pointer to a valid FieldEEzsigntemplatesignatureTooltipposition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatesignatureTooltippositionFromValue(v string) (*FieldEEzsigntemplatesignatureTooltipposition, error) {
	ev := FieldEEzsigntemplatesignatureTooltipposition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatesignatureTooltipposition: valid values are %v", v, AllowedFieldEEzsigntemplatesignatureTooltippositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatesignatureTooltipposition) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatesignatureTooltippositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatesignatureTooltipposition value
func (v FieldEEzsigntemplatesignatureTooltipposition) Ptr() *FieldEEzsigntemplatesignatureTooltipposition {
	return &v
}

type NullableFieldEEzsigntemplatesignatureTooltipposition struct {
	value *FieldEEzsigntemplatesignatureTooltipposition
	isSet bool
}

func (v NullableFieldEEzsigntemplatesignatureTooltipposition) Get() *FieldEEzsigntemplatesignatureTooltipposition {
	return v.value
}

func (v *NullableFieldEEzsigntemplatesignatureTooltipposition) Set(val *FieldEEzsigntemplatesignatureTooltipposition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatesignatureTooltipposition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatesignatureTooltipposition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatesignatureTooltipposition(val *FieldEEzsigntemplatesignatureTooltipposition) *NullableFieldEEzsigntemplatesignatureTooltipposition {
	return &NullableFieldEEzsigntemplatesignatureTooltipposition{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatesignatureTooltipposition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatesignatureTooltipposition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

