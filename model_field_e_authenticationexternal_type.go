/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEAuthenticationexternalType The type of the Authenticationexternal
type FieldEAuthenticationexternalType string

// List of Field-eAuthenticationexternalType
const (
	SALESFORCE FieldEAuthenticationexternalType = "Salesforce"
	SALESFORCE_SANDBOX FieldEAuthenticationexternalType = "SalesforceSandbox"
)

// All allowed values of FieldEAuthenticationexternalType enum
var AllowedFieldEAuthenticationexternalTypeEnumValues = []FieldEAuthenticationexternalType{
	"Salesforce",
	"SalesforceSandbox",
}

func (v *FieldEAuthenticationexternalType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEAuthenticationexternalType(value)
	for _, existing := range AllowedFieldEAuthenticationexternalTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEAuthenticationexternalType", value)
}

// NewFieldEAuthenticationexternalTypeFromValue returns a pointer to a valid FieldEAuthenticationexternalType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEAuthenticationexternalTypeFromValue(v string) (*FieldEAuthenticationexternalType, error) {
	ev := FieldEAuthenticationexternalType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEAuthenticationexternalType: valid values are %v", v, AllowedFieldEAuthenticationexternalTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEAuthenticationexternalType) IsValid() bool {
	for _, existing := range AllowedFieldEAuthenticationexternalTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eAuthenticationexternalType value
func (v FieldEAuthenticationexternalType) Ptr() *FieldEAuthenticationexternalType {
	return &v
}

type NullableFieldEAuthenticationexternalType struct {
	value *FieldEAuthenticationexternalType
	isSet bool
}

func (v NullableFieldEAuthenticationexternalType) Get() *FieldEAuthenticationexternalType {
	return v.value
}

func (v *NullableFieldEAuthenticationexternalType) Set(val *FieldEAuthenticationexternalType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEAuthenticationexternalType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEAuthenticationexternalType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEAuthenticationexternalType(val *FieldEAuthenticationexternalType) *NullableFieldEAuthenticationexternalType {
	return &NullableFieldEAuthenticationexternalType{value: val, isSet: true}
}

func (v NullableFieldEAuthenticationexternalType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEAuthenticationexternalType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

