/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignsigningreasonRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignsigningreasonRequest{}

// EzsignsigningreasonRequest A Ezsignsigningreason Object
type EzsignsigningreasonRequest struct {
	// The unique ID of the Ezsignsigningreason
	PkiEzsignsigningreasonID *int32 `json:"pkiEzsignsigningreasonID,omitempty"`
	ObjEzsignsigningreasonDescription MultilingualEzsignsigningreasonDescription `json:"objEzsignsigningreasonDescription"`
	// Whether the ezsignsigningreason is active or not
	BEzsignsigningreasonIsactive bool `json:"bEzsignsigningreasonIsactive"`
}

type _EzsignsigningreasonRequest EzsignsigningreasonRequest

// NewEzsignsigningreasonRequest instantiates a new EzsignsigningreasonRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignsigningreasonRequest(objEzsignsigningreasonDescription MultilingualEzsignsigningreasonDescription, bEzsignsigningreasonIsactive bool) *EzsignsigningreasonRequest {
	this := EzsignsigningreasonRequest{}
	this.ObjEzsignsigningreasonDescription = objEzsignsigningreasonDescription
	this.BEzsignsigningreasonIsactive = bEzsignsigningreasonIsactive
	return &this
}

// NewEzsignsigningreasonRequestWithDefaults instantiates a new EzsignsigningreasonRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignsigningreasonRequestWithDefaults() *EzsignsigningreasonRequest {
	this := EzsignsigningreasonRequest{}
	return &this
}

// GetPkiEzsignsigningreasonID returns the PkiEzsignsigningreasonID field value if set, zero value otherwise.
func (o *EzsignsigningreasonRequest) GetPkiEzsignsigningreasonID() int32 {
	if o == nil || IsNil(o.PkiEzsignsigningreasonID) {
		var ret int32
		return ret
	}
	return *o.PkiEzsignsigningreasonID
}

// GetPkiEzsignsigningreasonIDOk returns a tuple with the PkiEzsignsigningreasonID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignsigningreasonRequest) GetPkiEzsignsigningreasonIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiEzsignsigningreasonID) {
		return nil, false
	}
	return o.PkiEzsignsigningreasonID, true
}

// HasPkiEzsignsigningreasonID returns a boolean if a field has been set.
func (o *EzsignsigningreasonRequest) HasPkiEzsignsigningreasonID() bool {
	if o != nil && !IsNil(o.PkiEzsignsigningreasonID) {
		return true
	}

	return false
}

// SetPkiEzsignsigningreasonID gets a reference to the given int32 and assigns it to the PkiEzsignsigningreasonID field.
func (o *EzsignsigningreasonRequest) SetPkiEzsignsigningreasonID(v int32) {
	o.PkiEzsignsigningreasonID = &v
}

// GetObjEzsignsigningreasonDescription returns the ObjEzsignsigningreasonDescription field value
func (o *EzsignsigningreasonRequest) GetObjEzsignsigningreasonDescription() MultilingualEzsignsigningreasonDescription {
	if o == nil {
		var ret MultilingualEzsignsigningreasonDescription
		return ret
	}

	return o.ObjEzsignsigningreasonDescription
}

// GetObjEzsignsigningreasonDescriptionOk returns a tuple with the ObjEzsignsigningreasonDescription field value
// and a boolean to check if the value has been set.
func (o *EzsignsigningreasonRequest) GetObjEzsignsigningreasonDescriptionOk() (*MultilingualEzsignsigningreasonDescription, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjEzsignsigningreasonDescription, true
}

// SetObjEzsignsigningreasonDescription sets field value
func (o *EzsignsigningreasonRequest) SetObjEzsignsigningreasonDescription(v MultilingualEzsignsigningreasonDescription) {
	o.ObjEzsignsigningreasonDescription = v
}

// GetBEzsignsigningreasonIsactive returns the BEzsignsigningreasonIsactive field value
func (o *EzsignsigningreasonRequest) GetBEzsignsigningreasonIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BEzsignsigningreasonIsactive
}

// GetBEzsignsigningreasonIsactiveOk returns a tuple with the BEzsignsigningreasonIsactive field value
// and a boolean to check if the value has been set.
func (o *EzsignsigningreasonRequest) GetBEzsignsigningreasonIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BEzsignsigningreasonIsactive, true
}

// SetBEzsignsigningreasonIsactive sets field value
func (o *EzsignsigningreasonRequest) SetBEzsignsigningreasonIsactive(v bool) {
	o.BEzsignsigningreasonIsactive = v
}

func (o EzsignsigningreasonRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignsigningreasonRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiEzsignsigningreasonID) {
		toSerialize["pkiEzsignsigningreasonID"] = o.PkiEzsignsigningreasonID
	}
	toSerialize["objEzsignsigningreasonDescription"] = o.ObjEzsignsigningreasonDescription
	toSerialize["bEzsignsigningreasonIsactive"] = o.BEzsignsigningreasonIsactive
	return toSerialize, nil
}

func (o *EzsignsigningreasonRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objEzsignsigningreasonDescription",
		"bEzsignsigningreasonIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignsigningreasonRequest := _EzsignsigningreasonRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignsigningreasonRequest)

	if err != nil {
		return err
	}

	*o = EzsignsigningreasonRequest(varEzsignsigningreasonRequest)

	return err
}

type NullableEzsignsigningreasonRequest struct {
	value *EzsignsigningreasonRequest
	isSet bool
}

func (v NullableEzsignsigningreasonRequest) Get() *EzsignsigningreasonRequest {
	return v.value
}

func (v *NullableEzsignsigningreasonRequest) Set(val *EzsignsigningreasonRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignsigningreasonRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignsigningreasonRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignsigningreasonRequest(val *EzsignsigningreasonRequest) *NullableEzsignsigningreasonRequest {
	return &NullableEzsignsigningreasonRequest{value: val, isSet: true}
}

func (v NullableEzsignsigningreasonRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignsigningreasonRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


