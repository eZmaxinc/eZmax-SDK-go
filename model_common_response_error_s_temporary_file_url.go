/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonResponseErrorSTemporaryFileUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonResponseErrorSTemporaryFileUrl{}

// CommonResponseErrorSTemporaryFileUrl Generic Error Message
type CommonResponseErrorSTemporaryFileUrl struct {
	CommonResponseError
	// The Temporary File Url of the document that was uploaded. That url can be reused instead of uploading the file again.
	STemporaryFileUrl *string `json:"sTemporaryFileUrl,omitempty" validate:"regexp=^(https|http):\\/\\/[^\\\\s\\/$.?#].[^\\\\s]*$"`
}

type _CommonResponseErrorSTemporaryFileUrl CommonResponseErrorSTemporaryFileUrl

// NewCommonResponseErrorSTemporaryFileUrl instantiates a new CommonResponseErrorSTemporaryFileUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonResponseErrorSTemporaryFileUrl(sErrorMessage string, eErrorCode FieldEErrorCode) *CommonResponseErrorSTemporaryFileUrl {
	this := CommonResponseErrorSTemporaryFileUrl{}
	this.SErrorMessage = sErrorMessage
	this.EErrorCode = eErrorCode
	return &this
}

// NewCommonResponseErrorSTemporaryFileUrlWithDefaults instantiates a new CommonResponseErrorSTemporaryFileUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonResponseErrorSTemporaryFileUrlWithDefaults() *CommonResponseErrorSTemporaryFileUrl {
	this := CommonResponseErrorSTemporaryFileUrl{}
	return &this
}

// GetSTemporaryFileUrl returns the STemporaryFileUrl field value if set, zero value otherwise.
func (o *CommonResponseErrorSTemporaryFileUrl) GetSTemporaryFileUrl() string {
	if o == nil || IsNil(o.STemporaryFileUrl) {
		var ret string
		return ret
	}
	return *o.STemporaryFileUrl
}

// GetSTemporaryFileUrlOk returns a tuple with the STemporaryFileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonResponseErrorSTemporaryFileUrl) GetSTemporaryFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.STemporaryFileUrl) {
		return nil, false
	}
	return o.STemporaryFileUrl, true
}

// HasSTemporaryFileUrl returns a boolean if a field has been set.
func (o *CommonResponseErrorSTemporaryFileUrl) HasSTemporaryFileUrl() bool {
	if o != nil && !IsNil(o.STemporaryFileUrl) {
		return true
	}

	return false
}

// SetSTemporaryFileUrl gets a reference to the given string and assigns it to the STemporaryFileUrl field.
func (o *CommonResponseErrorSTemporaryFileUrl) SetSTemporaryFileUrl(v string) {
	o.STemporaryFileUrl = &v
}

func (o CommonResponseErrorSTemporaryFileUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonResponseErrorSTemporaryFileUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.STemporaryFileUrl) {
		toSerialize["sTemporaryFileUrl"] = o.STemporaryFileUrl
	}
	return toSerialize, nil
}

func (o *CommonResponseErrorSTemporaryFileUrl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sErrorMessage",
		"eErrorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonResponseErrorSTemporaryFileUrl := _CommonResponseErrorSTemporaryFileUrl{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonResponseErrorSTemporaryFileUrl)

	if err != nil {
		return err
	}

	*o = CommonResponseErrorSTemporaryFileUrl(varCommonResponseErrorSTemporaryFileUrl)

	return err
}

type NullableCommonResponseErrorSTemporaryFileUrl struct {
	value *CommonResponseErrorSTemporaryFileUrl
	isSet bool
}

func (v NullableCommonResponseErrorSTemporaryFileUrl) Get() *CommonResponseErrorSTemporaryFileUrl {
	return v.value
}

func (v *NullableCommonResponseErrorSTemporaryFileUrl) Set(val *CommonResponseErrorSTemporaryFileUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonResponseErrorSTemporaryFileUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonResponseErrorSTemporaryFileUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonResponseErrorSTemporaryFileUrl(val *CommonResponseErrorSTemporaryFileUrl) *NullableCommonResponseErrorSTemporaryFileUrl {
	return &NullableCommonResponseErrorSTemporaryFileUrl{value: val, isSet: true}
}

func (v NullableCommonResponseErrorSTemporaryFileUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonResponseErrorSTemporaryFileUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


