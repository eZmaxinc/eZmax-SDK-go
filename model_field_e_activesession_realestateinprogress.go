/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEActivesessionRealestateinprogress Clone rights for active real estate folders
type FieldEActivesessionRealestateinprogress string

// List of Field-eActivesessionRealestateinprogress
const (
	NO FieldEActivesessionRealestateinprogress = "No"
	READ FieldEActivesessionRealestateinprogress = "Read"
	MODIFY FieldEActivesessionRealestateinprogress = "Modify"
	CREATE FieldEActivesessionRealestateinprogress = "Create"
)

// All allowed values of FieldEActivesessionRealestateinprogress enum
var AllowedFieldEActivesessionRealestateinprogressEnumValues = []FieldEActivesessionRealestateinprogress{
	"No",
	"Read",
	"Modify",
	"Create",
}

func (v *FieldEActivesessionRealestateinprogress) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEActivesessionRealestateinprogress(value)
	for _, existing := range AllowedFieldEActivesessionRealestateinprogressEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEActivesessionRealestateinprogress", value)
}

// NewFieldEActivesessionRealestateinprogressFromValue returns a pointer to a valid FieldEActivesessionRealestateinprogress
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEActivesessionRealestateinprogressFromValue(v string) (*FieldEActivesessionRealestateinprogress, error) {
	ev := FieldEActivesessionRealestateinprogress(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEActivesessionRealestateinprogress: valid values are %v", v, AllowedFieldEActivesessionRealestateinprogressEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEActivesessionRealestateinprogress) IsValid() bool {
	for _, existing := range AllowedFieldEActivesessionRealestateinprogressEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eActivesessionRealestateinprogress value
func (v FieldEActivesessionRealestateinprogress) Ptr() *FieldEActivesessionRealestateinprogress {
	return &v
}

type NullableFieldEActivesessionRealestateinprogress struct {
	value *FieldEActivesessionRealestateinprogress
	isSet bool
}

func (v NullableFieldEActivesessionRealestateinprogress) Get() *FieldEActivesessionRealestateinprogress {
	return v.value
}

func (v *NullableFieldEActivesessionRealestateinprogress) Set(val *FieldEActivesessionRealestateinprogress) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEActivesessionRealestateinprogress) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEActivesessionRealestateinprogress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEActivesessionRealestateinprogress(val *FieldEActivesessionRealestateinprogress) *NullableFieldEActivesessionRealestateinprogress {
	return &NullableFieldEActivesessionRealestateinprogress{value: val, isSet: true}
}

func (v NullableFieldEActivesessionRealestateinprogress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEActivesessionRealestateinprogress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

