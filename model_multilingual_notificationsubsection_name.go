/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the MultilingualNotificationsubsectionName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultilingualNotificationsubsectionName{}

// MultilingualNotificationsubsectionName Name of the Notificationsubsection
type MultilingualNotificationsubsectionName struct {
	// The name of the Notificationsubsection in French
	SNotificationsubsectionName1 *string `json:"sNotificationsubsectionName1,omitempty"`
	// The name of the Notificationsubsection in English
	SNotificationsubsectionName2 *string `json:"sNotificationsubsectionName2,omitempty"`
}

// NewMultilingualNotificationsubsectionName instantiates a new MultilingualNotificationsubsectionName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultilingualNotificationsubsectionName() *MultilingualNotificationsubsectionName {
	this := MultilingualNotificationsubsectionName{}
	return &this
}

// NewMultilingualNotificationsubsectionNameWithDefaults instantiates a new MultilingualNotificationsubsectionName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultilingualNotificationsubsectionNameWithDefaults() *MultilingualNotificationsubsectionName {
	this := MultilingualNotificationsubsectionName{}
	return &this
}

// GetSNotificationsubsectionName1 returns the SNotificationsubsectionName1 field value if set, zero value otherwise.
func (o *MultilingualNotificationsubsectionName) GetSNotificationsubsectionName1() string {
	if o == nil || IsNil(o.SNotificationsubsectionName1) {
		var ret string
		return ret
	}
	return *o.SNotificationsubsectionName1
}

// GetSNotificationsubsectionName1Ok returns a tuple with the SNotificationsubsectionName1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualNotificationsubsectionName) GetSNotificationsubsectionName1Ok() (*string, bool) {
	if o == nil || IsNil(o.SNotificationsubsectionName1) {
		return nil, false
	}
	return o.SNotificationsubsectionName1, true
}

// HasSNotificationsubsectionName1 returns a boolean if a field has been set.
func (o *MultilingualNotificationsubsectionName) HasSNotificationsubsectionName1() bool {
	if o != nil && !IsNil(o.SNotificationsubsectionName1) {
		return true
	}

	return false
}

// SetSNotificationsubsectionName1 gets a reference to the given string and assigns it to the SNotificationsubsectionName1 field.
func (o *MultilingualNotificationsubsectionName) SetSNotificationsubsectionName1(v string) {
	o.SNotificationsubsectionName1 = &v
}

// GetSNotificationsubsectionName2 returns the SNotificationsubsectionName2 field value if set, zero value otherwise.
func (o *MultilingualNotificationsubsectionName) GetSNotificationsubsectionName2() string {
	if o == nil || IsNil(o.SNotificationsubsectionName2) {
		var ret string
		return ret
	}
	return *o.SNotificationsubsectionName2
}

// GetSNotificationsubsectionName2Ok returns a tuple with the SNotificationsubsectionName2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualNotificationsubsectionName) GetSNotificationsubsectionName2Ok() (*string, bool) {
	if o == nil || IsNil(o.SNotificationsubsectionName2) {
		return nil, false
	}
	return o.SNotificationsubsectionName2, true
}

// HasSNotificationsubsectionName2 returns a boolean if a field has been set.
func (o *MultilingualNotificationsubsectionName) HasSNotificationsubsectionName2() bool {
	if o != nil && !IsNil(o.SNotificationsubsectionName2) {
		return true
	}

	return false
}

// SetSNotificationsubsectionName2 gets a reference to the given string and assigns it to the SNotificationsubsectionName2 field.
func (o *MultilingualNotificationsubsectionName) SetSNotificationsubsectionName2(v string) {
	o.SNotificationsubsectionName2 = &v
}

func (o MultilingualNotificationsubsectionName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultilingualNotificationsubsectionName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SNotificationsubsectionName1) {
		toSerialize["sNotificationsubsectionName1"] = o.SNotificationsubsectionName1
	}
	if !IsNil(o.SNotificationsubsectionName2) {
		toSerialize["sNotificationsubsectionName2"] = o.SNotificationsubsectionName2
	}
	return toSerialize, nil
}

type NullableMultilingualNotificationsubsectionName struct {
	value *MultilingualNotificationsubsectionName
	isSet bool
}

func (v NullableMultilingualNotificationsubsectionName) Get() *MultilingualNotificationsubsectionName {
	return v.value
}

func (v *NullableMultilingualNotificationsubsectionName) Set(val *MultilingualNotificationsubsectionName) {
	v.value = val
	v.isSet = true
}

func (v NullableMultilingualNotificationsubsectionName) IsSet() bool {
	return v.isSet
}

func (v *NullableMultilingualNotificationsubsectionName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultilingualNotificationsubsectionName(val *MultilingualNotificationsubsectionName) *NullableMultilingualNotificationsubsectionName {
	return &NullableMultilingualNotificationsubsectionName{value: val, isSet: true}
}

func (v NullableMultilingualNotificationsubsectionName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultilingualNotificationsubsectionName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


