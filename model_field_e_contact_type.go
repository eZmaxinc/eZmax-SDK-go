/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEContactType The type of the Contact
type FieldEContactType string

// List of Field-eContactType
const (
	AGENT FieldEContactType = "Agent"
	ASSISTANT FieldEContactType = "Assistant"
	BANK_ACCOUNT FieldEContactType = "BankAccount"
	BORROWER FieldEContactType = "Borrower"
	BUYER FieldEContactType = "Buyer"
	COMPANY FieldEContactType = "Company"
	CONTRACT_CREATOR FieldEContactType = "ContractCreator"
	CREDITCARDMERCHANT FieldEContactType = "Creditcardmerchant"
	CUSTOMER FieldEContactType = "Customer"
	DEPOSITRECEIPT FieldEContactType = "Depositreceipt"
	EMPLOYEE FieldEContactType = "Employee"
	EXTERNAL_BROKER FieldEContactType = "ExternalBroker"
	EZSIGN_SIGNER FieldEContactType = "EzsignSigner"
	EZSIGN_USER FieldEContactType = "EzsignUser"
	EZCOM_AGENT FieldEContactType = "EzcomAgent"
	EZCOM_APPROVER FieldEContactType = "EzcomApprover"
	FINANCIAL_INSTITUTION FieldEContactType = "FinancialInstitution"
	FRANCHISE_BROKER FieldEContactType = "FranchiseBroker"
	FRANCHISEFRANCHISECONTACT FieldEContactType = "Franchisefranchisecontact"
	FRANCHISEFRANCHISESIGNATORY FieldEContactType = "Franchisefranchisesignatory"
	FRANCHISE_OFFICE_BROKER FieldEContactType = "FranchiseOfficeBroker"
	FRANCHISE_COMPANY FieldEContactType = "FranchiseCompany"
	FRANCHISE_OWNER FieldEContactType = "FranchiseOwner"
	LEAD FieldEContactType = "Lead"
	MARKETING_CAMPAIGN_SAMPLE FieldEContactType = "MarketingCampaignSample"
	NOTARY FieldEContactType = "Notary"
	PAYER FieldEContactType = "Payer"
	PETOWNER FieldEContactType = "Petowner"
	PRIVATE_TO FieldEContactType = "PrivateTo"
	REWARD_MEMBER FieldEContactType = "RewardMember"
	REWARD_REPRESENTATIVE FieldEContactType = "RewardRepresentative"
	SELLER FieldEContactType = "Seller"
	SHARED FieldEContactType = "Shared"
	SUPPLIER FieldEContactType = "Supplier"
	SURVEY FieldEContactType = "Survey"
	INSPECTOR FieldEContactType = "Inspector"
)

// All allowed values of FieldEContactType enum
var AllowedFieldEContactTypeEnumValues = []FieldEContactType{
	"Agent",
	"Assistant",
	"BankAccount",
	"Borrower",
	"Buyer",
	"Company",
	"ContractCreator",
	"Creditcardmerchant",
	"Customer",
	"Depositreceipt",
	"Employee",
	"ExternalBroker",
	"EzsignSigner",
	"EzsignUser",
	"EzcomAgent",
	"EzcomApprover",
	"FinancialInstitution",
	"FranchiseBroker",
	"Franchisefranchisecontact",
	"Franchisefranchisesignatory",
	"FranchiseOfficeBroker",
	"FranchiseCompany",
	"FranchiseOwner",
	"Lead",
	"MarketingCampaignSample",
	"Notary",
	"Payer",
	"Petowner",
	"PrivateTo",
	"RewardMember",
	"RewardRepresentative",
	"Seller",
	"Shared",
	"Supplier",
	"Survey",
	"Inspector",
}

func (v *FieldEContactType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEContactType(value)
	for _, existing := range AllowedFieldEContactTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEContactType", value)
}

// NewFieldEContactTypeFromValue returns a pointer to a valid FieldEContactType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEContactTypeFromValue(v string) (*FieldEContactType, error) {
	ev := FieldEContactType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEContactType: valid values are %v", v, AllowedFieldEContactTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEContactType) IsValid() bool {
	for _, existing := range AllowedFieldEContactTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eContactType value
func (v FieldEContactType) Ptr() *FieldEContactType {
	return &v
}

type NullableFieldEContactType struct {
	value *FieldEContactType
	isSet bool
}

func (v NullableFieldEContactType) Get() *FieldEContactType {
	return v.value
}

func (v *NullableFieldEContactType) Set(val *FieldEContactType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEContactType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEContactType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEContactType(val *FieldEContactType) *NullableFieldEContactType {
	return &NullableFieldEContactType{value: val, isSet: true}
}

func (v NullableFieldEContactType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEContactType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

