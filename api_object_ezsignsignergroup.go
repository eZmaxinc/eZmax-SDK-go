/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ObjectEzsignsignergroupAPIService ObjectEzsignsignergroupAPI service
type ObjectEzsignsignergroupAPIService service

type ApiEzsignsignergroupCreateObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	ezsignsignergroupCreateObjectV1Request *EzsignsignergroupCreateObjectV1Request
}

func (r ApiEzsignsignergroupCreateObjectV1Request) EzsignsignergroupCreateObjectV1Request(ezsignsignergroupCreateObjectV1Request EzsignsignergroupCreateObjectV1Request) ApiEzsignsignergroupCreateObjectV1Request {
	r.ezsignsignergroupCreateObjectV1Request = &ezsignsignergroupCreateObjectV1Request
	return r
}

func (r ApiEzsignsignergroupCreateObjectV1Request) Execute() (*EzsignsignergroupCreateObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupCreateObjectV1Execute(r)
}

/*
EzsignsignergroupCreateObjectV1 Create a new Ezsignsignergroup

The endpoint allows to create one or many elements at once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEzsignsignergroupCreateObjectV1Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupCreateObjectV1(ctx context.Context) ApiEzsignsignergroupCreateObjectV1Request {
	return ApiEzsignsignergroupCreateObjectV1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EzsignsignergroupCreateObjectV1Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupCreateObjectV1Execute(r ApiEzsignsignergroupCreateObjectV1Request) (*EzsignsignergroupCreateObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupCreateObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupCreateObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignsignergroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ezsignsignergroupCreateObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsignsignergroupCreateObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsignsignergroupCreateObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignsignergroupDeleteObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	pkiEzsignsignergroupID int32
}

func (r ApiEzsignsignergroupDeleteObjectV1Request) Execute() (*EzsignsignergroupDeleteObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupDeleteObjectV1Execute(r)
}

/*
EzsignsignergroupDeleteObjectV1 Delete an existing Ezsignsignergroup



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
 @return ApiEzsignsignergroupDeleteObjectV1Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupDeleteObjectV1(ctx context.Context, pkiEzsignsignergroupID int32) ApiEzsignsignergroupDeleteObjectV1Request {
	return ApiEzsignsignergroupDeleteObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignsignergroupID: pkiEzsignsignergroupID,
	}
}

// Execute executes the request
//  @return EzsignsignergroupDeleteObjectV1Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupDeleteObjectV1Execute(r ApiEzsignsignergroupDeleteObjectV1Request) (*EzsignsignergroupDeleteObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupDeleteObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupDeleteObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignsignergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignsignergroupID, "pkiEzsignsignergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignsignergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be greater than 0")
	}
	if r.pkiEzsignsignergroupID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	pkiEzsignsignergroupID int32
	ezsignsignergroupEditEzsignsignergroupmembershipsV1Request *EzsignsignergroupEditEzsignsignergroupmembershipsV1Request
}

func (r ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request) EzsignsignergroupEditEzsignsignergroupmembershipsV1Request(ezsignsignergroupEditEzsignsignergroupmembershipsV1Request EzsignsignergroupEditEzsignsignergroupmembershipsV1Request) ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request {
	r.ezsignsignergroupEditEzsignsignergroupmembershipsV1Request = &ezsignsignergroupEditEzsignsignergroupmembershipsV1Request
	return r
}

func (r ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request) Execute() (*EzsignsignergroupEditEzsignsignergroupmembershipsV1Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupEditEzsignsignergroupmembershipsV1Execute(r)
}

/*
EzsignsignergroupEditEzsignsignergroupmembershipsV1 Edit multiple Ezsignsignergroupmemberships

Using this endpoint, you can edit multiple Ezsignsignergroupmemberships at the same time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignsignergroupID
 @return ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupEditEzsignsignergroupmembershipsV1(ctx context.Context, pkiEzsignsignergroupID int32) ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request {
	return ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignsignergroupID: pkiEzsignsignergroupID,
	}
}

// Execute executes the request
//  @return EzsignsignergroupEditEzsignsignergroupmembershipsV1Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupEditEzsignsignergroupmembershipsV1Execute(r ApiEzsignsignergroupEditEzsignsignergroupmembershipsV1Request) (*EzsignsignergroupEditEzsignsignergroupmembershipsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupEditEzsignsignergroupmembershipsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupEditEzsignsignergroupmembershipsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/editEzsignsignergroupmemberships"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignsignergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignsignergroupID, "pkiEzsignsignergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignsignergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be greater than 0")
	}
	if r.pkiEzsignsignergroupID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be less than 65535")
	}
	if r.ezsignsignergroupEditEzsignsignergroupmembershipsV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsignsignergroupEditEzsignsignergroupmembershipsV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsignsignergroupEditEzsignsignergroupmembershipsV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignsignergroupEditObjectV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	pkiEzsignsignergroupID int32
	ezsignsignergroupEditObjectV1Request *EzsignsignergroupEditObjectV1Request
}

func (r ApiEzsignsignergroupEditObjectV1Request) EzsignsignergroupEditObjectV1Request(ezsignsignergroupEditObjectV1Request EzsignsignergroupEditObjectV1Request) ApiEzsignsignergroupEditObjectV1Request {
	r.ezsignsignergroupEditObjectV1Request = &ezsignsignergroupEditObjectV1Request
	return r
}

func (r ApiEzsignsignergroupEditObjectV1Request) Execute() (*EzsignsignergroupEditObjectV1Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupEditObjectV1Execute(r)
}

/*
EzsignsignergroupEditObjectV1 Edit an existing Ezsignsignergroup



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
 @return ApiEzsignsignergroupEditObjectV1Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupEditObjectV1(ctx context.Context, pkiEzsignsignergroupID int32) ApiEzsignsignergroupEditObjectV1Request {
	return ApiEzsignsignergroupEditObjectV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignsignergroupID: pkiEzsignsignergroupID,
	}
}

// Execute executes the request
//  @return EzsignsignergroupEditObjectV1Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupEditObjectV1Execute(r ApiEzsignsignergroupEditObjectV1Request) (*EzsignsignergroupEditObjectV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupEditObjectV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupEditObjectV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignsignergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignsignergroupID, "pkiEzsignsignergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignsignergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be greater than 0")
	}
	if r.pkiEzsignsignergroupID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be less than 65535")
	}
	if r.ezsignsignergroupEditObjectV1Request == nil {
		return localVarReturnValue, nil, reportError("ezsignsignergroupEditObjectV1Request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ezsignsignergroupEditObjectV1Request
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	pkiEzsignsignergroupID int32
}

func (r ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request) Execute() (*EzsignsignergroupGetEzsignsignergroupmembershipsV1Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupGetEzsignsignergroupmembershipsV1Execute(r)
}

/*
EzsignsignergroupGetEzsignsignergroupmembershipsV1 Retrieve an existing Ezsignsignergroup's Ezsignsignergroupmemberships

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignsignergroupID
 @return ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupGetEzsignsignergroupmembershipsV1(ctx context.Context, pkiEzsignsignergroupID int32) ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request {
	return ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignsignergroupID: pkiEzsignsignergroupID,
	}
}

// Execute executes the request
//  @return EzsignsignergroupGetEzsignsignergroupmembershipsV1Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupGetEzsignsignergroupmembershipsV1Execute(r ApiEzsignsignergroupGetEzsignsignergroupmembershipsV1Request) (*EzsignsignergroupGetEzsignsignergroupmembershipsV1Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupGetEzsignsignergroupmembershipsV1Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupGetEzsignsignergroupmembershipsV1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/1/object/ezsignsignergroup/{pkiEzsignsignergroupID}/getEzsignsignergroupmemberships"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignsignergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignsignergroupID, "pkiEzsignsignergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignsignergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be greater than 0")
	}
	if r.pkiEzsignsignergroupID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEzsignsignergroupGetObjectV2Request struct {
	ctx context.Context
	ApiService *ObjectEzsignsignergroupAPIService
	pkiEzsignsignergroupID int32
}

func (r ApiEzsignsignergroupGetObjectV2Request) Execute() (*EzsignsignergroupGetObjectV2Response, *http.Response, error) {
	return r.ApiService.EzsignsignergroupGetObjectV2Execute(r)
}

/*
EzsignsignergroupGetObjectV2 Retrieve an existing Ezsignsignergroup



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pkiEzsignsignergroupID The unique ID of the Ezsignsignergroup
 @return ApiEzsignsignergroupGetObjectV2Request
*/
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupGetObjectV2(ctx context.Context, pkiEzsignsignergroupID int32) ApiEzsignsignergroupGetObjectV2Request {
	return ApiEzsignsignergroupGetObjectV2Request{
		ApiService: a,
		ctx: ctx,
		pkiEzsignsignergroupID: pkiEzsignsignergroupID,
	}
}

// Execute executes the request
//  @return EzsignsignergroupGetObjectV2Response
func (a *ObjectEzsignsignergroupAPIService) EzsignsignergroupGetObjectV2Execute(r ApiEzsignsignergroupGetObjectV2Request) (*EzsignsignergroupGetObjectV2Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EzsignsignergroupGetObjectV2Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectEzsignsignergroupAPIService.EzsignsignergroupGetObjectV2")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/2/object/ezsignsignergroup/{pkiEzsignsignergroupID}"
	localVarPath = strings.Replace(localVarPath, "{"+"pkiEzsignsignergroupID"+"}", url.PathEscape(parameterValueToString(r.pkiEzsignsignergroupID, "pkiEzsignsignergroupID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pkiEzsignsignergroupID < 0 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be greater than 0")
	}
	if r.pkiEzsignsignergroupID > 65535 {
		return localVarReturnValue, nil, reportError("pkiEzsignsignergroupID must be less than 65535")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Authorization"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v CommonResponseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
