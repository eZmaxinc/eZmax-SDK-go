/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiscussionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscussionRequest{}

// DiscussionRequest A Discussion Object
type DiscussionRequest struct {
	// The unique ID of the Discussion
	PkiDiscussionID *int32 `json:"pkiDiscussionID,omitempty"`
	// The description of the Discussion
	SDiscussionDescription string `json:"sDiscussionDescription" validate:"regexp=^.{0,75}$"`
	// Whether if it's an closed
	BDiscussionClosed *bool `json:"bDiscussionClosed,omitempty"`
}

type _DiscussionRequest DiscussionRequest

// NewDiscussionRequest instantiates a new DiscussionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscussionRequest(sDiscussionDescription string) *DiscussionRequest {
	this := DiscussionRequest{}
	this.SDiscussionDescription = sDiscussionDescription
	return &this
}

// NewDiscussionRequestWithDefaults instantiates a new DiscussionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscussionRequestWithDefaults() *DiscussionRequest {
	this := DiscussionRequest{}
	return &this
}

// GetPkiDiscussionID returns the PkiDiscussionID field value if set, zero value otherwise.
func (o *DiscussionRequest) GetPkiDiscussionID() int32 {
	if o == nil || IsNil(o.PkiDiscussionID) {
		var ret int32
		return ret
	}
	return *o.PkiDiscussionID
}

// GetPkiDiscussionIDOk returns a tuple with the PkiDiscussionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionRequest) GetPkiDiscussionIDOk() (*int32, bool) {
	if o == nil || IsNil(o.PkiDiscussionID) {
		return nil, false
	}
	return o.PkiDiscussionID, true
}

// HasPkiDiscussionID returns a boolean if a field has been set.
func (o *DiscussionRequest) HasPkiDiscussionID() bool {
	if o != nil && !IsNil(o.PkiDiscussionID) {
		return true
	}

	return false
}

// SetPkiDiscussionID gets a reference to the given int32 and assigns it to the PkiDiscussionID field.
func (o *DiscussionRequest) SetPkiDiscussionID(v int32) {
	o.PkiDiscussionID = &v
}

// GetSDiscussionDescription returns the SDiscussionDescription field value
func (o *DiscussionRequest) GetSDiscussionDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDiscussionDescription
}

// GetSDiscussionDescriptionOk returns a tuple with the SDiscussionDescription field value
// and a boolean to check if the value has been set.
func (o *DiscussionRequest) GetSDiscussionDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDiscussionDescription, true
}

// SetSDiscussionDescription sets field value
func (o *DiscussionRequest) SetSDiscussionDescription(v string) {
	o.SDiscussionDescription = v
}

// GetBDiscussionClosed returns the BDiscussionClosed field value if set, zero value otherwise.
func (o *DiscussionRequest) GetBDiscussionClosed() bool {
	if o == nil || IsNil(o.BDiscussionClosed) {
		var ret bool
		return ret
	}
	return *o.BDiscussionClosed
}

// GetBDiscussionClosedOk returns a tuple with the BDiscussionClosed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiscussionRequest) GetBDiscussionClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.BDiscussionClosed) {
		return nil, false
	}
	return o.BDiscussionClosed, true
}

// HasBDiscussionClosed returns a boolean if a field has been set.
func (o *DiscussionRequest) HasBDiscussionClosed() bool {
	if o != nil && !IsNil(o.BDiscussionClosed) {
		return true
	}

	return false
}

// SetBDiscussionClosed gets a reference to the given bool and assigns it to the BDiscussionClosed field.
func (o *DiscussionRequest) SetBDiscussionClosed(v bool) {
	o.BDiscussionClosed = &v
}

func (o DiscussionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscussionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PkiDiscussionID) {
		toSerialize["pkiDiscussionID"] = o.PkiDiscussionID
	}
	toSerialize["sDiscussionDescription"] = o.SDiscussionDescription
	if !IsNil(o.BDiscussionClosed) {
		toSerialize["bDiscussionClosed"] = o.BDiscussionClosed
	}
	return toSerialize, nil
}

func (o *DiscussionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sDiscussionDescription",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscussionRequest := _DiscussionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscussionRequest)

	if err != nil {
		return err
	}

	*o = DiscussionRequest(varDiscussionRequest)

	return err
}

type NullableDiscussionRequest struct {
	value *DiscussionRequest
	isSet bool
}

func (v NullableDiscussionRequest) Get() *DiscussionRequest {
	return v.value
}

func (v *NullableDiscussionRequest) Set(val *DiscussionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscussionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscussionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscussionRequest(val *DiscussionRequest) *NullableDiscussionRequest {
	return &NullableDiscussionRequest{value: val, isSet: true}
}

func (v NullableDiscussionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscussionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


