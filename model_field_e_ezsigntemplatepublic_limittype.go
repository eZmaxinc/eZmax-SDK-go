/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatepublicLimittype The limittype of the Ezsigntemplatepublic
type FieldEEzsigntemplatepublicLimittype string

// List of Field-eEzsigntemplatepublicLimittype
const (
	HOUR FieldEEzsigntemplatepublicLimittype = "Hour"
	DAY FieldEEzsigntemplatepublicLimittype = "Day"
	MONTH FieldEEzsigntemplatepublicLimittype = "Month"
	TOTAL FieldEEzsigntemplatepublicLimittype = "Total"
)

// All allowed values of FieldEEzsigntemplatepublicLimittype enum
var AllowedFieldEEzsigntemplatepublicLimittypeEnumValues = []FieldEEzsigntemplatepublicLimittype{
	"Hour",
	"Day",
	"Month",
	"Total",
}

func (v *FieldEEzsigntemplatepublicLimittype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatepublicLimittype(value)
	for _, existing := range AllowedFieldEEzsigntemplatepublicLimittypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatepublicLimittype", value)
}

// NewFieldEEzsigntemplatepublicLimittypeFromValue returns a pointer to a valid FieldEEzsigntemplatepublicLimittype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatepublicLimittypeFromValue(v string) (*FieldEEzsigntemplatepublicLimittype, error) {
	ev := FieldEEzsigntemplatepublicLimittype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatepublicLimittype: valid values are %v", v, AllowedFieldEEzsigntemplatepublicLimittypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatepublicLimittype) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatepublicLimittypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatepublicLimittype value
func (v FieldEEzsigntemplatepublicLimittype) Ptr() *FieldEEzsigntemplatepublicLimittype {
	return &v
}

type NullableFieldEEzsigntemplatepublicLimittype struct {
	value *FieldEEzsigntemplatepublicLimittype
	isSet bool
}

func (v NullableFieldEEzsigntemplatepublicLimittype) Get() *FieldEEzsigntemplatepublicLimittype {
	return v.value
}

func (v *NullableFieldEEzsigntemplatepublicLimittype) Set(val *FieldEEzsigntemplatepublicLimittype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatepublicLimittype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatepublicLimittype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatepublicLimittype(val *FieldEEzsigntemplatepublicLimittype) *NullableFieldEEzsigntemplatepublicLimittype {
	return &NullableFieldEEzsigntemplatepublicLimittype{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatepublicLimittype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatepublicLimittype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

