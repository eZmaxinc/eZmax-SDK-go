/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhonetypeAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhonetypeAutocompleteElementResponse{}

// PhonetypeAutocompleteElementResponse A Phonetype AutocompleteElement Response
type PhonetypeAutocompleteElementResponse struct {
	// The unique ID of the Phonetype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home| |3|Mobile| |4|Fax| |5|Pager| |6|Toll Free|
	PkiPhonetypeID int32 `json:"pkiPhonetypeID"`
	// The name of the Phonetype in the language of the requester
	SPhonetypeNameX string `json:"sPhonetypeNameX"`
	// Whether the Phonetype is active or not
	BPhonetypeIsactive bool `json:"bPhonetypeIsactive"`
}

type _PhonetypeAutocompleteElementResponse PhonetypeAutocompleteElementResponse

// NewPhonetypeAutocompleteElementResponse instantiates a new PhonetypeAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhonetypeAutocompleteElementResponse(pkiPhonetypeID int32, sPhonetypeNameX string, bPhonetypeIsactive bool) *PhonetypeAutocompleteElementResponse {
	this := PhonetypeAutocompleteElementResponse{}
	this.PkiPhonetypeID = pkiPhonetypeID
	this.SPhonetypeNameX = sPhonetypeNameX
	this.BPhonetypeIsactive = bPhonetypeIsactive
	return &this
}

// NewPhonetypeAutocompleteElementResponseWithDefaults instantiates a new PhonetypeAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhonetypeAutocompleteElementResponseWithDefaults() *PhonetypeAutocompleteElementResponse {
	this := PhonetypeAutocompleteElementResponse{}
	return &this
}

// GetPkiPhonetypeID returns the PkiPhonetypeID field value
func (o *PhonetypeAutocompleteElementResponse) GetPkiPhonetypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiPhonetypeID
}

// GetPkiPhonetypeIDOk returns a tuple with the PkiPhonetypeID field value
// and a boolean to check if the value has been set.
func (o *PhonetypeAutocompleteElementResponse) GetPkiPhonetypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiPhonetypeID, true
}

// SetPkiPhonetypeID sets field value
func (o *PhonetypeAutocompleteElementResponse) SetPkiPhonetypeID(v int32) {
	o.PkiPhonetypeID = v
}

// GetSPhonetypeNameX returns the SPhonetypeNameX field value
func (o *PhonetypeAutocompleteElementResponse) GetSPhonetypeNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SPhonetypeNameX
}

// GetSPhonetypeNameXOk returns a tuple with the SPhonetypeNameX field value
// and a boolean to check if the value has been set.
func (o *PhonetypeAutocompleteElementResponse) GetSPhonetypeNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SPhonetypeNameX, true
}

// SetSPhonetypeNameX sets field value
func (o *PhonetypeAutocompleteElementResponse) SetSPhonetypeNameX(v string) {
	o.SPhonetypeNameX = v
}

// GetBPhonetypeIsactive returns the BPhonetypeIsactive field value
func (o *PhonetypeAutocompleteElementResponse) GetBPhonetypeIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BPhonetypeIsactive
}

// GetBPhonetypeIsactiveOk returns a tuple with the BPhonetypeIsactive field value
// and a boolean to check if the value has been set.
func (o *PhonetypeAutocompleteElementResponse) GetBPhonetypeIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BPhonetypeIsactive, true
}

// SetBPhonetypeIsactive sets field value
func (o *PhonetypeAutocompleteElementResponse) SetBPhonetypeIsactive(v bool) {
	o.BPhonetypeIsactive = v
}

func (o PhonetypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhonetypeAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiPhonetypeID"] = o.PkiPhonetypeID
	toSerialize["sPhonetypeNameX"] = o.SPhonetypeNameX
	toSerialize["bPhonetypeIsactive"] = o.BPhonetypeIsactive
	return toSerialize, nil
}

func (o *PhonetypeAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiPhonetypeID",
		"sPhonetypeNameX",
		"bPhonetypeIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhonetypeAutocompleteElementResponse := _PhonetypeAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhonetypeAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = PhonetypeAutocompleteElementResponse(varPhonetypeAutocompleteElementResponse)

	return err
}

type NullablePhonetypeAutocompleteElementResponse struct {
	value *PhonetypeAutocompleteElementResponse
	isSet bool
}

func (v NullablePhonetypeAutocompleteElementResponse) Get() *PhonetypeAutocompleteElementResponse {
	return v.value
}

func (v *NullablePhonetypeAutocompleteElementResponse) Set(val *PhonetypeAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePhonetypeAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePhonetypeAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhonetypeAutocompleteElementResponse(val *PhonetypeAutocompleteElementResponse) *NullablePhonetypeAutocompleteElementResponse {
	return &NullablePhonetypeAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullablePhonetypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhonetypeAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


