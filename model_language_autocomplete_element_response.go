/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LanguageAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageAutocompleteElementResponse{}

// LanguageAutocompleteElementResponse A Language AutocompleteElement Response
type LanguageAutocompleteElementResponse struct {
	// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
	PkiLanguageID int32 `json:"pkiLanguageID"`
	// The Name of the Language in the language of the requester
	SLanguageNameX string `json:"sLanguageNameX"`
	// Whether the Language is active or not
	BLanguageIsactive bool `json:"bLanguageIsactive"`
}

type _LanguageAutocompleteElementResponse LanguageAutocompleteElementResponse

// NewLanguageAutocompleteElementResponse instantiates a new LanguageAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageAutocompleteElementResponse(pkiLanguageID int32, sLanguageNameX string, bLanguageIsactive bool) *LanguageAutocompleteElementResponse {
	this := LanguageAutocompleteElementResponse{}
	this.PkiLanguageID = pkiLanguageID
	this.SLanguageNameX = sLanguageNameX
	this.BLanguageIsactive = bLanguageIsactive
	return &this
}

// NewLanguageAutocompleteElementResponseWithDefaults instantiates a new LanguageAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageAutocompleteElementResponseWithDefaults() *LanguageAutocompleteElementResponse {
	this := LanguageAutocompleteElementResponse{}
	return &this
}

// GetPkiLanguageID returns the PkiLanguageID field value
func (o *LanguageAutocompleteElementResponse) GetPkiLanguageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiLanguageID
}

// GetPkiLanguageIDOk returns a tuple with the PkiLanguageID field value
// and a boolean to check if the value has been set.
func (o *LanguageAutocompleteElementResponse) GetPkiLanguageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiLanguageID, true
}

// SetPkiLanguageID sets field value
func (o *LanguageAutocompleteElementResponse) SetPkiLanguageID(v int32) {
	o.PkiLanguageID = v
}

// GetSLanguageNameX returns the SLanguageNameX field value
func (o *LanguageAutocompleteElementResponse) GetSLanguageNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SLanguageNameX
}

// GetSLanguageNameXOk returns a tuple with the SLanguageNameX field value
// and a boolean to check if the value has been set.
func (o *LanguageAutocompleteElementResponse) GetSLanguageNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SLanguageNameX, true
}

// SetSLanguageNameX sets field value
func (o *LanguageAutocompleteElementResponse) SetSLanguageNameX(v string) {
	o.SLanguageNameX = v
}

// GetBLanguageIsactive returns the BLanguageIsactive field value
func (o *LanguageAutocompleteElementResponse) GetBLanguageIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BLanguageIsactive
}

// GetBLanguageIsactiveOk returns a tuple with the BLanguageIsactive field value
// and a boolean to check if the value has been set.
func (o *LanguageAutocompleteElementResponse) GetBLanguageIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BLanguageIsactive, true
}

// SetBLanguageIsactive sets field value
func (o *LanguageAutocompleteElementResponse) SetBLanguageIsactive(v bool) {
	o.BLanguageIsactive = v
}

func (o LanguageAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiLanguageID"] = o.PkiLanguageID
	toSerialize["sLanguageNameX"] = o.SLanguageNameX
	toSerialize["bLanguageIsactive"] = o.BLanguageIsactive
	return toSerialize, nil
}

func (o *LanguageAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiLanguageID",
		"sLanguageNameX",
		"bLanguageIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLanguageAutocompleteElementResponse := _LanguageAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLanguageAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = LanguageAutocompleteElementResponse(varLanguageAutocompleteElementResponse)

	return err
}

type NullableLanguageAutocompleteElementResponse struct {
	value *LanguageAutocompleteElementResponse
	isSet bool
}

func (v NullableLanguageAutocompleteElementResponse) Get() *LanguageAutocompleteElementResponse {
	return v.value
}

func (v *NullableLanguageAutocompleteElementResponse) Set(val *LanguageAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageAutocompleteElementResponse(val *LanguageAutocompleteElementResponse) *NullableLanguageAutocompleteElementResponse {
	return &NullableLanguageAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableLanguageAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


