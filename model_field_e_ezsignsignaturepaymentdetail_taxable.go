/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignsignaturepaymentdetailTaxable Whether the Ezsignsignaturepaymentdetail is taxable or not
type FieldEEzsignsignaturepaymentdetailTaxable string

// List of Field-eEzsignsignaturepaymentdetailTaxable
const (
	YES FieldEEzsignsignaturepaymentdetailTaxable = "Yes"
	NO FieldEEzsignsignaturepaymentdetailTaxable = "No"
	INCLUDED FieldEEzsignsignaturepaymentdetailTaxable = "Included"
)

// All allowed values of FieldEEzsignsignaturepaymentdetailTaxable enum
var AllowedFieldEEzsignsignaturepaymentdetailTaxableEnumValues = []FieldEEzsignsignaturepaymentdetailTaxable{
	"Yes",
	"No",
	"Included",
}

func (v *FieldEEzsignsignaturepaymentdetailTaxable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignsignaturepaymentdetailTaxable(value)
	for _, existing := range AllowedFieldEEzsignsignaturepaymentdetailTaxableEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignsignaturepaymentdetailTaxable", value)
}

// NewFieldEEzsignsignaturepaymentdetailTaxableFromValue returns a pointer to a valid FieldEEzsignsignaturepaymentdetailTaxable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignsignaturepaymentdetailTaxableFromValue(v string) (*FieldEEzsignsignaturepaymentdetailTaxable, error) {
	ev := FieldEEzsignsignaturepaymentdetailTaxable(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignsignaturepaymentdetailTaxable: valid values are %v", v, AllowedFieldEEzsignsignaturepaymentdetailTaxableEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignsignaturepaymentdetailTaxable) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignsignaturepaymentdetailTaxableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignsignaturepaymentdetailTaxable value
func (v FieldEEzsignsignaturepaymentdetailTaxable) Ptr() *FieldEEzsignsignaturepaymentdetailTaxable {
	return &v
}

type NullableFieldEEzsignsignaturepaymentdetailTaxable struct {
	value *FieldEEzsignsignaturepaymentdetailTaxable
	isSet bool
}

func (v NullableFieldEEzsignsignaturepaymentdetailTaxable) Get() *FieldEEzsignsignaturepaymentdetailTaxable {
	return v.value
}

func (v *NullableFieldEEzsignsignaturepaymentdetailTaxable) Set(val *FieldEEzsignsignaturepaymentdetailTaxable) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignsignaturepaymentdetailTaxable) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignsignaturepaymentdetailTaxable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignsignaturepaymentdetailTaxable(val *FieldEEzsignsignaturepaymentdetailTaxable) *NullableFieldEEzsignsignaturepaymentdetailTaxable {
	return &NullableFieldEEzsignsignaturepaymentdetailTaxable{value: val, isSet: true}
}

func (v NullableFieldEEzsignsignaturepaymentdetailTaxable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignsignaturepaymentdetailTaxable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

