/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GlobalEzmaxclientVersionV1Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalEzmaxclientVersionV1Response{}

// GlobalEzmaxclientVersionV1Response Response for GET /1/ezmaxclient/{pksEzmaxclientOs}/version
type GlobalEzmaxclientVersionV1Response struct {
	// The version on the store
	SEzmaxclientVersion string `json:"sEzmaxclientVersion"`
	// The latest OS version of the system running the application at the time of release
	SEzmaxclientOslatestversion string `json:"sEzmaxclientOslatestversion"`
}

type _GlobalEzmaxclientVersionV1Response GlobalEzmaxclientVersionV1Response

// NewGlobalEzmaxclientVersionV1Response instantiates a new GlobalEzmaxclientVersionV1Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalEzmaxclientVersionV1Response(sEzmaxclientVersion string, sEzmaxclientOslatestversion string) *GlobalEzmaxclientVersionV1Response {
	this := GlobalEzmaxclientVersionV1Response{}
	this.SEzmaxclientVersion = sEzmaxclientVersion
	this.SEzmaxclientOslatestversion = sEzmaxclientOslatestversion
	return &this
}

// NewGlobalEzmaxclientVersionV1ResponseWithDefaults instantiates a new GlobalEzmaxclientVersionV1Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalEzmaxclientVersionV1ResponseWithDefaults() *GlobalEzmaxclientVersionV1Response {
	this := GlobalEzmaxclientVersionV1Response{}
	var sEzmaxclientOslatestversion string = "11"
	this.SEzmaxclientOslatestversion = sEzmaxclientOslatestversion
	return &this
}

// GetSEzmaxclientVersion returns the SEzmaxclientVersion field value
func (o *GlobalEzmaxclientVersionV1Response) GetSEzmaxclientVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEzmaxclientVersion
}

// GetSEzmaxclientVersionOk returns a tuple with the SEzmaxclientVersion field value
// and a boolean to check if the value has been set.
func (o *GlobalEzmaxclientVersionV1Response) GetSEzmaxclientVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEzmaxclientVersion, true
}

// SetSEzmaxclientVersion sets field value
func (o *GlobalEzmaxclientVersionV1Response) SetSEzmaxclientVersion(v string) {
	o.SEzmaxclientVersion = v
}

// GetSEzmaxclientOslatestversion returns the SEzmaxclientOslatestversion field value
func (o *GlobalEzmaxclientVersionV1Response) GetSEzmaxclientOslatestversion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEzmaxclientOslatestversion
}

// GetSEzmaxclientOslatestversionOk returns a tuple with the SEzmaxclientOslatestversion field value
// and a boolean to check if the value has been set.
func (o *GlobalEzmaxclientVersionV1Response) GetSEzmaxclientOslatestversionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEzmaxclientOslatestversion, true
}

// SetSEzmaxclientOslatestversion sets field value
func (o *GlobalEzmaxclientVersionV1Response) SetSEzmaxclientOslatestversion(v string) {
	o.SEzmaxclientOslatestversion = v
}

func (o GlobalEzmaxclientVersionV1Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalEzmaxclientVersionV1Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sEzmaxclientVersion"] = o.SEzmaxclientVersion
	toSerialize["sEzmaxclientOslatestversion"] = o.SEzmaxclientOslatestversion
	return toSerialize, nil
}

func (o *GlobalEzmaxclientVersionV1Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sEzmaxclientVersion",
		"sEzmaxclientOslatestversion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGlobalEzmaxclientVersionV1Response := _GlobalEzmaxclientVersionV1Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGlobalEzmaxclientVersionV1Response)

	if err != nil {
		return err
	}

	*o = GlobalEzmaxclientVersionV1Response(varGlobalEzmaxclientVersionV1Response)

	return err
}

type NullableGlobalEzmaxclientVersionV1Response struct {
	value *GlobalEzmaxclientVersionV1Response
	isSet bool
}

func (v NullableGlobalEzmaxclientVersionV1Response) Get() *GlobalEzmaxclientVersionV1Response {
	return v.value
}

func (v *NullableGlobalEzmaxclientVersionV1Response) Set(val *GlobalEzmaxclientVersionV1Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalEzmaxclientVersionV1Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalEzmaxclientVersionV1Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalEzmaxclientVersionV1Response(val *GlobalEzmaxclientVersionV1Response) *NullableGlobalEzmaxclientVersionV1Response {
	return &NullableGlobalEzmaxclientVersionV1Response{value: val, isSet: true}
}

func (v NullableGlobalEzmaxclientVersionV1Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalEzmaxclientVersionV1Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


