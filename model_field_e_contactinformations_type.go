/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEContactinformationsType The type of the Contactinformations
type FieldEContactinformationsType string

// List of Field-eContactinformationsType
const (
	BANK_ACCOUNT FieldEContactinformationsType = "BankAccount"
	CONTACT_OBJECT FieldEContactinformationsType = "ContactObject"
	CREDIT_CARD FieldEContactinformationsType = "CreditCard"
	CUSTOMER FieldEContactinformationsType = "Customer"
	EXTERNAL_BROKER FieldEContactinformationsType = "ExternalBroker"
	EXTERNAL_BROKER_FIRM FieldEContactinformationsType = "ExternalBrokerFirm"
	EZCOM_COMPANY FieldEContactinformationsType = "EzcomCompany"
	FINANCIAL_INSTITUTION FieldEContactinformationsType = "FinancialInstitution"
	FRANCHISE_COMPANY FieldEContactinformationsType = "FranchiseCompany"
	FRANCHISE_OFFICE FieldEContactinformationsType = "FranchiseOffice"
	SUPPLIER FieldEContactinformationsType = "Supplier"
)

// All allowed values of FieldEContactinformationsType enum
var AllowedFieldEContactinformationsTypeEnumValues = []FieldEContactinformationsType{
	"BankAccount",
	"ContactObject",
	"CreditCard",
	"Customer",
	"ExternalBroker",
	"ExternalBrokerFirm",
	"EzcomCompany",
	"FinancialInstitution",
	"FranchiseCompany",
	"FranchiseOffice",
	"Supplier",
}

func (v *FieldEContactinformationsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEContactinformationsType(value)
	for _, existing := range AllowedFieldEContactinformationsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEContactinformationsType", value)
}

// NewFieldEContactinformationsTypeFromValue returns a pointer to a valid FieldEContactinformationsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEContactinformationsTypeFromValue(v string) (*FieldEContactinformationsType, error) {
	ev := FieldEContactinformationsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEContactinformationsType: valid values are %v", v, AllowedFieldEContactinformationsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEContactinformationsType) IsValid() bool {
	for _, existing := range AllowedFieldEContactinformationsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eContactinformationsType value
func (v FieldEContactinformationsType) Ptr() *FieldEContactinformationsType {
	return &v
}

type NullableFieldEContactinformationsType struct {
	value *FieldEContactinformationsType
	isSet bool
}

func (v NullableFieldEContactinformationsType) Get() *FieldEContactinformationsType {
	return v.value
}

func (v *NullableFieldEContactinformationsType) Set(val *FieldEContactinformationsType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEContactinformationsType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEContactinformationsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEContactinformationsType(val *FieldEContactinformationsType) *NullableFieldEContactinformationsType {
	return &NullableFieldEContactinformationsType{value: val, isSet: true}
}

func (v NullableFieldEContactinformationsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEContactinformationsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

