/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomBrandingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomBrandingResponse{}

// CustomBrandingResponse A Custom Branding Object
type CustomBrandingResponse struct {
	// The primary color. This is a RGB color converted into integer
	IBrandingColor int32 `json:"iBrandingColor"`
	// The url of the picture used as logo in the Branding
	SBrandingLogointerfaceurl string `json:"sBrandingLogointerfaceurl" validate:"regexp=^(https|http):\\/\\/[^\\\\s\\/$.?#].[^\\\\s]*$"`
}

type _CustomBrandingResponse CustomBrandingResponse

// NewCustomBrandingResponse instantiates a new CustomBrandingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomBrandingResponse(iBrandingColor int32, sBrandingLogointerfaceurl string) *CustomBrandingResponse {
	this := CustomBrandingResponse{}
	this.IBrandingColor = iBrandingColor
	this.SBrandingLogointerfaceurl = sBrandingLogointerfaceurl
	return &this
}

// NewCustomBrandingResponseWithDefaults instantiates a new CustomBrandingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomBrandingResponseWithDefaults() *CustomBrandingResponse {
	this := CustomBrandingResponse{}
	return &this
}

// GetIBrandingColor returns the IBrandingColor field value
func (o *CustomBrandingResponse) GetIBrandingColor() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IBrandingColor
}

// GetIBrandingColorOk returns a tuple with the IBrandingColor field value
// and a boolean to check if the value has been set.
func (o *CustomBrandingResponse) GetIBrandingColorOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IBrandingColor, true
}

// SetIBrandingColor sets field value
func (o *CustomBrandingResponse) SetIBrandingColor(v int32) {
	o.IBrandingColor = v
}

// GetSBrandingLogointerfaceurl returns the SBrandingLogointerfaceurl field value
func (o *CustomBrandingResponse) GetSBrandingLogointerfaceurl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SBrandingLogointerfaceurl
}

// GetSBrandingLogointerfaceurlOk returns a tuple with the SBrandingLogointerfaceurl field value
// and a boolean to check if the value has been set.
func (o *CustomBrandingResponse) GetSBrandingLogointerfaceurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SBrandingLogointerfaceurl, true
}

// SetSBrandingLogointerfaceurl sets field value
func (o *CustomBrandingResponse) SetSBrandingLogointerfaceurl(v string) {
	o.SBrandingLogointerfaceurl = v
}

func (o CustomBrandingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomBrandingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["iBrandingColor"] = o.IBrandingColor
	toSerialize["sBrandingLogointerfaceurl"] = o.SBrandingLogointerfaceurl
	return toSerialize, nil
}

func (o *CustomBrandingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"iBrandingColor",
		"sBrandingLogointerfaceurl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomBrandingResponse := _CustomBrandingResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomBrandingResponse)

	if err != nil {
		return err
	}

	*o = CustomBrandingResponse(varCustomBrandingResponse)

	return err
}

type NullableCustomBrandingResponse struct {
	value *CustomBrandingResponse
	isSet bool
}

func (v NullableCustomBrandingResponse) Get() *CustomBrandingResponse {
	return v.value
}

func (v *NullableCustomBrandingResponse) Set(val *CustomBrandingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomBrandingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomBrandingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomBrandingResponse(val *CustomBrandingResponse) *NullableCustomBrandingResponse {
	return &NullableCustomBrandingResponse{value: val, isSet: true}
}

func (v NullableCustomBrandingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomBrandingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


