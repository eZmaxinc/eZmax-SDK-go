/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzdoctemplatedocumentPrivacylevel The Privacy level of the Ezdoctemplatedocument.  * **User** is for personal templates use and cannot be shared * **Ezsignfoldertype** and **Company** is for shared template
type FieldEEzdoctemplatedocumentPrivacylevel string

// List of Field-eEzdoctemplatedocumentPrivacylevel
const (
	COMPANY FieldEEzdoctemplatedocumentPrivacylevel = "Company"
	EZSIGNFOLDERTYPE FieldEEzdoctemplatedocumentPrivacylevel = "Ezsignfoldertype"
	USER FieldEEzdoctemplatedocumentPrivacylevel = "User"
)

// All allowed values of FieldEEzdoctemplatedocumentPrivacylevel enum
var AllowedFieldEEzdoctemplatedocumentPrivacylevelEnumValues = []FieldEEzdoctemplatedocumentPrivacylevel{
	"Company",
	"Ezsignfoldertype",
	"User",
}

func (v *FieldEEzdoctemplatedocumentPrivacylevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzdoctemplatedocumentPrivacylevel(value)
	for _, existing := range AllowedFieldEEzdoctemplatedocumentPrivacylevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzdoctemplatedocumentPrivacylevel", value)
}

// NewFieldEEzdoctemplatedocumentPrivacylevelFromValue returns a pointer to a valid FieldEEzdoctemplatedocumentPrivacylevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzdoctemplatedocumentPrivacylevelFromValue(v string) (*FieldEEzdoctemplatedocumentPrivacylevel, error) {
	ev := FieldEEzdoctemplatedocumentPrivacylevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzdoctemplatedocumentPrivacylevel: valid values are %v", v, AllowedFieldEEzdoctemplatedocumentPrivacylevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzdoctemplatedocumentPrivacylevel) IsValid() bool {
	for _, existing := range AllowedFieldEEzdoctemplatedocumentPrivacylevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzdoctemplatedocumentPrivacylevel value
func (v FieldEEzdoctemplatedocumentPrivacylevel) Ptr() *FieldEEzdoctemplatedocumentPrivacylevel {
	return &v
}

type NullableFieldEEzdoctemplatedocumentPrivacylevel struct {
	value *FieldEEzdoctemplatedocumentPrivacylevel
	isSet bool
}

func (v NullableFieldEEzdoctemplatedocumentPrivacylevel) Get() *FieldEEzdoctemplatedocumentPrivacylevel {
	return v.value
}

func (v *NullableFieldEEzdoctemplatedocumentPrivacylevel) Set(val *FieldEEzdoctemplatedocumentPrivacylevel) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzdoctemplatedocumentPrivacylevel) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzdoctemplatedocumentPrivacylevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzdoctemplatedocumentPrivacylevel(val *FieldEEzdoctemplatedocumentPrivacylevel) *NullableFieldEEzdoctemplatedocumentPrivacylevel {
	return &NullableFieldEEzdoctemplatedocumentPrivacylevel{value: val, isSet: true}
}

func (v NullableFieldEEzdoctemplatedocumentPrivacylevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzdoctemplatedocumentPrivacylevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

