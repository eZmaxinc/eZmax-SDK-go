/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEActivesessionUsertype The Type of User for the Activesession
type FieldEActivesessionUsertype string

// List of Field-eActivesessionUsertype
const (
	AGENT_BROKER FieldEActivesessionUsertype = "AgentBroker"
	ASSISTANT FieldEActivesessionUsertype = "Assistant"
	EZSIGN_SIGNER FieldEActivesessionUsertype = "EzsignSigner"
	EZSIGN_USER FieldEActivesessionUsertype = "EzsignUser"
	NORMAL FieldEActivesessionUsertype = "Normal"
)

// All allowed values of FieldEActivesessionUsertype enum
var AllowedFieldEActivesessionUsertypeEnumValues = []FieldEActivesessionUsertype{
	"AgentBroker",
	"Assistant",
	"EzsignSigner",
	"EzsignUser",
	"Normal",
}

func (v *FieldEActivesessionUsertype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEActivesessionUsertype(value)
	for _, existing := range AllowedFieldEActivesessionUsertypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEActivesessionUsertype", value)
}

// NewFieldEActivesessionUsertypeFromValue returns a pointer to a valid FieldEActivesessionUsertype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEActivesessionUsertypeFromValue(v string) (*FieldEActivesessionUsertype, error) {
	ev := FieldEActivesessionUsertype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEActivesessionUsertype: valid values are %v", v, AllowedFieldEActivesessionUsertypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEActivesessionUsertype) IsValid() bool {
	for _, existing := range AllowedFieldEActivesessionUsertypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eActivesessionUsertype value
func (v FieldEActivesessionUsertype) Ptr() *FieldEActivesessionUsertype {
	return &v
}

type NullableFieldEActivesessionUsertype struct {
	value *FieldEActivesessionUsertype
	isSet bool
}

func (v NullableFieldEActivesessionUsertype) Get() *FieldEActivesessionUsertype {
	return v.value
}

func (v *NullableFieldEActivesessionUsertype) Set(val *FieldEActivesessionUsertype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEActivesessionUsertype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEActivesessionUsertype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEActivesessionUsertype(val *FieldEActivesessionUsertype) *NullableFieldEActivesessionUsertype {
	return &NullableFieldEActivesessionUsertype{value: val, isSet: true}
}

func (v NullableFieldEActivesessionUsertype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEActivesessionUsertype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

