/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the MultilingualSupplyDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultilingualSupplyDescription{}

// MultilingualSupplyDescription The description1 of the Supply
type MultilingualSupplyDescription struct {
	// The description of the Supply in French
	SSupplyDescription1 *string `json:"sSupplyDescription1,omitempty" validate:"regexp=^.{0,50}$"`
	// The description of the Supply in English
	SSupplyDescription2 *string `json:"sSupplyDescription2,omitempty" validate:"regexp=^.{0,50}$"`
}

// NewMultilingualSupplyDescription instantiates a new MultilingualSupplyDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultilingualSupplyDescription() *MultilingualSupplyDescription {
	this := MultilingualSupplyDescription{}
	return &this
}

// NewMultilingualSupplyDescriptionWithDefaults instantiates a new MultilingualSupplyDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultilingualSupplyDescriptionWithDefaults() *MultilingualSupplyDescription {
	this := MultilingualSupplyDescription{}
	return &this
}

// GetSSupplyDescription1 returns the SSupplyDescription1 field value if set, zero value otherwise.
func (o *MultilingualSupplyDescription) GetSSupplyDescription1() string {
	if o == nil || IsNil(o.SSupplyDescription1) {
		var ret string
		return ret
	}
	return *o.SSupplyDescription1
}

// GetSSupplyDescription1Ok returns a tuple with the SSupplyDescription1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualSupplyDescription) GetSSupplyDescription1Ok() (*string, bool) {
	if o == nil || IsNil(o.SSupplyDescription1) {
		return nil, false
	}
	return o.SSupplyDescription1, true
}

// HasSSupplyDescription1 returns a boolean if a field has been set.
func (o *MultilingualSupplyDescription) HasSSupplyDescription1() bool {
	if o != nil && !IsNil(o.SSupplyDescription1) {
		return true
	}

	return false
}

// SetSSupplyDescription1 gets a reference to the given string and assigns it to the SSupplyDescription1 field.
func (o *MultilingualSupplyDescription) SetSSupplyDescription1(v string) {
	o.SSupplyDescription1 = &v
}

// GetSSupplyDescription2 returns the SSupplyDescription2 field value if set, zero value otherwise.
func (o *MultilingualSupplyDescription) GetSSupplyDescription2() string {
	if o == nil || IsNil(o.SSupplyDescription2) {
		var ret string
		return ret
	}
	return *o.SSupplyDescription2
}

// GetSSupplyDescription2Ok returns a tuple with the SSupplyDescription2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultilingualSupplyDescription) GetSSupplyDescription2Ok() (*string, bool) {
	if o == nil || IsNil(o.SSupplyDescription2) {
		return nil, false
	}
	return o.SSupplyDescription2, true
}

// HasSSupplyDescription2 returns a boolean if a field has been set.
func (o *MultilingualSupplyDescription) HasSSupplyDescription2() bool {
	if o != nil && !IsNil(o.SSupplyDescription2) {
		return true
	}

	return false
}

// SetSSupplyDescription2 gets a reference to the given string and assigns it to the SSupplyDescription2 field.
func (o *MultilingualSupplyDescription) SetSSupplyDescription2(v string) {
	o.SSupplyDescription2 = &v
}

func (o MultilingualSupplyDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultilingualSupplyDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SSupplyDescription1) {
		toSerialize["sSupplyDescription1"] = o.SSupplyDescription1
	}
	if !IsNil(o.SSupplyDescription2) {
		toSerialize["sSupplyDescription2"] = o.SSupplyDescription2
	}
	return toSerialize, nil
}

type NullableMultilingualSupplyDescription struct {
	value *MultilingualSupplyDescription
	isSet bool
}

func (v NullableMultilingualSupplyDescription) Get() *MultilingualSupplyDescription {
	return v.value
}

func (v *NullableMultilingualSupplyDescription) Set(val *MultilingualSupplyDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableMultilingualSupplyDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableMultilingualSupplyDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultilingualSupplyDescription(val *MultilingualSupplyDescription) *NullableMultilingualSupplyDescription {
	return &NullableMultilingualSupplyDescription{value: val, isSet: true}
}

func (v NullableMultilingualSupplyDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultilingualSupplyDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


