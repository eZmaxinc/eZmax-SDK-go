/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmailResponseCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmailResponseCompound{}

// EmailResponseCompound An Email Object and children to create a complete structure
type EmailResponseCompound struct {
	// The unique ID of the Email
	PkiEmailID int32 `json:"pkiEmailID"`
	// The unique ID of the Emailtype.  Valid values:  |Value|Description| |-|-| |1|Office| |2|Home|
	FkiEmailtypeID int32 `json:"fkiEmailtypeID"`
	// The email address.
	SEmailAddress string "json:\"sEmailAddress\" validate:\"regexp=^[\\\\w.%+\\\\-!#$%&'*+\\/=?^`{|}~]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,20}$\""
}

type _EmailResponseCompound EmailResponseCompound

// NewEmailResponseCompound instantiates a new EmailResponseCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailResponseCompound(pkiEmailID int32, fkiEmailtypeID int32, sEmailAddress string) *EmailResponseCompound {
	this := EmailResponseCompound{}
	this.PkiEmailID = pkiEmailID
	this.FkiEmailtypeID = fkiEmailtypeID
	this.SEmailAddress = sEmailAddress
	return &this
}

// NewEmailResponseCompoundWithDefaults instantiates a new EmailResponseCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailResponseCompoundWithDefaults() *EmailResponseCompound {
	this := EmailResponseCompound{}
	return &this
}

// GetPkiEmailID returns the PkiEmailID field value
func (o *EmailResponseCompound) GetPkiEmailID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEmailID
}

// GetPkiEmailIDOk returns a tuple with the PkiEmailID field value
// and a boolean to check if the value has been set.
func (o *EmailResponseCompound) GetPkiEmailIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEmailID, true
}

// SetPkiEmailID sets field value
func (o *EmailResponseCompound) SetPkiEmailID(v int32) {
	o.PkiEmailID = v
}

// GetFkiEmailtypeID returns the FkiEmailtypeID field value
func (o *EmailResponseCompound) GetFkiEmailtypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiEmailtypeID
}

// GetFkiEmailtypeIDOk returns a tuple with the FkiEmailtypeID field value
// and a boolean to check if the value has been set.
func (o *EmailResponseCompound) GetFkiEmailtypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiEmailtypeID, true
}

// SetFkiEmailtypeID sets field value
func (o *EmailResponseCompound) SetFkiEmailtypeID(v int32) {
	o.FkiEmailtypeID = v
}

// GetSEmailAddress returns the SEmailAddress field value
func (o *EmailResponseCompound) GetSEmailAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEmailAddress
}

// GetSEmailAddressOk returns a tuple with the SEmailAddress field value
// and a boolean to check if the value has been set.
func (o *EmailResponseCompound) GetSEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEmailAddress, true
}

// SetSEmailAddress sets field value
func (o *EmailResponseCompound) SetSEmailAddress(v string) {
	o.SEmailAddress = v
}

func (o EmailResponseCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmailResponseCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEmailID"] = o.PkiEmailID
	toSerialize["fkiEmailtypeID"] = o.FkiEmailtypeID
	toSerialize["sEmailAddress"] = o.SEmailAddress
	return toSerialize, nil
}

func (o *EmailResponseCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEmailID",
		"fkiEmailtypeID",
		"sEmailAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmailResponseCompound := _EmailResponseCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmailResponseCompound)

	if err != nil {
		return err
	}

	*o = EmailResponseCompound(varEmailResponseCompound)

	return err
}

type NullableEmailResponseCompound struct {
	value *EmailResponseCompound
	isSet bool
}

func (v NullableEmailResponseCompound) Get() *EmailResponseCompound {
	return v.value
}

func (v *NullableEmailResponseCompound) Set(val *EmailResponseCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailResponseCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailResponseCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailResponseCompound(val *EmailResponseCompound) *NullableEmailResponseCompound {
	return &NullableEmailResponseCompound{value: val, isSet: true}
}

func (v NullableEmailResponseCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailResponseCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


