/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEVersionhistoryType The type of Versionhistory.
type FieldEVersionhistoryType string

// List of Field-eVersionhistoryType
const (
	AGENT_BROKER FieldEVersionhistoryType = "AgentBroker"
	NEW_FEATURE FieldEVersionhistoryType = "NewFeature"
	CORRECTION FieldEVersionhistoryType = "Correction"
	MODIFICATION FieldEVersionhistoryType = "Modification"
	IMPORTANT_MESSAGE FieldEVersionhistoryType = "ImportantMessage"
)

// All allowed values of FieldEVersionhistoryType enum
var AllowedFieldEVersionhistoryTypeEnumValues = []FieldEVersionhistoryType{
	"AgentBroker",
	"NewFeature",
	"Correction",
	"Modification",
	"ImportantMessage",
}

func (v *FieldEVersionhistoryType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEVersionhistoryType(value)
	for _, existing := range AllowedFieldEVersionhistoryTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEVersionhistoryType", value)
}

// NewFieldEVersionhistoryTypeFromValue returns a pointer to a valid FieldEVersionhistoryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEVersionhistoryTypeFromValue(v string) (*FieldEVersionhistoryType, error) {
	ev := FieldEVersionhistoryType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEVersionhistoryType: valid values are %v", v, AllowedFieldEVersionhistoryTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEVersionhistoryType) IsValid() bool {
	for _, existing := range AllowedFieldEVersionhistoryTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eVersionhistoryType value
func (v FieldEVersionhistoryType) Ptr() *FieldEVersionhistoryType {
	return &v
}

type NullableFieldEVersionhistoryType struct {
	value *FieldEVersionhistoryType
	isSet bool
}

func (v NullableFieldEVersionhistoryType) Get() *FieldEVersionhistoryType {
	return v.value
}

func (v *NullableFieldEVersionhistoryType) Set(val *FieldEVersionhistoryType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEVersionhistoryType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEVersionhistoryType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEVersionhistoryType(val *FieldEVersionhistoryType) *NullableFieldEVersionhistoryType {
	return &NullableFieldEVersionhistoryType{value: val, isSet: true}
}

func (v NullableFieldEVersionhistoryType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEVersionhistoryType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

