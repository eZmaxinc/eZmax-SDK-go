/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECreditcardtransactionAvsresult The result for the address validation
type FieldECreditcardtransactionAvsresult string

// List of Field-eCreditcardtransactionAvsresult
const (
	MATCH FieldECreditcardtransactionAvsresult = "Match"
	NO_MATCH FieldECreditcardtransactionAvsresult = "NoMatch"
	PARTIAL_MATCH FieldECreditcardtransactionAvsresult = "PartialMatch"
	NOT_IMPLEMENTED FieldECreditcardtransactionAvsresult = "NotImplemented"
	NOT_VERIFIED FieldECreditcardtransactionAvsresult = "NotVerified"
)

// All allowed values of FieldECreditcardtransactionAvsresult enum
var AllowedFieldECreditcardtransactionAvsresultEnumValues = []FieldECreditcardtransactionAvsresult{
	"Match",
	"NoMatch",
	"PartialMatch",
	"NotImplemented",
	"NotVerified",
}

func (v *FieldECreditcardtransactionAvsresult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECreditcardtransactionAvsresult(value)
	for _, existing := range AllowedFieldECreditcardtransactionAvsresultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECreditcardtransactionAvsresult", value)
}

// NewFieldECreditcardtransactionAvsresultFromValue returns a pointer to a valid FieldECreditcardtransactionAvsresult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECreditcardtransactionAvsresultFromValue(v string) (*FieldECreditcardtransactionAvsresult, error) {
	ev := FieldECreditcardtransactionAvsresult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECreditcardtransactionAvsresult: valid values are %v", v, AllowedFieldECreditcardtransactionAvsresultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECreditcardtransactionAvsresult) IsValid() bool {
	for _, existing := range AllowedFieldECreditcardtransactionAvsresultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCreditcardtransactionAvsresult value
func (v FieldECreditcardtransactionAvsresult) Ptr() *FieldECreditcardtransactionAvsresult {
	return &v
}

type NullableFieldECreditcardtransactionAvsresult struct {
	value *FieldECreditcardtransactionAvsresult
	isSet bool
}

func (v NullableFieldECreditcardtransactionAvsresult) Get() *FieldECreditcardtransactionAvsresult {
	return v.value
}

func (v *NullableFieldECreditcardtransactionAvsresult) Set(val *FieldECreditcardtransactionAvsresult) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECreditcardtransactionAvsresult) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECreditcardtransactionAvsresult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECreditcardtransactionAvsresult(val *FieldECreditcardtransactionAvsresult) *NullableFieldECreditcardtransactionAvsresult {
	return &NullableFieldECreditcardtransactionAvsresult{value: val, isSet: true}
}

func (v NullableFieldECreditcardtransactionAvsresult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECreditcardtransactionAvsresult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

