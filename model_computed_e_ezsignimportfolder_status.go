/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// ComputedEEzsignimportfolderStatus The Status of Ezsignimportfolder.
type ComputedEEzsignimportfolderStatus string

// List of Computed-eEzsignimportfolderStatus
const (
	PENDING ComputedEEzsignimportfolderStatus = "Pending"
	COMPLETE ComputedEEzsignimportfolderStatus = "Complete"
)

// All allowed values of ComputedEEzsignimportfolderStatus enum
var AllowedComputedEEzsignimportfolderStatusEnumValues = []ComputedEEzsignimportfolderStatus{
	"Pending",
	"Complete",
}

func (v *ComputedEEzsignimportfolderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ComputedEEzsignimportfolderStatus(value)
	for _, existing := range AllowedComputedEEzsignimportfolderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ComputedEEzsignimportfolderStatus", value)
}

// NewComputedEEzsignimportfolderStatusFromValue returns a pointer to a valid ComputedEEzsignimportfolderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewComputedEEzsignimportfolderStatusFromValue(v string) (*ComputedEEzsignimportfolderStatus, error) {
	ev := ComputedEEzsignimportfolderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ComputedEEzsignimportfolderStatus: valid values are %v", v, AllowedComputedEEzsignimportfolderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ComputedEEzsignimportfolderStatus) IsValid() bool {
	for _, existing := range AllowedComputedEEzsignimportfolderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Computed-eEzsignimportfolderStatus value
func (v ComputedEEzsignimportfolderStatus) Ptr() *ComputedEEzsignimportfolderStatus {
	return &v
}

type NullableComputedEEzsignimportfolderStatus struct {
	value *ComputedEEzsignimportfolderStatus
	isSet bool
}

func (v NullableComputedEEzsignimportfolderStatus) Get() *ComputedEEzsignimportfolderStatus {
	return v.value
}

func (v *NullableComputedEEzsignimportfolderStatus) Set(val *ComputedEEzsignimportfolderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableComputedEEzsignimportfolderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableComputedEEzsignimportfolderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputedEEzsignimportfolderStatus(val *ComputedEEzsignimportfolderStatus) *NullableComputedEEzsignimportfolderStatus {
	return &NullableComputedEEzsignimportfolderStatus{value: val, isSet: true}
}

func (v NullableComputedEEzsignimportfolderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputedEEzsignimportfolderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

