/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserlogintypeAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserlogintypeAutocompleteElementResponse{}

// UserlogintypeAutocompleteElementResponse A Userlogintype AutocompleteElement Response
type UserlogintypeAutocompleteElementResponse struct {
	// The unique ID of the Userlogintype  Valid values:  |Value|Description|Detail| |-|-|-| |1|**Email Only**|The Ezsignsigner will receive a secure link by email| |2|**Email and phone or SMS**|The Ezsignsigner will receive a secure link by email and will need to authenticate using SMS or Phone call. **Additional fee applies**| |3|**Email and secret question**|The Ezsignsigner will receive a secure link by email and will need to authenticate using a predefined question and answer| |4|**In person only**|The Ezsignsigner will only be able to sign \"In-Person\" and there won't be any authentication. No email will be sent for invitation to sign. Make sure you evaluate the risk of signature denial and at minimum, we recommend you use a handwritten signature type| |5|**In person with phone or SMS**|The Ezsignsigner will only be able to sign \"In-Person\" and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**| |6|**Embedded**|The Ezsignsigner will only be able to sign in the embedded solution. No email will be sent for invitation to sign. **Additional fee applies**|   |7|**Embedded with phone or SMS**|The Ezsignsigner will only be able to sign in the embedded solution and will need to authenticate using SMS or Phone call. No email will be sent for invitation to sign. **Additional fee applies**|   |8|**No validation**|The Ezsignsigner will not receive an email and won't have to validate his connection using 2 factor. **Additional fee applies**|      |9|**Sms only**|The Ezsignsigner will not receive an email but will will need to authenticate using SMS. **Additional fee applies**|     
	PkiUserlogintypeID int32 `json:"pkiUserlogintypeID"`
	// The description of the Userlogintype in the language of the requester
	SUserlogintypeDescriptionX string `json:"sUserlogintypeDescriptionX"`
	// Whether the Userlogintype is active or not
	BUserlogintypeIsactive bool `json:"bUserlogintypeIsactive"`
}

type _UserlogintypeAutocompleteElementResponse UserlogintypeAutocompleteElementResponse

// NewUserlogintypeAutocompleteElementResponse instantiates a new UserlogintypeAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserlogintypeAutocompleteElementResponse(pkiUserlogintypeID int32, sUserlogintypeDescriptionX string, bUserlogintypeIsactive bool) *UserlogintypeAutocompleteElementResponse {
	this := UserlogintypeAutocompleteElementResponse{}
	this.PkiUserlogintypeID = pkiUserlogintypeID
	this.SUserlogintypeDescriptionX = sUserlogintypeDescriptionX
	this.BUserlogintypeIsactive = bUserlogintypeIsactive
	return &this
}

// NewUserlogintypeAutocompleteElementResponseWithDefaults instantiates a new UserlogintypeAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserlogintypeAutocompleteElementResponseWithDefaults() *UserlogintypeAutocompleteElementResponse {
	this := UserlogintypeAutocompleteElementResponse{}
	return &this
}

// GetPkiUserlogintypeID returns the PkiUserlogintypeID field value
func (o *UserlogintypeAutocompleteElementResponse) GetPkiUserlogintypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiUserlogintypeID
}

// GetPkiUserlogintypeIDOk returns a tuple with the PkiUserlogintypeID field value
// and a boolean to check if the value has been set.
func (o *UserlogintypeAutocompleteElementResponse) GetPkiUserlogintypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiUserlogintypeID, true
}

// SetPkiUserlogintypeID sets field value
func (o *UserlogintypeAutocompleteElementResponse) SetPkiUserlogintypeID(v int32) {
	o.PkiUserlogintypeID = v
}

// GetSUserlogintypeDescriptionX returns the SUserlogintypeDescriptionX field value
func (o *UserlogintypeAutocompleteElementResponse) GetSUserlogintypeDescriptionX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SUserlogintypeDescriptionX
}

// GetSUserlogintypeDescriptionXOk returns a tuple with the SUserlogintypeDescriptionX field value
// and a boolean to check if the value has been set.
func (o *UserlogintypeAutocompleteElementResponse) GetSUserlogintypeDescriptionXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SUserlogintypeDescriptionX, true
}

// SetSUserlogintypeDescriptionX sets field value
func (o *UserlogintypeAutocompleteElementResponse) SetSUserlogintypeDescriptionX(v string) {
	o.SUserlogintypeDescriptionX = v
}

// GetBUserlogintypeIsactive returns the BUserlogintypeIsactive field value
func (o *UserlogintypeAutocompleteElementResponse) GetBUserlogintypeIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BUserlogintypeIsactive
}

// GetBUserlogintypeIsactiveOk returns a tuple with the BUserlogintypeIsactive field value
// and a boolean to check if the value has been set.
func (o *UserlogintypeAutocompleteElementResponse) GetBUserlogintypeIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BUserlogintypeIsactive, true
}

// SetBUserlogintypeIsactive sets field value
func (o *UserlogintypeAutocompleteElementResponse) SetBUserlogintypeIsactive(v bool) {
	o.BUserlogintypeIsactive = v
}

func (o UserlogintypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserlogintypeAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiUserlogintypeID"] = o.PkiUserlogintypeID
	toSerialize["sUserlogintypeDescriptionX"] = o.SUserlogintypeDescriptionX
	toSerialize["bUserlogintypeIsactive"] = o.BUserlogintypeIsactive
	return toSerialize, nil
}

func (o *UserlogintypeAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiUserlogintypeID",
		"sUserlogintypeDescriptionX",
		"bUserlogintypeIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserlogintypeAutocompleteElementResponse := _UserlogintypeAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserlogintypeAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = UserlogintypeAutocompleteElementResponse(varUserlogintypeAutocompleteElementResponse)

	return err
}

type NullableUserlogintypeAutocompleteElementResponse struct {
	value *UserlogintypeAutocompleteElementResponse
	isSet bool
}

func (v NullableUserlogintypeAutocompleteElementResponse) Get() *UserlogintypeAutocompleteElementResponse {
	return v.value
}

func (v *NullableUserlogintypeAutocompleteElementResponse) Set(val *UserlogintypeAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserlogintypeAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserlogintypeAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserlogintypeAutocompleteElementResponse(val *UserlogintypeAutocompleteElementResponse) *NullableUserlogintypeAutocompleteElementResponse {
	return &NullableUserlogintypeAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableUserlogintypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserlogintypeAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


