/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the ActivesessionGetCurrentV1ResponseMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivesessionGetCurrentV1ResponseMPayload{}

// ActivesessionGetCurrentV1ResponseMPayload Payload for GET /1/object/activesession/getCurrent
type ActivesessionGetCurrentV1ResponseMPayload struct {
	EActivesessionUsertype FieldEActivesessionUsertype `json:"eActivesessionUsertype"`
	EActivesessionOrigin FieldEActivesessionOrigin `json:"eActivesessionOrigin"`
	EActivesessionWeekdaystart FieldEActivesessionWeekdaystart `json:"eActivesessionWeekdaystart"`
	// The unique ID of the Language.  Valid values:  |Value|Description| |-|-| |1|French| |2|English|
	FkiLanguageID int32 `json:"fkiLanguageID"`
	// The Name of the Company in the language of the requester
	SCompanyNameX string `json:"sCompanyNameX"`
	// The Name of the Department in the language of the requester
	SDepartmentNameX string `json:"sDepartmentNameX"`
	// Whether the active session is in debug or not
	BActivesessionDebug bool `json:"bActivesessionDebug"`
	// Whether the active session is superadmin or not
	BActivesessionIssuperadmin bool `json:"bActivesessionIssuperadmin"`
	// The customer code assigned to your account
	PksCustomerCode string `json:"pksCustomerCode"`
	// The unique ID of the Systemconfigurationtype
	FkiSystemconfigurationtypeID int32 `json:"fkiSystemconfigurationtypeID"`
	// The unique ID of the Signature
	FkiSignatureID *int32 `json:"fkiSignatureID,omitempty"`
	// An array of permissions granted to the user or api key
	APkiPermissionID []int32 `json:"a_pkiPermissionID"`
	ObjUserReal ActivesessionResponseCompoundUser `json:"objUserReal"`
	ObjUserCloned *ActivesessionResponseCompoundUser `json:"objUserCloned,omitempty"`
	ObjApikey *ActivesessionResponseCompoundApikey `json:"objApikey,omitempty"`
	// An Array of Registered modules.  These are the modules that are Licensed to be used by the User or the API Key.
	AEModuleInternalname []string `json:"a_eModuleInternalname"`
}

// NewActivesessionGetCurrentV1ResponseMPayload instantiates a new ActivesessionGetCurrentV1ResponseMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivesessionGetCurrentV1ResponseMPayload(eActivesessionUsertype FieldEActivesessionUsertype, eActivesessionOrigin FieldEActivesessionOrigin, eActivesessionWeekdaystart FieldEActivesessionWeekdaystart, fkiLanguageID int32, sCompanyNameX string, sDepartmentNameX string, bActivesessionDebug bool, bActivesessionIssuperadmin bool, pksCustomerCode string, fkiSystemconfigurationtypeID int32, aPkiPermissionID []int32, objUserReal ActivesessionResponseCompoundUser, aEModuleInternalname []string) *ActivesessionGetCurrentV1ResponseMPayload {
	this := ActivesessionGetCurrentV1ResponseMPayload{}
	this.EActivesessionUsertype = eActivesessionUsertype
	this.EActivesessionOrigin = eActivesessionOrigin
	this.EActivesessionWeekdaystart = eActivesessionWeekdaystart
	this.FkiLanguageID = fkiLanguageID
	this.SCompanyNameX = sCompanyNameX
	this.SDepartmentNameX = sDepartmentNameX
	this.BActivesessionDebug = bActivesessionDebug
	this.BActivesessionIssuperadmin = bActivesessionIssuperadmin
	this.PksCustomerCode = pksCustomerCode
	this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID
	this.APkiPermissionID = aPkiPermissionID
	this.ObjUserReal = objUserReal
	this.AEModuleInternalname = aEModuleInternalname
	return &this
}

// NewActivesessionGetCurrentV1ResponseMPayloadWithDefaults instantiates a new ActivesessionGetCurrentV1ResponseMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivesessionGetCurrentV1ResponseMPayloadWithDefaults() *ActivesessionGetCurrentV1ResponseMPayload {
	this := ActivesessionGetCurrentV1ResponseMPayload{}
	return &this
}

// GetEActivesessionUsertype returns the EActivesessionUsertype field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionUsertype() FieldEActivesessionUsertype {
	if o == nil {
		var ret FieldEActivesessionUsertype
		return ret
	}

	return o.EActivesessionUsertype
}

// GetEActivesessionUsertypeOk returns a tuple with the EActivesessionUsertype field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionUsertypeOk() (*FieldEActivesessionUsertype, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionUsertype, true
}

// SetEActivesessionUsertype sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetEActivesessionUsertype(v FieldEActivesessionUsertype) {
	o.EActivesessionUsertype = v
}

// GetEActivesessionOrigin returns the EActivesessionOrigin field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionOrigin() FieldEActivesessionOrigin {
	if o == nil {
		var ret FieldEActivesessionOrigin
		return ret
	}

	return o.EActivesessionOrigin
}

// GetEActivesessionOriginOk returns a tuple with the EActivesessionOrigin field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionOriginOk() (*FieldEActivesessionOrigin, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionOrigin, true
}

// SetEActivesessionOrigin sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetEActivesessionOrigin(v FieldEActivesessionOrigin) {
	o.EActivesessionOrigin = v
}

// GetEActivesessionWeekdaystart returns the EActivesessionWeekdaystart field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionWeekdaystart() FieldEActivesessionWeekdaystart {
	if o == nil {
		var ret FieldEActivesessionWeekdaystart
		return ret
	}

	return o.EActivesessionWeekdaystart
}

// GetEActivesessionWeekdaystartOk returns a tuple with the EActivesessionWeekdaystart field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetEActivesessionWeekdaystartOk() (*FieldEActivesessionWeekdaystart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EActivesessionWeekdaystart, true
}

// SetEActivesessionWeekdaystart sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetEActivesessionWeekdaystart(v FieldEActivesessionWeekdaystart) {
	o.EActivesessionWeekdaystart = v
}

// GetFkiLanguageID returns the FkiLanguageID field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiLanguageID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiLanguageID
}

// GetFkiLanguageIDOk returns a tuple with the FkiLanguageID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiLanguageIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiLanguageID, true
}

// SetFkiLanguageID sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetFkiLanguageID(v int32) {
	o.FkiLanguageID = v
}

// GetSCompanyNameX returns the SCompanyNameX field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetSCompanyNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SCompanyNameX
}

// GetSCompanyNameXOk returns a tuple with the SCompanyNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetSCompanyNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SCompanyNameX, true
}

// SetSCompanyNameX sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetSCompanyNameX(v string) {
	o.SCompanyNameX = v
}

// GetSDepartmentNameX returns the SDepartmentNameX field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetSDepartmentNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SDepartmentNameX
}

// GetSDepartmentNameXOk returns a tuple with the SDepartmentNameX field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetSDepartmentNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SDepartmentNameX, true
}

// SetSDepartmentNameX sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetSDepartmentNameX(v string) {
	o.SDepartmentNameX = v
}

// GetBActivesessionDebug returns the BActivesessionDebug field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetBActivesessionDebug() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BActivesessionDebug
}

// GetBActivesessionDebugOk returns a tuple with the BActivesessionDebug field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetBActivesessionDebugOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BActivesessionDebug, true
}

// SetBActivesessionDebug sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetBActivesessionDebug(v bool) {
	o.BActivesessionDebug = v
}

// GetBActivesessionIssuperadmin returns the BActivesessionIssuperadmin field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetBActivesessionIssuperadmin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BActivesessionIssuperadmin
}

// GetBActivesessionIssuperadminOk returns a tuple with the BActivesessionIssuperadmin field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetBActivesessionIssuperadminOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BActivesessionIssuperadmin, true
}

// SetBActivesessionIssuperadmin sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetBActivesessionIssuperadmin(v bool) {
	o.BActivesessionIssuperadmin = v
}

// GetPksCustomerCode returns the PksCustomerCode field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetPksCustomerCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PksCustomerCode
}

// GetPksCustomerCodeOk returns a tuple with the PksCustomerCode field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetPksCustomerCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PksCustomerCode, true
}

// SetPksCustomerCode sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetPksCustomerCode(v string) {
	o.PksCustomerCode = v
}

// GetFkiSystemconfigurationtypeID returns the FkiSystemconfigurationtypeID field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiSystemconfigurationtypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FkiSystemconfigurationtypeID
}

// GetFkiSystemconfigurationtypeIDOk returns a tuple with the FkiSystemconfigurationtypeID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiSystemconfigurationtypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FkiSystemconfigurationtypeID, true
}

// SetFkiSystemconfigurationtypeID sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetFkiSystemconfigurationtypeID(v int32) {
	o.FkiSystemconfigurationtypeID = v
}

// GetFkiSignatureID returns the FkiSignatureID field value if set, zero value otherwise.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiSignatureID() int32 {
	if o == nil || IsNil(o.FkiSignatureID) {
		var ret int32
		return ret
	}
	return *o.FkiSignatureID
}

// GetFkiSignatureIDOk returns a tuple with the FkiSignatureID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetFkiSignatureIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FkiSignatureID) {
		return nil, false
	}
	return o.FkiSignatureID, true
}

// HasFkiSignatureID returns a boolean if a field has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) HasFkiSignatureID() bool {
	if o != nil && !IsNil(o.FkiSignatureID) {
		return true
	}

	return false
}

// SetFkiSignatureID gets a reference to the given int32 and assigns it to the FkiSignatureID field.
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetFkiSignatureID(v int32) {
	o.FkiSignatureID = &v
}

// GetAPkiPermissionID returns the APkiPermissionID field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetAPkiPermissionID() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.APkiPermissionID
}

// GetAPkiPermissionIDOk returns a tuple with the APkiPermissionID field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetAPkiPermissionIDOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.APkiPermissionID, true
}

// SetAPkiPermissionID sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetAPkiPermissionID(v []int32) {
	o.APkiPermissionID = v
}

// GetObjUserReal returns the ObjUserReal field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjUserReal() ActivesessionResponseCompoundUser {
	if o == nil {
		var ret ActivesessionResponseCompoundUser
		return ret
	}

	return o.ObjUserReal
}

// GetObjUserRealOk returns a tuple with the ObjUserReal field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjUserRealOk() (*ActivesessionResponseCompoundUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjUserReal, true
}

// SetObjUserReal sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetObjUserReal(v ActivesessionResponseCompoundUser) {
	o.ObjUserReal = v
}

// GetObjUserCloned returns the ObjUserCloned field value if set, zero value otherwise.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjUserCloned() ActivesessionResponseCompoundUser {
	if o == nil || IsNil(o.ObjUserCloned) {
		var ret ActivesessionResponseCompoundUser
		return ret
	}
	return *o.ObjUserCloned
}

// GetObjUserClonedOk returns a tuple with the ObjUserCloned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjUserClonedOk() (*ActivesessionResponseCompoundUser, bool) {
	if o == nil || IsNil(o.ObjUserCloned) {
		return nil, false
	}
	return o.ObjUserCloned, true
}

// HasObjUserCloned returns a boolean if a field has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) HasObjUserCloned() bool {
	if o != nil && !IsNil(o.ObjUserCloned) {
		return true
	}

	return false
}

// SetObjUserCloned gets a reference to the given ActivesessionResponseCompoundUser and assigns it to the ObjUserCloned field.
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetObjUserCloned(v ActivesessionResponseCompoundUser) {
	o.ObjUserCloned = &v
}

// GetObjApikey returns the ObjApikey field value if set, zero value otherwise.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjApikey() ActivesessionResponseCompoundApikey {
	if o == nil || IsNil(o.ObjApikey) {
		var ret ActivesessionResponseCompoundApikey
		return ret
	}
	return *o.ObjApikey
}

// GetObjApikeyOk returns a tuple with the ObjApikey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetObjApikeyOk() (*ActivesessionResponseCompoundApikey, bool) {
	if o == nil || IsNil(o.ObjApikey) {
		return nil, false
	}
	return o.ObjApikey, true
}

// HasObjApikey returns a boolean if a field has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) HasObjApikey() bool {
	if o != nil && !IsNil(o.ObjApikey) {
		return true
	}

	return false
}

// SetObjApikey gets a reference to the given ActivesessionResponseCompoundApikey and assigns it to the ObjApikey field.
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetObjApikey(v ActivesessionResponseCompoundApikey) {
	o.ObjApikey = &v
}

// GetAEModuleInternalname returns the AEModuleInternalname field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetAEModuleInternalname() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AEModuleInternalname
}

// GetAEModuleInternalnameOk returns a tuple with the AEModuleInternalname field value
// and a boolean to check if the value has been set.
func (o *ActivesessionGetCurrentV1ResponseMPayload) GetAEModuleInternalnameOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AEModuleInternalname, true
}

// SetAEModuleInternalname sets field value
func (o *ActivesessionGetCurrentV1ResponseMPayload) SetAEModuleInternalname(v []string) {
	o.AEModuleInternalname = v
}

func (o ActivesessionGetCurrentV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivesessionGetCurrentV1ResponseMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eActivesessionUsertype"] = o.EActivesessionUsertype
	toSerialize["eActivesessionOrigin"] = o.EActivesessionOrigin
	toSerialize["eActivesessionWeekdaystart"] = o.EActivesessionWeekdaystart
	toSerialize["fkiLanguageID"] = o.FkiLanguageID
	toSerialize["sCompanyNameX"] = o.SCompanyNameX
	toSerialize["sDepartmentNameX"] = o.SDepartmentNameX
	toSerialize["bActivesessionDebug"] = o.BActivesessionDebug
	toSerialize["bActivesessionIssuperadmin"] = o.BActivesessionIssuperadmin
	toSerialize["pksCustomerCode"] = o.PksCustomerCode
	toSerialize["fkiSystemconfigurationtypeID"] = o.FkiSystemconfigurationtypeID
	if !IsNil(o.FkiSignatureID) {
		toSerialize["fkiSignatureID"] = o.FkiSignatureID
	}
	toSerialize["a_pkiPermissionID"] = o.APkiPermissionID
	toSerialize["objUserReal"] = o.ObjUserReal
	if !IsNil(o.ObjUserCloned) {
		toSerialize["objUserCloned"] = o.ObjUserCloned
	}
	if !IsNil(o.ObjApikey) {
		toSerialize["objApikey"] = o.ObjApikey
	}
	toSerialize["a_eModuleInternalname"] = o.AEModuleInternalname
	return toSerialize, nil
}

type NullableActivesessionGetCurrentV1ResponseMPayload struct {
	value *ActivesessionGetCurrentV1ResponseMPayload
	isSet bool
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) Get() *ActivesessionGetCurrentV1ResponseMPayload {
	return v.value
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) Set(val *ActivesessionGetCurrentV1ResponseMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivesessionGetCurrentV1ResponseMPayload(val *ActivesessionGetCurrentV1ResponseMPayload) *NullableActivesessionGetCurrentV1ResponseMPayload {
	return &NullableActivesessionGetCurrentV1ResponseMPayload{value: val, isSet: true}
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


