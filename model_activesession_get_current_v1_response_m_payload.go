/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActivesessionGetCurrentV1ResponseMPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivesessionGetCurrentV1ResponseMPayload{}

// ActivesessionGetCurrentV1ResponseMPayload Payload for GET /1/object/activesession/getCurrent
type ActivesessionGetCurrentV1ResponseMPayload struct {
	ActivesessionResponseCompound
}

type _ActivesessionGetCurrentV1ResponseMPayload ActivesessionGetCurrentV1ResponseMPayload

// NewActivesessionGetCurrentV1ResponseMPayload instantiates a new ActivesessionGetCurrentV1ResponseMPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivesessionGetCurrentV1ResponseMPayload(eActivesessionUsertype FieldEActivesessionUsertype, eActivesessionOrigin FieldEActivesessionOrigin, eActivesessionWeekdaystart FieldEActivesessionWeekdaystart, fkiLanguageID int32, sCompanyNameX string, sDepartmentNameX string, bActivesessionDebug bool, bActivesessionIssuperadmin bool, eActivesessionEzsignaccess FieldEActivesessionEzsignaccess, pksCustomerCode string, fkiSystemconfigurationtypeID int32, eUserEzsignaccess FieldEUserEzsignaccess, aPkiPermissionID []int32, objUserReal ActivesessionResponseCompoundUser, aEModuleInternalname []string) *ActivesessionGetCurrentV1ResponseMPayload {
	this := ActivesessionGetCurrentV1ResponseMPayload{}
	this.EActivesessionUsertype = eActivesessionUsertype
	this.EActivesessionOrigin = eActivesessionOrigin
	this.EActivesessionWeekdaystart = eActivesessionWeekdaystart
	this.FkiLanguageID = fkiLanguageID
	this.SCompanyNameX = sCompanyNameX
	this.SDepartmentNameX = sDepartmentNameX
	this.BActivesessionDebug = bActivesessionDebug
	this.BActivesessionIssuperadmin = bActivesessionIssuperadmin
	this.EActivesessionEzsignaccess = eActivesessionEzsignaccess
	this.PksCustomerCode = pksCustomerCode
	this.FkiSystemconfigurationtypeID = fkiSystemconfigurationtypeID
	this.EUserEzsignaccess = eUserEzsignaccess
	this.APkiPermissionID = aPkiPermissionID
	this.ObjUserReal = objUserReal
	this.AEModuleInternalname = aEModuleInternalname
	return &this
}

// NewActivesessionGetCurrentV1ResponseMPayloadWithDefaults instantiates a new ActivesessionGetCurrentV1ResponseMPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivesessionGetCurrentV1ResponseMPayloadWithDefaults() *ActivesessionGetCurrentV1ResponseMPayload {
	this := ActivesessionGetCurrentV1ResponseMPayload{}
	return &this
}

func (o ActivesessionGetCurrentV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivesessionGetCurrentV1ResponseMPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	return toSerialize, nil
}

func (o *ActivesessionGetCurrentV1ResponseMPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eActivesessionUsertype",
		"eActivesessionOrigin",
		"eActivesessionWeekdaystart",
		"fkiLanguageID",
		"sCompanyNameX",
		"sDepartmentNameX",
		"bActivesessionDebug",
		"bActivesessionIssuperadmin",
		"eActivesessionEzsignaccess",
		"pksCustomerCode",
		"fkiSystemconfigurationtypeID",
		"eUserEzsignaccess",
		"a_pkiPermissionID",
		"objUserReal",
		"a_eModuleInternalname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActivesessionGetCurrentV1ResponseMPayload := _ActivesessionGetCurrentV1ResponseMPayload{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActivesessionGetCurrentV1ResponseMPayload)

	if err != nil {
		return err
	}

	*o = ActivesessionGetCurrentV1ResponseMPayload(varActivesessionGetCurrentV1ResponseMPayload)

	return err
}

type NullableActivesessionGetCurrentV1ResponseMPayload struct {
	value *ActivesessionGetCurrentV1ResponseMPayload
	isSet bool
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) Get() *ActivesessionGetCurrentV1ResponseMPayload {
	return v.value
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) Set(val *ActivesessionGetCurrentV1ResponseMPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivesessionGetCurrentV1ResponseMPayload(val *ActivesessionGetCurrentV1ResponseMPayload) *NullableActivesessionGetCurrentV1ResponseMPayload {
	return &NullableActivesessionGetCurrentV1ResponseMPayload{value: val, isSet: true}
}

func (v NullableActivesessionGetCurrentV1ResponseMPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivesessionGetCurrentV1ResponseMPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


