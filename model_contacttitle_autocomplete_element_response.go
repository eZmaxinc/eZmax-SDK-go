/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContacttitleAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContacttitleAutocompleteElementResponse{}

// ContacttitleAutocompleteElementResponse A Contacttitle AutocompleteElement Response
type ContacttitleAutocompleteElementResponse struct {
	// The unique ID of the Contacttitle.  Valid values:  |Value|Description| |-|-| |1|Ms.| |2|Mr.| |4|(Blank)| |5|Me (For Notaries)|
	PkiContacttitleID int32 `json:"pkiContacttitleID"`
	// The name of the Contacttitle in the language of the requester
	SContacttitleNameX string `json:"sContacttitleNameX" validate:"regexp=^.{0,10}$"`
}

type _ContacttitleAutocompleteElementResponse ContacttitleAutocompleteElementResponse

// NewContacttitleAutocompleteElementResponse instantiates a new ContacttitleAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContacttitleAutocompleteElementResponse(pkiContacttitleID int32, sContacttitleNameX string) *ContacttitleAutocompleteElementResponse {
	this := ContacttitleAutocompleteElementResponse{}
	this.PkiContacttitleID = pkiContacttitleID
	this.SContacttitleNameX = sContacttitleNameX
	return &this
}

// NewContacttitleAutocompleteElementResponseWithDefaults instantiates a new ContacttitleAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContacttitleAutocompleteElementResponseWithDefaults() *ContacttitleAutocompleteElementResponse {
	this := ContacttitleAutocompleteElementResponse{}
	return &this
}

// GetPkiContacttitleID returns the PkiContacttitleID field value
func (o *ContacttitleAutocompleteElementResponse) GetPkiContacttitleID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiContacttitleID
}

// GetPkiContacttitleIDOk returns a tuple with the PkiContacttitleID field value
// and a boolean to check if the value has been set.
func (o *ContacttitleAutocompleteElementResponse) GetPkiContacttitleIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiContacttitleID, true
}

// SetPkiContacttitleID sets field value
func (o *ContacttitleAutocompleteElementResponse) SetPkiContacttitleID(v int32) {
	o.PkiContacttitleID = v
}

// GetSContacttitleNameX returns the SContacttitleNameX field value
func (o *ContacttitleAutocompleteElementResponse) GetSContacttitleNameX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SContacttitleNameX
}

// GetSContacttitleNameXOk returns a tuple with the SContacttitleNameX field value
// and a boolean to check if the value has been set.
func (o *ContacttitleAutocompleteElementResponse) GetSContacttitleNameXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SContacttitleNameX, true
}

// SetSContacttitleNameX sets field value
func (o *ContacttitleAutocompleteElementResponse) SetSContacttitleNameX(v string) {
	o.SContacttitleNameX = v
}

func (o ContacttitleAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContacttitleAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiContacttitleID"] = o.PkiContacttitleID
	toSerialize["sContacttitleNameX"] = o.SContacttitleNameX
	return toSerialize, nil
}

func (o *ContacttitleAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiContacttitleID",
		"sContacttitleNameX",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContacttitleAutocompleteElementResponse := _ContacttitleAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContacttitleAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = ContacttitleAutocompleteElementResponse(varContacttitleAutocompleteElementResponse)

	return err
}

type NullableContacttitleAutocompleteElementResponse struct {
	value *ContacttitleAutocompleteElementResponse
	isSet bool
}

func (v NullableContacttitleAutocompleteElementResponse) Get() *ContacttitleAutocompleteElementResponse {
	return v.value
}

func (v *NullableContacttitleAutocompleteElementResponse) Set(val *ContacttitleAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableContacttitleAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableContacttitleAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContacttitleAutocompleteElementResponse(val *ContacttitleAutocompleteElementResponse) *NullableContacttitleAutocompleteElementResponse {
	return &NullableContacttitleAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableContacttitleAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContacttitleAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


