/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldECustomerMarketingcorrespondence The marketingcorrespondence of the Customer
type FieldECustomerMarketingcorrespondence string

// List of Field-eCustomerMarketingcorrespondence
const (
	NO FieldECustomerMarketingcorrespondence = "No"
	EMAIL FieldECustomerMarketingcorrespondence = "Email"
	MAIL FieldECustomerMarketingcorrespondence = "Mail"
	ANY FieldECustomerMarketingcorrespondence = "Any"
)

// All allowed values of FieldECustomerMarketingcorrespondence enum
var AllowedFieldECustomerMarketingcorrespondenceEnumValues = []FieldECustomerMarketingcorrespondence{
	"No",
	"Email",
	"Mail",
	"Any",
}

func (v *FieldECustomerMarketingcorrespondence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldECustomerMarketingcorrespondence(value)
	for _, existing := range AllowedFieldECustomerMarketingcorrespondenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldECustomerMarketingcorrespondence", value)
}

// NewFieldECustomerMarketingcorrespondenceFromValue returns a pointer to a valid FieldECustomerMarketingcorrespondence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldECustomerMarketingcorrespondenceFromValue(v string) (*FieldECustomerMarketingcorrespondence, error) {
	ev := FieldECustomerMarketingcorrespondence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldECustomerMarketingcorrespondence: valid values are %v", v, AllowedFieldECustomerMarketingcorrespondenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldECustomerMarketingcorrespondence) IsValid() bool {
	for _, existing := range AllowedFieldECustomerMarketingcorrespondenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eCustomerMarketingcorrespondence value
func (v FieldECustomerMarketingcorrespondence) Ptr() *FieldECustomerMarketingcorrespondence {
	return &v
}

type NullableFieldECustomerMarketingcorrespondence struct {
	value *FieldECustomerMarketingcorrespondence
	isSet bool
}

func (v NullableFieldECustomerMarketingcorrespondence) Get() *FieldECustomerMarketingcorrespondence {
	return v.value
}

func (v *NullableFieldECustomerMarketingcorrespondence) Set(val *FieldECustomerMarketingcorrespondence) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldECustomerMarketingcorrespondence) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldECustomerMarketingcorrespondence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldECustomerMarketingcorrespondence(val *FieldECustomerMarketingcorrespondence) *NullableFieldECustomerMarketingcorrespondence {
	return &NullableFieldECustomerMarketingcorrespondence{value: val, isSet: true}
}

func (v NullableFieldECustomerMarketingcorrespondence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldECustomerMarketingcorrespondence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

