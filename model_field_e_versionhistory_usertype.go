/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEVersionhistoryUsertype The Usertype by which the Versionhistory should be visible
type FieldEVersionhistoryUsertype string

// List of Field-eVersionhistoryUsertype
const (
	EMPTY FieldEVersionhistoryUsertype = ""
	AGENT_BROKER FieldEVersionhistoryUsertype = "AgentBroker"
	EZSIGN_USER FieldEVersionhistoryUsertype = "EzsignUser"
	NORMAL FieldEVersionhistoryUsertype = "Normal"
)

// All allowed values of FieldEVersionhistoryUsertype enum
var AllowedFieldEVersionhistoryUsertypeEnumValues = []FieldEVersionhistoryUsertype{
	"",
	"AgentBroker",
	"EzsignUser",
	"Normal",
}

func (v *FieldEVersionhistoryUsertype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEVersionhistoryUsertype(value)
	for _, existing := range AllowedFieldEVersionhistoryUsertypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEVersionhistoryUsertype", value)
}

// NewFieldEVersionhistoryUsertypeFromValue returns a pointer to a valid FieldEVersionhistoryUsertype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEVersionhistoryUsertypeFromValue(v string) (*FieldEVersionhistoryUsertype, error) {
	ev := FieldEVersionhistoryUsertype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEVersionhistoryUsertype: valid values are %v", v, AllowedFieldEVersionhistoryUsertypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEVersionhistoryUsertype) IsValid() bool {
	for _, existing := range AllowedFieldEVersionhistoryUsertypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eVersionhistoryUsertype value
func (v FieldEVersionhistoryUsertype) Ptr() *FieldEVersionhistoryUsertype {
	return &v
}

type NullableFieldEVersionhistoryUsertype struct {
	value *FieldEVersionhistoryUsertype
	isSet bool
}

func (v NullableFieldEVersionhistoryUsertype) Get() *FieldEVersionhistoryUsertype {
	return v.value
}

func (v *NullableFieldEVersionhistoryUsertype) Set(val *FieldEVersionhistoryUsertype) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEVersionhistoryUsertype) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEVersionhistoryUsertype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEVersionhistoryUsertype(val *FieldEVersionhistoryUsertype) *NullableFieldEVersionhistoryUsertype {
	return &NullableFieldEVersionhistoryUsertype{value: val, isSet: true}
}

func (v NullableFieldEVersionhistoryUsertype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEVersionhistoryUsertype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

