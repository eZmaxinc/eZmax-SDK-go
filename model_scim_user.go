/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ScimUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScimUser{}

// ScimUser struct for ScimUser
type ScimUser struct {
	Id *string `json:"id,omitempty"`
	// A service provider's unique identifier for the user, typically used by the user to directly authenticate to the service provider.  Often displayed to the user as their unique identifier within the system (as opposed to \"id\" or \"externalId\", which are generally opaque and not user-friendly identifiers).  Each User MUST include a non-empty userName value.  This identifier MUST be unique across the service provider's entire set of Users.  This attribute is REQUIRED and is case insensitive.
	UserName string `json:"userName"`
	DisplayName *string `json:"displayName,omitempty"`
	Emails []ScimEmail `json:"emails,omitempty"`
}

type _ScimUser ScimUser

// NewScimUser instantiates a new ScimUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScimUser(userName string) *ScimUser {
	this := ScimUser{}
	this.UserName = userName
	return &this
}

// NewScimUserWithDefaults instantiates a new ScimUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScimUserWithDefaults() *ScimUser {
	this := ScimUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScimUser) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScimUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScimUser) SetId(v string) {
	o.Id = &v
}

// GetUserName returns the UserName field value
func (o *ScimUser) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *ScimUser) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *ScimUser) SetUserName(v string) {
	o.UserName = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *ScimUser) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ScimUser) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *ScimUser) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *ScimUser) GetEmails() []ScimEmail {
	if o == nil || IsNil(o.Emails) {
		var ret []ScimEmail
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScimUser) GetEmailsOk() ([]ScimEmail, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *ScimUser) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []ScimEmail and assigns it to the Emails field.
func (o *ScimUser) SetEmails(v []ScimEmail) {
	o.Emails = v
}

func (o ScimUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScimUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["userName"] = o.UserName
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	return toSerialize, nil
}

func (o *ScimUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScimUser := _ScimUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varScimUser)

	if err != nil {
		return err
	}

	*o = ScimUser(varScimUser)

	return err
}

type NullableScimUser struct {
	value *ScimUser
	isSet bool
}

func (v NullableScimUser) Get() *ScimUser {
	return v.value
}

func (v *NullableScimUser) Set(val *ScimUser) {
	v.value = val
	v.isSet = true
}

func (v NullableScimUser) IsSet() bool {
	return v.isSet
}

func (v *NullableScimUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScimUser(val *ScimUser) *NullableScimUser {
	return &NullableScimUser{value: val, isSet: true}
}

func (v NullableScimUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScimUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


