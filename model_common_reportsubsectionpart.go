/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonReportsubsectionpart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonReportsubsectionpart{}

// CommonReportsubsectionpart A part in the Reportsubsection 
type CommonReportsubsectionpart struct {
	// The type of the Reportsubsectionpart
	EReportsubsectionpartType string `json:"eReportsubsectionpartType"`
	AObjReportrow []CommonReportrow `json:"a_objReportrow"`
}

type _CommonReportsubsectionpart CommonReportsubsectionpart

// NewCommonReportsubsectionpart instantiates a new CommonReportsubsectionpart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonReportsubsectionpart(eReportsubsectionpartType string, aObjReportrow []CommonReportrow) *CommonReportsubsectionpart {
	this := CommonReportsubsectionpart{}
	this.EReportsubsectionpartType = eReportsubsectionpartType
	this.AObjReportrow = aObjReportrow
	return &this
}

// NewCommonReportsubsectionpartWithDefaults instantiates a new CommonReportsubsectionpart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonReportsubsectionpartWithDefaults() *CommonReportsubsectionpart {
	this := CommonReportsubsectionpart{}
	return &this
}

// GetEReportsubsectionpartType returns the EReportsubsectionpartType field value
func (o *CommonReportsubsectionpart) GetEReportsubsectionpartType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EReportsubsectionpartType
}

// GetEReportsubsectionpartTypeOk returns a tuple with the EReportsubsectionpartType field value
// and a boolean to check if the value has been set.
func (o *CommonReportsubsectionpart) GetEReportsubsectionpartTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EReportsubsectionpartType, true
}

// SetEReportsubsectionpartType sets field value
func (o *CommonReportsubsectionpart) SetEReportsubsectionpartType(v string) {
	o.EReportsubsectionpartType = v
}

// GetAObjReportrow returns the AObjReportrow field value
func (o *CommonReportsubsectionpart) GetAObjReportrow() []CommonReportrow {
	if o == nil {
		var ret []CommonReportrow
		return ret
	}

	return o.AObjReportrow
}

// GetAObjReportrowOk returns a tuple with the AObjReportrow field value
// and a boolean to check if the value has been set.
func (o *CommonReportsubsectionpart) GetAObjReportrowOk() ([]CommonReportrow, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjReportrow, true
}

// SetAObjReportrow sets field value
func (o *CommonReportsubsectionpart) SetAObjReportrow(v []CommonReportrow) {
	o.AObjReportrow = v
}

func (o CommonReportsubsectionpart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonReportsubsectionpart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["eReportsubsectionpartType"] = o.EReportsubsectionpartType
	toSerialize["a_objReportrow"] = o.AObjReportrow
	return toSerialize, nil
}

func (o *CommonReportsubsectionpart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"eReportsubsectionpartType",
		"a_objReportrow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonReportsubsectionpart := _CommonReportsubsectionpart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonReportsubsectionpart)

	if err != nil {
		return err
	}

	*o = CommonReportsubsectionpart(varCommonReportsubsectionpart)

	return err
}

type NullableCommonReportsubsectionpart struct {
	value *CommonReportsubsectionpart
	isSet bool
}

func (v NullableCommonReportsubsectionpart) Get() *CommonReportsubsectionpart {
	return v.value
}

func (v *NullableCommonReportsubsectionpart) Set(val *CommonReportsubsectionpart) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonReportsubsectionpart) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonReportsubsectionpart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonReportsubsectionpart(val *CommonReportsubsectionpart) *NullableCommonReportsubsectionpart {
	return &NullableCommonReportsubsectionpart{value: val, isSet: true}
}

func (v NullableCommonReportsubsectionpart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonReportsubsectionpart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


