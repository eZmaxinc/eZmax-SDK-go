/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzsignformfieldRequestCompound type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzsignformfieldRequestCompound{}

// EzsignformfieldRequestCompound An Ezsignformfield Object and children to create a complete structure
type EzsignformfieldRequestCompound struct {
	EzsignformfieldRequest
	AObjEzsignelementdependency []EzsignelementdependencyRequestCompound `json:"a_objEzsignelementdependency,omitempty"`
}

type _EzsignformfieldRequestCompound EzsignformfieldRequestCompound

// NewEzsignformfieldRequestCompound instantiates a new EzsignformfieldRequestCompound object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzsignformfieldRequestCompound(iEzsignpagePagenumber int32, sEzsignformfieldLabel string, iEzsignformfieldX int32, iEzsignformfieldY int32, iEzsignformfieldWidth int32, iEzsignformfieldHeight int32) *EzsignformfieldRequestCompound {
	this := EzsignformfieldRequestCompound{}
	this.IEzsignpagePagenumber = iEzsignpagePagenumber
	this.SEzsignformfieldLabel = sEzsignformfieldLabel
	this.IEzsignformfieldX = iEzsignformfieldX
	this.IEzsignformfieldY = iEzsignformfieldY
	this.IEzsignformfieldWidth = iEzsignformfieldWidth
	this.IEzsignformfieldHeight = iEzsignformfieldHeight
	return &this
}

// NewEzsignformfieldRequestCompoundWithDefaults instantiates a new EzsignformfieldRequestCompound object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzsignformfieldRequestCompoundWithDefaults() *EzsignformfieldRequestCompound {
	this := EzsignformfieldRequestCompound{}
	return &this
}

// GetAObjEzsignelementdependency returns the AObjEzsignelementdependency field value if set, zero value otherwise.
func (o *EzsignformfieldRequestCompound) GetAObjEzsignelementdependency() []EzsignelementdependencyRequestCompound {
	if o == nil || IsNil(o.AObjEzsignelementdependency) {
		var ret []EzsignelementdependencyRequestCompound
		return ret
	}
	return o.AObjEzsignelementdependency
}

// GetAObjEzsignelementdependencyOk returns a tuple with the AObjEzsignelementdependency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EzsignformfieldRequestCompound) GetAObjEzsignelementdependencyOk() ([]EzsignelementdependencyRequestCompound, bool) {
	if o == nil || IsNil(o.AObjEzsignelementdependency) {
		return nil, false
	}
	return o.AObjEzsignelementdependency, true
}

// HasAObjEzsignelementdependency returns a boolean if a field has been set.
func (o *EzsignformfieldRequestCompound) HasAObjEzsignelementdependency() bool {
	if o != nil && !IsNil(o.AObjEzsignelementdependency) {
		return true
	}

	return false
}

// SetAObjEzsignelementdependency gets a reference to the given []EzsignelementdependencyRequestCompound and assigns it to the AObjEzsignelementdependency field.
func (o *EzsignformfieldRequestCompound) SetAObjEzsignelementdependency(v []EzsignelementdependencyRequestCompound) {
	o.AObjEzsignelementdependency = v
}

func (o EzsignformfieldRequestCompound) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzsignformfieldRequestCompound) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AObjEzsignelementdependency) {
		toSerialize["a_objEzsignelementdependency"] = o.AObjEzsignelementdependency
	}
	return toSerialize, nil
}

func (o *EzsignformfieldRequestCompound) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"iEzsignpagePagenumber",
		"sEzsignformfieldLabel",
		"iEzsignformfieldX",
		"iEzsignformfieldY",
		"iEzsignformfieldWidth",
		"iEzsignformfieldHeight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzsignformfieldRequestCompound := _EzsignformfieldRequestCompound{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzsignformfieldRequestCompound)

	if err != nil {
		return err
	}

	*o = EzsignformfieldRequestCompound(varEzsignformfieldRequestCompound)

	return err
}

type NullableEzsignformfieldRequestCompound struct {
	value *EzsignformfieldRequestCompound
	isSet bool
}

func (v NullableEzsignformfieldRequestCompound) Get() *EzsignformfieldRequestCompound {
	return v.value
}

func (v *NullableEzsignformfieldRequestCompound) Set(val *EzsignformfieldRequestCompound) {
	v.value = val
	v.isSet = true
}

func (v NullableEzsignformfieldRequestCompound) IsSet() bool {
	return v.isSet
}

func (v *NullableEzsignformfieldRequestCompound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzsignformfieldRequestCompound(val *EzsignformfieldRequestCompound) *NullableEzsignformfieldRequestCompound {
	return &NullableEzsignformfieldRequestCompound{value: val, isSet: true}
}

func (v NullableEzsignformfieldRequestCompound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzsignformfieldRequestCompound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


