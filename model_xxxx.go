/*
eZmax API Definition

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.1.4
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// Xxxx Test
type Xxxx struct {
	Foo int32 `json:"foo"`
	Bar int32 `json:"bar"`
}

// NewXxxx instantiates a new Xxxx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewXxxx(foo int32, bar int32) *Xxxx {
	this := Xxxx{}
	this.Foo = foo
	this.Bar = bar
	return &this
}

// NewXxxxWithDefaults instantiates a new Xxxx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewXxxxWithDefaults() *Xxxx {
	this := Xxxx{}
	return &this
}

// GetFoo returns the Foo field value
func (o *Xxxx) GetFoo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Foo
}

// GetFooOk returns a tuple with the Foo field value
// and a boolean to check if the value has been set.
func (o *Xxxx) GetFooOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Foo, true
}

// SetFoo sets field value
func (o *Xxxx) SetFoo(v int32) {
	o.Foo = v
}

// GetBar returns the Bar field value
func (o *Xxxx) GetBar() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bar
}

// GetBarOk returns a tuple with the Bar field value
// and a boolean to check if the value has been set.
func (o *Xxxx) GetBarOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Bar, true
}

// SetBar sets field value
func (o *Xxxx) SetBar(v int32) {
	o.Bar = v
}

func (o Xxxx) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["foo"] = o.Foo
	}
	if true {
		toSerialize["bar"] = o.Bar
	}
	return json.Marshal(toSerialize)
}

type NullableXxxx struct {
	value *Xxxx
	isSet bool
}

func (v NullableXxxx) Get() *Xxxx {
	return v.value
}

func (v *NullableXxxx) Set(val *Xxxx) {
	v.value = val
	v.isSet = true
}

func (v NullableXxxx) IsSet() bool {
	return v.isSet
}

func (v *NullableXxxx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableXxxx(val *Xxxx) *NullableXxxx {
	return &NullableXxxx{value: val, isSet: true}
}

func (v NullableXxxx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableXxxx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


