/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsignannotationType The type of the Ezsignannotation.  1. **StrikethroughBlock** is a box with hatching. 2. **StrikethroughLine** is a red line to cross words. 3. **Text** is a simple Text.
type FieldEEzsignannotationType string

// List of Field-eEzsignannotationType
const (
	STRIKETHROUGH_BLOCK FieldEEzsignannotationType = "StrikethroughBlock"
	STRIKETHROUGH_LINE FieldEEzsignannotationType = "StrikethroughLine"
	TEXT FieldEEzsignannotationType = "Text"
)

// All allowed values of FieldEEzsignannotationType enum
var AllowedFieldEEzsignannotationTypeEnumValues = []FieldEEzsignannotationType{
	"StrikethroughBlock",
	"StrikethroughLine",
	"Text",
}

func (v *FieldEEzsignannotationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsignannotationType(value)
	for _, existing := range AllowedFieldEEzsignannotationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsignannotationType", value)
}

// NewFieldEEzsignannotationTypeFromValue returns a pointer to a valid FieldEEzsignannotationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsignannotationTypeFromValue(v string) (*FieldEEzsignannotationType, error) {
	ev := FieldEEzsignannotationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsignannotationType: valid values are %v", v, AllowedFieldEEzsignannotationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsignannotationType) IsValid() bool {
	for _, existing := range AllowedFieldEEzsignannotationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsignannotationType value
func (v FieldEEzsignannotationType) Ptr() *FieldEEzsignannotationType {
	return &v
}

type NullableFieldEEzsignannotationType struct {
	value *FieldEEzsignannotationType
	isSet bool
}

func (v NullableFieldEEzsignannotationType) Get() *FieldEEzsignannotationType {
	return v.value
}

func (v *NullableFieldEEzsignannotationType) Set(val *FieldEEzsignannotationType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsignannotationType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsignannotationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsignannotationType(val *FieldEEzsignannotationType) *NullableFieldEEzsignannotationType {
	return &NullableFieldEEzsignannotationType{value: val, isSet: true}
}

func (v NullableFieldEEzsignannotationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsignannotationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

