/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatesignatureDependencyrequirement The Dependency requirement of the Ezsigntemplatesignature
type FieldEEzsigntemplatesignatureDependencyrequirement string

// List of Field-eEzsigntemplatesignatureDependencyrequirement
const (
	ALL_OF FieldEEzsigntemplatesignatureDependencyrequirement = "AllOf"
	ANY_OF FieldEEzsigntemplatesignatureDependencyrequirement = "AnyOf"
)

// All allowed values of FieldEEzsigntemplatesignatureDependencyrequirement enum
var AllowedFieldEEzsigntemplatesignatureDependencyrequirementEnumValues = []FieldEEzsigntemplatesignatureDependencyrequirement{
	"AllOf",
	"AnyOf",
}

func (v *FieldEEzsigntemplatesignatureDependencyrequirement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatesignatureDependencyrequirement(value)
	for _, existing := range AllowedFieldEEzsigntemplatesignatureDependencyrequirementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatesignatureDependencyrequirement", value)
}

// NewFieldEEzsigntemplatesignatureDependencyrequirementFromValue returns a pointer to a valid FieldEEzsigntemplatesignatureDependencyrequirement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatesignatureDependencyrequirementFromValue(v string) (*FieldEEzsigntemplatesignatureDependencyrequirement, error) {
	ev := FieldEEzsigntemplatesignatureDependencyrequirement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatesignatureDependencyrequirement: valid values are %v", v, AllowedFieldEEzsigntemplatesignatureDependencyrequirementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatesignatureDependencyrequirement) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatesignatureDependencyrequirementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatesignatureDependencyrequirement value
func (v FieldEEzsigntemplatesignatureDependencyrequirement) Ptr() *FieldEEzsigntemplatesignatureDependencyrequirement {
	return &v
}

type NullableFieldEEzsigntemplatesignatureDependencyrequirement struct {
	value *FieldEEzsigntemplatesignatureDependencyrequirement
	isSet bool
}

func (v NullableFieldEEzsigntemplatesignatureDependencyrequirement) Get() *FieldEEzsigntemplatesignatureDependencyrequirement {
	return v.value
}

func (v *NullableFieldEEzsigntemplatesignatureDependencyrequirement) Set(val *FieldEEzsigntemplatesignatureDependencyrequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatesignatureDependencyrequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatesignatureDependencyrequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatesignatureDependencyrequirement(val *FieldEEzsigntemplatesignatureDependencyrequirement) *NullableFieldEEzsigntemplatesignatureDependencyrequirement {
	return &NullableFieldEEzsigntemplatesignatureDependencyrequirement{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatesignatureDependencyrequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatesignatureDependencyrequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

