/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
)

// checks if the CommonReportgroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonReportgroup{}

// CommonReportgroup A group of reports  Each Reportgroup is for a specific recipient or for a specific context.
type CommonReportgroup struct {
	AObjReport []CommonReport `json:"a_objReport"`
	AObjReportcellstyleCustom []CommonReportcellstyle `json:"a_objReportcellstyleCustom"`
}

// NewCommonReportgroup instantiates a new CommonReportgroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonReportgroup(aObjReport []CommonReport, aObjReportcellstyleCustom []CommonReportcellstyle) *CommonReportgroup {
	this := CommonReportgroup{}
	this.AObjReport = aObjReport
	this.AObjReportcellstyleCustom = aObjReportcellstyleCustom
	return &this
}

// NewCommonReportgroupWithDefaults instantiates a new CommonReportgroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonReportgroupWithDefaults() *CommonReportgroup {
	this := CommonReportgroup{}
	return &this
}

// GetAObjReport returns the AObjReport field value
func (o *CommonReportgroup) GetAObjReport() []CommonReport {
	if o == nil {
		var ret []CommonReport
		return ret
	}

	return o.AObjReport
}

// GetAObjReportOk returns a tuple with the AObjReport field value
// and a boolean to check if the value has been set.
func (o *CommonReportgroup) GetAObjReportOk() ([]CommonReport, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjReport, true
}

// SetAObjReport sets field value
func (o *CommonReportgroup) SetAObjReport(v []CommonReport) {
	o.AObjReport = v
}

// GetAObjReportcellstyleCustom returns the AObjReportcellstyleCustom field value
func (o *CommonReportgroup) GetAObjReportcellstyleCustom() []CommonReportcellstyle {
	if o == nil {
		var ret []CommonReportcellstyle
		return ret
	}

	return o.AObjReportcellstyleCustom
}

// GetAObjReportcellstyleCustomOk returns a tuple with the AObjReportcellstyleCustom field value
// and a boolean to check if the value has been set.
func (o *CommonReportgroup) GetAObjReportcellstyleCustomOk() ([]CommonReportcellstyle, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjReportcellstyleCustom, true
}

// SetAObjReportcellstyleCustom sets field value
func (o *CommonReportgroup) SetAObjReportcellstyleCustom(v []CommonReportcellstyle) {
	o.AObjReportcellstyleCustom = v
}

func (o CommonReportgroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonReportgroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["a_objReport"] = o.AObjReport
	toSerialize["a_objReportcellstyleCustom"] = o.AObjReportcellstyleCustom
	return toSerialize, nil
}

type NullableCommonReportgroup struct {
	value *CommonReportgroup
	isSet bool
}

func (v NullableCommonReportgroup) Get() *CommonReportgroup {
	return v.value
}

func (v *NullableCommonReportgroup) Set(val *CommonReportgroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonReportgroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonReportgroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonReportgroup(val *CommonReportgroup) *NullableCommonReportgroup {
	return &NullableCommonReportgroup{value: val, isSet: true}
}

func (v NullableCommonReportgroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonReportgroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


