/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.1
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatesignaturePositioning How the positioning of the Ezsigntemplatesignature will be done
type FieldEEzsigntemplatesignaturePositioning string

// List of Field-eEzsigntemplatesignaturePositioning
const (
	PER_COORDINATES FieldEEzsigntemplatesignaturePositioning = "PerCoordinates"
	PER_POSITIONING_PATTERN FieldEEzsigntemplatesignaturePositioning = "PerPositioningPattern"
)

// All allowed values of FieldEEzsigntemplatesignaturePositioning enum
var AllowedFieldEEzsigntemplatesignaturePositioningEnumValues = []FieldEEzsigntemplatesignaturePositioning{
	"PerCoordinates",
	"PerPositioningPattern",
}

func (v *FieldEEzsigntemplatesignaturePositioning) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatesignaturePositioning(value)
	for _, existing := range AllowedFieldEEzsigntemplatesignaturePositioningEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatesignaturePositioning", value)
}

// NewFieldEEzsigntemplatesignaturePositioningFromValue returns a pointer to a valid FieldEEzsigntemplatesignaturePositioning
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatesignaturePositioningFromValue(v string) (*FieldEEzsigntemplatesignaturePositioning, error) {
	ev := FieldEEzsigntemplatesignaturePositioning(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatesignaturePositioning: valid values are %v", v, AllowedFieldEEzsigntemplatesignaturePositioningEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatesignaturePositioning) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatesignaturePositioningEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatesignaturePositioning value
func (v FieldEEzsigntemplatesignaturePositioning) Ptr() *FieldEEzsigntemplatesignaturePositioning {
	return &v
}

type NullableFieldEEzsigntemplatesignaturePositioning struct {
	value *FieldEEzsigntemplatesignaturePositioning
	isSet bool
}

func (v NullableFieldEEzsigntemplatesignaturePositioning) Get() *FieldEEzsigntemplatesignaturePositioning {
	return v.value
}

func (v *NullableFieldEEzsigntemplatesignaturePositioning) Set(val *FieldEEzsigntemplatesignaturePositioning) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatesignaturePositioning) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatesignaturePositioning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatesignaturePositioning(val *FieldEEzsigntemplatesignaturePositioning) *NullableFieldEEzsigntemplatesignaturePositioning {
	return &NullableFieldEEzsigntemplatesignaturePositioning{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatesignaturePositioning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatesignaturePositioning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

