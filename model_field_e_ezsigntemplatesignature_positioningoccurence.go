/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// FieldEEzsigntemplatesignaturePositioningoccurence The occurence of the pattern to add the Ezsigntemplatesignature  This will be required if **eEzsigntemplatesignaturePositioning** is set to **PerCoordinates**
type FieldEEzsigntemplatesignaturePositioningoccurence string

// List of Field-eEzsigntemplatesignaturePositioningoccurence
const (
	ALL FieldEEzsigntemplatesignaturePositioningoccurence = "All"
	FIRST FieldEEzsigntemplatesignaturePositioningoccurence = "First"
	LAST FieldEEzsigntemplatesignaturePositioningoccurence = "Last"
)

// All allowed values of FieldEEzsigntemplatesignaturePositioningoccurence enum
var AllowedFieldEEzsigntemplatesignaturePositioningoccurenceEnumValues = []FieldEEzsigntemplatesignaturePositioningoccurence{
	"All",
	"First",
	"Last",
}

func (v *FieldEEzsigntemplatesignaturePositioningoccurence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldEEzsigntemplatesignaturePositioningoccurence(value)
	for _, existing := range AllowedFieldEEzsigntemplatesignaturePositioningoccurenceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldEEzsigntemplatesignaturePositioningoccurence", value)
}

// NewFieldEEzsigntemplatesignaturePositioningoccurenceFromValue returns a pointer to a valid FieldEEzsigntemplatesignaturePositioningoccurence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldEEzsigntemplatesignaturePositioningoccurenceFromValue(v string) (*FieldEEzsigntemplatesignaturePositioningoccurence, error) {
	ev := FieldEEzsigntemplatesignaturePositioningoccurence(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldEEzsigntemplatesignaturePositioningoccurence: valid values are %v", v, AllowedFieldEEzsigntemplatesignaturePositioningoccurenceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldEEzsigntemplatesignaturePositioningoccurence) IsValid() bool {
	for _, existing := range AllowedFieldEEzsigntemplatesignaturePositioningoccurenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Field-eEzsigntemplatesignaturePositioningoccurence value
func (v FieldEEzsigntemplatesignaturePositioningoccurence) Ptr() *FieldEEzsigntemplatesignaturePositioningoccurence {
	return &v
}

type NullableFieldEEzsigntemplatesignaturePositioningoccurence struct {
	value *FieldEEzsigntemplatesignaturePositioningoccurence
	isSet bool
}

func (v NullableFieldEEzsigntemplatesignaturePositioningoccurence) Get() *FieldEEzsigntemplatesignaturePositioningoccurence {
	return v.value
}

func (v *NullableFieldEEzsigntemplatesignaturePositioningoccurence) Set(val *FieldEEzsigntemplatesignaturePositioningoccurence) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldEEzsigntemplatesignaturePositioningoccurence) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldEEzsigntemplatesignaturePositioningoccurence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldEEzsigntemplatesignaturePositioningoccurence(val *FieldEEzsigntemplatesignaturePositioningoccurence) *NullableFieldEEzsigntemplatesignaturePositioningoccurence {
	return &NullableFieldEEzsigntemplatesignaturePositioningoccurence{value: val, isSet: true}
}

func (v NullableFieldEEzsigntemplatesignaturePositioningoccurence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldEEzsigntemplatesignaturePositioningoccurence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

