/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EzdoctemplatetypeAutocompleteElementResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EzdoctemplatetypeAutocompleteElementResponse{}

// EzdoctemplatetypeAutocompleteElementResponse A Ezdoctemplatetype AutocompleteElement Response
type EzdoctemplatetypeAutocompleteElementResponse struct {
	// The unique ID of the Ezdoctemplatetype
	PkiEzdoctemplatetypeID int32 `json:"pkiEzdoctemplatetypeID"`
	// The description of the Ezdoctemplatetype in the language of the requester
	SEzdoctemplatetypeDescriptionX string `json:"sEzdoctemplatetypeDescriptionX" validate:"regexp=^.{0,50}$"`
	// Whether the Ezdoctemplatetype is active or not
	BEzdoctemplatetypeIsactive bool `json:"bEzdoctemplatetypeIsactive"`
}

type _EzdoctemplatetypeAutocompleteElementResponse EzdoctemplatetypeAutocompleteElementResponse

// NewEzdoctemplatetypeAutocompleteElementResponse instantiates a new EzdoctemplatetypeAutocompleteElementResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEzdoctemplatetypeAutocompleteElementResponse(pkiEzdoctemplatetypeID int32, sEzdoctemplatetypeDescriptionX string, bEzdoctemplatetypeIsactive bool) *EzdoctemplatetypeAutocompleteElementResponse {
	this := EzdoctemplatetypeAutocompleteElementResponse{}
	this.PkiEzdoctemplatetypeID = pkiEzdoctemplatetypeID
	this.SEzdoctemplatetypeDescriptionX = sEzdoctemplatetypeDescriptionX
	this.BEzdoctemplatetypeIsactive = bEzdoctemplatetypeIsactive
	return &this
}

// NewEzdoctemplatetypeAutocompleteElementResponseWithDefaults instantiates a new EzdoctemplatetypeAutocompleteElementResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEzdoctemplatetypeAutocompleteElementResponseWithDefaults() *EzdoctemplatetypeAutocompleteElementResponse {
	this := EzdoctemplatetypeAutocompleteElementResponse{}
	return &this
}

// GetPkiEzdoctemplatetypeID returns the PkiEzdoctemplatetypeID field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetPkiEzdoctemplatetypeID() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PkiEzdoctemplatetypeID
}

// GetPkiEzdoctemplatetypeIDOk returns a tuple with the PkiEzdoctemplatetypeID field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetPkiEzdoctemplatetypeIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PkiEzdoctemplatetypeID, true
}

// SetPkiEzdoctemplatetypeID sets field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) SetPkiEzdoctemplatetypeID(v int32) {
	o.PkiEzdoctemplatetypeID = v
}

// GetSEzdoctemplatetypeDescriptionX returns the SEzdoctemplatetypeDescriptionX field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetSEzdoctemplatetypeDescriptionX() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SEzdoctemplatetypeDescriptionX
}

// GetSEzdoctemplatetypeDescriptionXOk returns a tuple with the SEzdoctemplatetypeDescriptionX field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetSEzdoctemplatetypeDescriptionXOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SEzdoctemplatetypeDescriptionX, true
}

// SetSEzdoctemplatetypeDescriptionX sets field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) SetSEzdoctemplatetypeDescriptionX(v string) {
	o.SEzdoctemplatetypeDescriptionX = v
}

// GetBEzdoctemplatetypeIsactive returns the BEzdoctemplatetypeIsactive field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetBEzdoctemplatetypeIsactive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BEzdoctemplatetypeIsactive
}

// GetBEzdoctemplatetypeIsactiveOk returns a tuple with the BEzdoctemplatetypeIsactive field value
// and a boolean to check if the value has been set.
func (o *EzdoctemplatetypeAutocompleteElementResponse) GetBEzdoctemplatetypeIsactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BEzdoctemplatetypeIsactive, true
}

// SetBEzdoctemplatetypeIsactive sets field value
func (o *EzdoctemplatetypeAutocompleteElementResponse) SetBEzdoctemplatetypeIsactive(v bool) {
	o.BEzdoctemplatetypeIsactive = v
}

func (o EzdoctemplatetypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EzdoctemplatetypeAutocompleteElementResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pkiEzdoctemplatetypeID"] = o.PkiEzdoctemplatetypeID
	toSerialize["sEzdoctemplatetypeDescriptionX"] = o.SEzdoctemplatetypeDescriptionX
	toSerialize["bEzdoctemplatetypeIsactive"] = o.BEzdoctemplatetypeIsactive
	return toSerialize, nil
}

func (o *EzdoctemplatetypeAutocompleteElementResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pkiEzdoctemplatetypeID",
		"sEzdoctemplatetypeDescriptionX",
		"bEzdoctemplatetypeIsactive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEzdoctemplatetypeAutocompleteElementResponse := _EzdoctemplatetypeAutocompleteElementResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEzdoctemplatetypeAutocompleteElementResponse)

	if err != nil {
		return err
	}

	*o = EzdoctemplatetypeAutocompleteElementResponse(varEzdoctemplatetypeAutocompleteElementResponse)

	return err
}

type NullableEzdoctemplatetypeAutocompleteElementResponse struct {
	value *EzdoctemplatetypeAutocompleteElementResponse
	isSet bool
}

func (v NullableEzdoctemplatetypeAutocompleteElementResponse) Get() *EzdoctemplatetypeAutocompleteElementResponse {
	return v.value
}

func (v *NullableEzdoctemplatetypeAutocompleteElementResponse) Set(val *EzdoctemplatetypeAutocompleteElementResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEzdoctemplatetypeAutocompleteElementResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEzdoctemplatetypeAutocompleteElementResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEzdoctemplatetypeAutocompleteElementResponse(val *EzdoctemplatetypeAutocompleteElementResponse) *NullableEzdoctemplatetypeAutocompleteElementResponse {
	return &NullableEzdoctemplatetypeAutocompleteElementResponse{value: val, isSet: true}
}

func (v NullableEzdoctemplatetypeAutocompleteElementResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEzdoctemplatetypeAutocompleteElementResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


