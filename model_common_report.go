/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.2
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonReport{}

// CommonReport A Report containing Reportsections 
type CommonReport struct {
	AObjReportsection []CommonReportsection `json:"a_objReportsection"`
	// Whether we display pagination in the report
	BReportPaginate *bool `json:"bReportPaginate,omitempty"`
	// The title of this Report
	SReportTitle *string `json:"sReportTitle,omitempty"`
}

type _CommonReport CommonReport

// NewCommonReport instantiates a new CommonReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonReport(aObjReportsection []CommonReportsection) *CommonReport {
	this := CommonReport{}
	this.AObjReportsection = aObjReportsection
	return &this
}

// NewCommonReportWithDefaults instantiates a new CommonReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonReportWithDefaults() *CommonReport {
	this := CommonReport{}
	return &this
}

// GetAObjReportsection returns the AObjReportsection field value
func (o *CommonReport) GetAObjReportsection() []CommonReportsection {
	if o == nil {
		var ret []CommonReportsection
		return ret
	}

	return o.AObjReportsection
}

// GetAObjReportsectionOk returns a tuple with the AObjReportsection field value
// and a boolean to check if the value has been set.
func (o *CommonReport) GetAObjReportsectionOk() ([]CommonReportsection, bool) {
	if o == nil {
		return nil, false
	}
	return o.AObjReportsection, true
}

// SetAObjReportsection sets field value
func (o *CommonReport) SetAObjReportsection(v []CommonReportsection) {
	o.AObjReportsection = v
}

// GetBReportPaginate returns the BReportPaginate field value if set, zero value otherwise.
func (o *CommonReport) GetBReportPaginate() bool {
	if o == nil || IsNil(o.BReportPaginate) {
		var ret bool
		return ret
	}
	return *o.BReportPaginate
}

// GetBReportPaginateOk returns a tuple with the BReportPaginate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonReport) GetBReportPaginateOk() (*bool, bool) {
	if o == nil || IsNil(o.BReportPaginate) {
		return nil, false
	}
	return o.BReportPaginate, true
}

// HasBReportPaginate returns a boolean if a field has been set.
func (o *CommonReport) HasBReportPaginate() bool {
	if o != nil && !IsNil(o.BReportPaginate) {
		return true
	}

	return false
}

// SetBReportPaginate gets a reference to the given bool and assigns it to the BReportPaginate field.
func (o *CommonReport) SetBReportPaginate(v bool) {
	o.BReportPaginate = &v
}

// GetSReportTitle returns the SReportTitle field value if set, zero value otherwise.
func (o *CommonReport) GetSReportTitle() string {
	if o == nil || IsNil(o.SReportTitle) {
		var ret string
		return ret
	}
	return *o.SReportTitle
}

// GetSReportTitleOk returns a tuple with the SReportTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonReport) GetSReportTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SReportTitle) {
		return nil, false
	}
	return o.SReportTitle, true
}

// HasSReportTitle returns a boolean if a field has been set.
func (o *CommonReport) HasSReportTitle() bool {
	if o != nil && !IsNil(o.SReportTitle) {
		return true
	}

	return false
}

// SetSReportTitle gets a reference to the given string and assigns it to the SReportTitle field.
func (o *CommonReport) SetSReportTitle(v string) {
	o.SReportTitle = &v
}

func (o CommonReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["a_objReportsection"] = o.AObjReportsection
	if !IsNil(o.BReportPaginate) {
		toSerialize["bReportPaginate"] = o.BReportPaginate
	}
	if !IsNil(o.SReportTitle) {
		toSerialize["sReportTitle"] = o.SReportTitle
	}
	return toSerialize, nil
}

func (o *CommonReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"a_objReportsection",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonReport := _CommonReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonReport)

	if err != nil {
		return err
	}

	*o = CommonReport(varCommonReport)

	return err
}

type NullableCommonReport struct {
	value *CommonReport
	isSet bool
}

func (v NullableCommonReport) Get() *CommonReport {
	return v.value
}

func (v *NullableCommonReport) Set(val *CommonReport) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonReport) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonReport(val *CommonReport) *NullableCommonReport {
	return &NullableCommonReport{value: val, isSet: true}
}

func (v NullableCommonReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


