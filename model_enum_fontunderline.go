/*
eZmax API Definition (Full)

This API expose all the functionnalities for the eZmax and eZsign applications.

API version: 1.2.0
Contact: support-api@ezmax.ca
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package eZmaxApi

import (
	"encoding/json"
	"fmt"
)

// EnumFontunderline The Font Underline style
type EnumFontunderline string

// List of Enum-Fontunderline
const (
	NONE EnumFontunderline = "None"
	SINGLE EnumFontunderline = "Single"
	DOUBLE EnumFontunderline = "Double"
)

// All allowed values of EnumFontunderline enum
var AllowedEnumFontunderlineEnumValues = []EnumFontunderline{
	"None",
	"Single",
	"Double",
}

func (v *EnumFontunderline) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFontunderline(value)
	for _, existing := range AllowedEnumFontunderlineEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFontunderline", value)
}

// NewEnumFontunderlineFromValue returns a pointer to a valid EnumFontunderline
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFontunderlineFromValue(v string) (*EnumFontunderline, error) {
	ev := EnumFontunderline(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFontunderline: valid values are %v", v, AllowedEnumFontunderlineEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFontunderline) IsValid() bool {
	for _, existing := range AllowedEnumFontunderlineEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Enum-Fontunderline value
func (v EnumFontunderline) Ptr() *EnumFontunderline {
	return &v
}

type NullableEnumFontunderline struct {
	value *EnumFontunderline
	isSet bool
}

func (v NullableEnumFontunderline) Get() *EnumFontunderline {
	return v.value
}

func (v *NullableEnumFontunderline) Set(val *EnumFontunderline) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFontunderline) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFontunderline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFontunderline(val *EnumFontunderline) *NullableEnumFontunderline {
	return &NullableEnumFontunderline{value: val, isSet: true}
}

func (v NullableEnumFontunderline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFontunderline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

